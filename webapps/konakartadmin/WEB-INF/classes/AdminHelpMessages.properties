#--------------------------------------------------------------------------------------------------
# Admin Help Message Catalogue 
#--------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------
# Help Pages for the KonaKart Admin Application 
#--------------------------------------------------------------------------------------------------

help.addressFormats             = These are the address formats that are defined for your online store. Valid template key words are:<ul><li>$cr - Carriage return (new line)</li><li>$firstname</li><li>$lastname</li><li>$company</li><li>$streets = $street + line break + $suburb</li><li>$street</li><li>$street1</li><li>$suburb</li><li>$city</li><li>$postcode</li><li>$state</li><li>$telephone</li><li>$telephone1</li><li>$email</li><li>$country</li></ul><br />An address format describes the way addresses will appear in different parts of the system. You define all the address formats you want to use here and then specify which ones you want to use in specific parts of the system elsewhere (eg. each country has an address format defined). The formatting is performed by substituting the above keywords with the actual values within the address object.<br /><br />An address format has a full format and a summary format - you should define both for each address format you create.<br /><br />An address format is selected by clicking on it\, and then it may be edited or deleted.<br /><br />A new address format may be created by clicking the <b>New</b> button\, defining the new address format in the edit fields at the bottom\, then clicking on the <b>Save</b> button to insert the new entry into the database.

help.address.manu               = This panel enables you to manage addresses for manufacturers.<br/><br/>Each manufacturer may be associated with multiple addresses. Note that the Default Addr check box is disabled because the notion of a primary or default address is not supported for manufacturer addresses. If required you can use custom fields to tag the addresses.<br/><br/>The <b>Configuration>>AdminApp Configuration</b> section of the Admin App allows you to define how the address is formatted for display purposes in this panel.

help.address.prod               = This panel enables you to manage addresses for products.<br/><br/>Each product may be associated with multiple addresses. Each address may be associated to multiple products\, which is useful for instance when the address is used to define a drop shipper who may be responsible for more than one product.<br/><br/>The <b>Select Addr</b> button allows you to select an address from a list in a dialog box. The default number of addresses displayed before and after a search may be customized in the <b>Configuration>>AdminApp Configuration</b> section of the Admin App. This section of the admin app also allows you to define how the address is formatted in the select dialog box as well as in the main panel. Note that an address may be searched for using the company name since products will normally be associated to companies such as drop shippers. When the <b>Select </b> button is clicked in the dialog box after selecting one or more addresses\, you are returned to the address panel and will see the new addresses in the list. .<br/><br/>The <b>Remove</b> button allows you to remove an address from a product without actually deleting it. The removed address may be re-associated with the product by selecting it from a list as explained above. The <b>Delete</b> button actually deletes the address rather than just removing the link between the address and the product. If the address is being used by other products\, you are warned of this in a confirmation pop-up and can decide to cancel the delete request.<br/><br/>If the address is edited and the <b>Save</b> button is clicked\, the changes will apply for all products using this address. The Default Addr check box may be used to signal the importance of one or more addresses. Unlike for customer addresses, KonaKart does not enforce uniqueness and it is not mandatory for any of the addresses to be the default.<br/><br/>The <b>New</b> button allows you insert a new address which will automatically be associated with this product and be made available for other products in the selection dialog box.

help.address.cust               = This panel enables you to manage addresses for customers.<br/><br/>Each customer may be associated with multiple addresses\, one of which can defined as being the primary or default address. Note that the default address may not be unchecked. In order to remove the default address tag from an address\, another address must be made default. Note also that the default address may not be deleted and that if a customer has only one address\, then it cannot be deleted because a customer has to have a minimum of one address which can only be deleted by deleting the customer..<br/><br/>The <b>Configuration>>AdminApp Configuration</b> section of the Admin App allows you to define how the address is formatted for display purposes in this panel.

help.address.store              = This panel enables you to manage addresses for stores.<br/><br/>Each store may be associated with multiple addresses. Note that the Default Addr check box is disabled because the notion of a primary or default address is not supported for store addresses. If required you can use custom fields to tag the addresses.<br/><br/>The <b>Configuration>>AdminApp Configuration</b> section of the Admin App allows you to define how the address is formatted for display purposes in this panel.

help.auditConfig                = <b>Security and Auditing Configuration</b><br /><br />You can set the Auditing level on Read\, Edit,\ Insert\, and Delete operations at one of three levels (Disable\, Summary or Detailed).  Once Auditing has been defined to be collected it is stored in the database and can be reviewed on the <b>Audit Data</b> panel of the Admin App.<br /><br />Define custom credential checking using the <b>Login Integration Mgr</b> classes (either create your own classes and name them here or supply implementations of the classes specified by default).<br /><br />If you wish to review the reviews added by Customers prior to allowing them to become visible to other Customers then set the Default state for reviews to be 1<br /><br />${help.returnByApi}<br /><br />As with other Configuration Settings\, you can modify these values and refresh the caches (see under the <b>Tools</b> menu) to see them have an instant effect (although some that affect the Admin App require you to log out then log in again).

help.adminAppConfig             = <b>Admin App Configuration</b><br /><br />As with other Configuration Settings\, you can modify of these values and refresh the caches (see under the <b>Tools</b> menu) to see them have an instant effect (although some that affect the Admin App require you to log out then log in again). <br /><br /><b>Warn of Duplicate SKUs</b> : Select <b>true</b> to get the system to warn you if you are about to create a product with an SKU that already exists for another product. Select <b>false</b> to disable this check.<br /><br /><b>Hidden Product Types</b> : Leave empty to show all product types in the product type droplist on the edit product panel.  Specify a comma-separated list of integers to exclude product types from that droplist where <b>0</b>=Physical Product\, <b>1</b>=Digital Download\, <b>2</b>=Free Shippping\, <b>3</b>=Bundle\, <b>4</b>=Free Shipping Bundle\, <b>5</b>=Gift Certificate and <b>6</b>=Bookable Product.<br /><br /><b>Message Types</b> : This defines the message types that appear in the message type droplists.  The order of the items specified in the comma-separated list is significant with the first item being equivalent to message type 1\, the second being type 2 and so on. Additional message types can be added to the end of this list if required.<br /><br />${help.returnByApi}

help.audit                      = In KonaKart\, audit data is saved whenever an API method is called. It can be configured individually for <b>deletes</b>\, <b>edits</b>\, <b>inserts</b> and <b>reads</b>. Also the level of auditing can be set to <b>summary</b> or <b>detailed</b>. When set to <b>detailed</b>\, where possible\, the object being deleted\, inserted or edited\, is serialized and saved within the audit data and can be viewed in the <b>Object(s) </b> field.<br /><br />This window allows you to view audit data. It allows you to search for data based on<ul><li>The name of the API method that was called.</li><li>The action (i.e. Insert\, Read\, Delete\, Edit)</li><li> The id of the object being edited\, deleted etc. Note that this value is not always available because the API method may allow you to read\, insert\, delete or edit multiple objects in one call.</li><li>The id of the user that made the method call.</li></ul>In order to perform a search\, you must enter the search criteria and then click the <b>Search</b> button. The returned data may be sorted by clicking on the column names. If a row of audit data also contains more detailed information about the object(s) that were deleted\, inserted or edited\, this information is shown in an <b>Object(s) </b> field for the currently selected row.

help.importerConfig             = <b>Importer Configuration</b><br /><br />Configuration settings for Importer Jobs<br /><br />As with other Configuration Settings\, you can modify these values and refresh the caches (see under the <b>Tools</b> menu) to see them have an instant effect (although some that affect the Admin App require you to log out then log in again).<br /><br />There are 3 Custom Import buttons that can be configured to execute import operations (see the Importer Panel).  If these require configuration settings then this panel would be a good place to put them. 

help.bookings                   = A bookable product is a product with a start and end date such as a course. When a customer buys a bookable product through the storefront application\, a booking is made and associated with the bookable product. (i.e. the customer signs up for the course). The booking is also associated with the order and the customer. Depending on where it was opened from\, this panel shows the bookings for a product\, a customer or an order. <br /><br />The editable fields are the customer name and the custom fields. The quantity of the booking is read-only. Other fields are for informational purpose only and aren't editable since they do not belong to the booking. They are the start and end dates of the bookable product\, the name of the bookable product and the id of the order.

help.cacheConfig                = <b>Caching</b><br /><br />KonaKart is configured using the configuration variables present within this section of the Administration Application. The variables are stored within the <b>configuration</b> database table and may be edited from this panel.<br /><br />Changes may take a few seconds to become active because the application cache needs to be reloaded\, and this happens on a scheduled basis at the frequency defined by the <b>Client config cache refresh check interval</b> configuration variable that can be edited on this panel.<br /><br />${help.returnByApi}<br /><br />In the Enterprise version of KonaKart you can choose to <b>enable or disable the caching</b> of Products and/or Product Image names.<br /><br />You can set a maximum size for the KonaKart Product Cache (maximum number of products) - ensure you allocate enough memory to java.<br /><br />Cache Management (flushing etc) is controlled by KonaKart Events - you can choose whether or not to create some of these events.  If you choose to create an event (eg Quantity Change Events) this will cause the relevant product to be removed from the cache so that its Quantity is updated next time it is read.<br /><br />See the User Guide for more details on how to configure caching in KonaKart.<br /><br />Most variables have float over text with a short description of their functionality.

help.categories                 = A tree view of categories is shown on the left side of the window. A category is selected by clicking on it\, and then it may be edited or deleted. The <b>Invisible</b> attribute\, when set\, will make the category invisible within the application. It won't be displayed within the category tree. An image for the category may be uploaded by selecting a file from the file system and then clicking the upload button. The file will be uploaded to the Image Base Path defined by a configuration variable that can be managed in the Configuration>>Images section of this application. Before clicking the upload button\, the file name (for the file that will be created) may be changed and extra path information may be added.<br /><br />A new category may be created by clicking the <b>New</b> button. The new category will become the child of the currently selected category.<br /><br />By clicking the <b>Move</b> button\, another tree view appears on the right hand side of the window. You may move a category to a new position by selecting on the left tree view\, the category that you want to move. Then on the right tree view you select the new parent for the category; and finally you must click the <b>Save</b> button below the right tree view. .<br /><br />The <b>Products</b> button opens a window displaying a list of products for the chosen category. <br /><br />The <b>Tag Groups</b> button opens a popup window where you can associate one or more tag groups to this category. Tag groups are containers for tags which can be associated to products in the product maintenance panel. If a category for example were named "Digital Cameras"\, the tag groups could be Megapixels\, Optical Zoom\, Battery type etc. When a customer selects a category in the eCommerce application\, the tag groups (and tags) related to that category can be displayed so that a customer can refine his search. Continuing with the previous example\, the customer could wish to only view cameras with 6 MPixel resolution and optical zoom of 8x.<br /><br />The <b>Category Id</b> can be made invisible / visible by setting the configuration variable under <b>Configuration >> Admin App Configuration</b>.

help.catalogs                   = The Enterprise version of KonaKart allows you to define multiple catalogs for a single store. Each catalog contains the same products\, but they may have different prices and quantity in stock. There are separate database tables that store the prices and quantities for each catalog.<br/><br/>This panel allows you to define a new catalog. The catalog name is used as the one of the keys in the tables that store prices and quantities. The description is only used in this panel to describe the catalog in case you decide to make the name non descriptive. The checkboxes allow you to choose whether the catalog should store prices, quantities or both. If the catalog doesn't store prices or quantities\, then the values used are those stored with the product. The admin and application API calls allow you to specify the catalog to use when fetching one or more products. The admin API calls also allow you to specify the catalog used when inserting and editing a product. <br/><br/>When a catalog is defined\, a drop list appears on the header panel that allows you to choose the catalog. Note that if you create a new product catalog\, select it from the drop list and then do a product search in the products panel\, no products will be found. If a catalog is defined for example to store prices\, then a product for that catalog will not be found if the prices have not been set. In order to set them\, you must edit the product after having selected <b>No Catalog</b> from the drop list. Before saving the edited product you must select your chosen catalog and then click the save button. In this way the new prices will be saved for that catalog and the product will now appear after a search.

help.configFiles                = These are the configuration files that are defined for your online store. <br /><br />To edit a file\, first select it\, then click the \"<b>Edit</b>\" button to edit it. <br /><br />To upload a file\, (if you are authorised to do so)\, first select the file in the list you want to replace with your local file\, then click the \"<b>Upload</b>\" button to upload it (a local file system browser dialog will appear allowing you to select the local file\, and then finally to upload it). Note carefully that you should exercise extreme caution when replacing these citical KonaKart configuration files.<br /><br />To reload the list of files click the \"<b>Reload</b>\" button.  This re-reads the list of files to display from the file that defines this list (the <b>konakart_config_files.xml</b> file).<br /><br />Note that most of the parameters in these configuration files will not actually take effect until you restart KonaKart.<br /><br />If you wish to change the list of files that are shown in the list you have to edit the <b>konakart_config_files.xml</b> file which you will find under <b>webapps/konakartadmin/WEB-INF/classes</b>.  In the default installation on Windows that is:<b>C:\\Program Files\\KonaKart\\webapps\\konakartadmin\\WEB-INF\\classes\\konakart_config_files.xml</b><br /><br />${help.returnByApi}

help.configuration              = KonaKart is configured using the configuration variables present within this section of the Administration Application. The variables are stored within the <b>configuration</b> database table and may be edited from this window.<br /><br />Changes may take a few seconds to become active because the application cache needs to be reloaded\, and this happens on a scheduled basis at the frequency defined by the <b>Client config cache refresh check interval</b> configuration variable that can be edited by clicking the <b>Cache</b> sub-section of the <b>Configuration</b> menu.<br /><br />${help.returnByApi}<br /><br />Most variables have float over text with a short description of their functionality.

help.countries                  = <b>Countries</b><br /><br />These are the countries that are defined for your online store. A country has a <b>name</b> and <b>2/3 letter ISO codes</b>. It also has an <b>address format</b> associated with it\, which determines how addresses within the country are formatted.<br /><br />A country can be defined as <b>Active</b> or <b>InActive</b> which allows you to show a defined subset of active countries in your storefront if required.<br /><br />A country also has a <b>message catalog key</b> associated with it.  This can be used to define country names for any number of languages by setting the translation against the "Msg Cat Key" in the Messages_XX.properties file for language XX (where XX could be de\, es\, etc).<br /><br />A country is selected by clicking on it\, and then it may be edited or deleted.<br /><br />A new country may be created by clicking the <b>New</b> button\, defining the new country in the edit fields at the bottom\, then clicking on the <b>Save</b> button to insert the new entry into the database.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Countries per page</li></ul>

help.coupons                    = A Coupon may be associated with a promotion so that the promotion only becomes active when a customer enters a valid coupon code during the checkout process. Coupons may be created\, edited and deleted. Each coupon has a <b>Name</b> and <b>Description</b> which may be used to identify it. The <b>Coupon Code</b> is the code that a customer will enter during checkout in order to activate the coupon. The number of times that a coupon can be used\, may be limited by setting the <b>Max Usage</b> attribute. A value of -1 is equivalent to unlimited use and is the default. <br /><br />Each coupon may be associated to zero or more promotions\, These associations are managed by clicking on the <b>Promotions</b> button at the bottom of the window. As promotions are added or removed from the coupon\, the button label updates to show the current number of promotions. <br /><br />Remember that in order to be able to enter a promotion code during the checkout process\, you must select <b>Configuration >> My Store</b> from the Admin App and set the <b>Display Coupon Entry Field</b> configuration variable.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Coupons per page</li></ul>

help.couponsFromPromotions      = A Coupon may be associated with a promotion so that the promotion only becomes active when a customer enters a valid coupon code during the checkout process. Coupons may be created\, edited and deleted. Each coupon has a <b>Name</b> and <b>Description</b> which may be used to identify it. The <b>Coupon Code</b> is the code that a customer will enter during checkout in order to activate the coupon. The number of times that a coupon can be used\, may be limited by setting the <b>Max Usage</b> attribute. A value of -1 is equivalent to unlimited use and is the default. <br /><br />Remember that in order to be able to enter a promotion code during the checkout process\, you must select <b>Configuration >> My Store</b> from the Admin App and set the <b>Display Coupon Entry Field</b> configuration variable.

help.currencies                 = These are the currencies that are defined for your online store. A currency has a name and a code as well as other attributes that define how it is displayed.<br /><br />A currency is selected by clicking on it\, and then it may be edited or deleted. Note that the default currency may not be deleted.<br /><br />A new currency may be created by clicking the <b>New</b> button\, defining the new currency in the edit fields at the bottom\, then clicking on the <b>Save</b> button to insert the new entry into the database.

help.customerCommunications     = You can use this tool to send template based eMails to your customers. Emails may be sent to all of your customers or only those that have requested to receive a newsletter. They may also be sent to customers that have asked to be notified about any updates for a particular product and to customers belonging to a certain customer group. The steps to take are as follows :<ul><li>Select the name of the Velocity template that you wish to use, from the drop list. New templates may be uploaded and will become visible in the drop list after a successful upload.</li><li>If you check the <b>Use customer lang</b> checkbox, then rather than using the default language of the system, the language of each customer is used to select the velocity template. This allows you to send eMails in different languages determined by the  preferred language of the customer.</li><li>If it is displayed and you check the <b>BCC Extra Addresses</b> checkbox, then any "extra email" addresses that have been defined for the store will be blind-copied on the email.</li><li>If you check the <b>Only Registered Customers</b> checkbox, then the newsletter will only be sent to registered customers.</li><li>Now you may enter text that will be merged with your template. Note that how the text is used, depends on your particular template design. Your template may contain all of the information it needs within the template itself. The text may contain HTML tags.</li><li>Before sending the mail to your customers, you may want to test it. In order to test it, you can click on the link that appears below the template entry field. An eMail will be sent to the eMail address of the logged in user.</li><li>Once you are satisfied with the template and its contents you may send the eMail to your customers. To send the eMail to all customers you must click on the link in the <b>Email to all customers</b> section. To send the eMail to all customers that have requested to receive the newsletter, you must click on the link in the <b>Newsletter</b> section. If you are sending out a product update eMail, you must first select the product from the dialog box that opens up when you click on the link in the <b>Product Notifications</b> section. Once selected, a new link appears that allows you to actually send the mails. Finally, if you are sending an eMail to all customers belonging to a customer group (i.e. all wholesale customers) or all customers that evaluate to "true" for an expression, you must select the group or expression from the drop list in order for a new link to appear which allows you to send the eMails.  </li></ul> The number of concurrent threads used to send the eMails can be set in the <b>Configuration >> Email Options</b> section of the Admin App. A log is created (SendTemplateEmail.log) which contains all of the eMail addresses used. The log file is created in your defined log directory which can be set in the <b>Configuration >> Logging</b> section of the Admin App.<br/><br/>Note that the panel may be configured to allow you to enter the template name manually rather than selecting it from a drop list. In this case you must only type in the name and not the \"_lang.vm\" extension which will be added for you and depends on the setting of the default language. Ensure that the template file exists on your file system. The base directory is defined in a configuration variable which can be edited through the admin app under <b>Configuration >> Velocity Templates</b>. Below this directory there is a directory that takes the name of the store id and defaults to store1. Finally, newsletters are placed within a sub directory named "newsletters". For example, in a Windows installation the newsletter templates can be found under KonaKart/templates/store1/newsletters.

help.customerGroups             = These are the customer groups that are defined for your online store. You can define as many customer groups as you please. They are used to aggregate customers of a certain type. For example\, you may have retail and wholesale customers.<br /><br />You should define the name and description of the customer group in each language that you want to provide in the store. There are a number of optional custom fields that may be used for your own specific data. The Price Id is an integer in the range of 0 to 3 where 0 is the default value. It is used to define which product price the customers within the group will use. This enables you to show different prices to different groups of customers.<br /><br />A customer group is selected by clicking on it\, and then it may be edited or deleted.<br /><br />A new customer group may be created by clicking the <b>New</b> button\, defining the new customer group in the edit fields at the bottom\, then clicking on the <b>Save</b> button to insert the new entry into the database.

help.customerTags               = This panel is used to create, edit and delete customer tags. A customer tag can be associated with a customer and given a value for that customer. The tags are used for marketing purposes, to show dynamic content, to determine whether to activate a promotion and to filter the recipients of customer mailings. Expressions can be created using the tags, that can be evaluated in real time to display dynamic content. i.e. Show a banner or activate a promotion only to customers over 50 years old that have viewed products in a particular category. <br/><br/> The <b>tag type</b> can take the following values:<ul><li>STRING_TYPE - The tag value is in the format of a String. i.e. To store the country from which the store is being accessed.</li><li>INT_TYPE - The tag type is in the format of an int. i.e. To save the product id of  the last product viewed by the customer. </li><li>MULTI_INT_TYPE - The tag type allows the tag to store an array of ints. When this type is selected, the <b>Max Number of Ints</b> attribute determines the maximum number of ints in the array. i.e. To store the ids of the last 5 products viewed by the customer.</li><li>DECIMAL_TYPE - The tag type is in the format of a decimal. i.e. To store the value of all items in the basket.</li><li>DATE_TYPE - The tag type is in the format of a date. In an expression it can be used to compare the stored date with another chosen date.</li><li>BOOLEAN_TYPE - The tag type is in the format of a boolean. i.e. To store the customer gender. The tag could be named IS_MALE and take values of true or false.</li><li>AGE_TYPE - The tag type is used to store dates. Unlike the DATE_TYPE which can compare dates, this tag is used when in an expression you want to act on the  elapsed time (or age) of an event. i.e. To store the date of the last login for the customer so you can take action if a customer hasn't logged in for two weeks. Alternatively you could store the age of a customer to offer promotions to certain age brackets.</li></ul>The <b>name</b> of the tag is important because it will be used to identify the tag when being set for a customer. The <b>description</b> of the tag is used in the expression builder when building an expression using the tag. i.e. A tag may be named LAST_PRODUCT_VIEWED and have a description, \\"last product viewed\\".<br/><br/>The <b>validation</b> attribute is optional and may contain regular expression to validate values entered in the expression builder. i.e. For a boolean tag it should be set to true|false.<br/><br/>The custom fields can be used to store custom data for the tag. The labels for the custom fields can be changed in the message catalog.help.customPanel1               = Help text for custom panel 1. Substitute this with your own text in the file AdminHelpMessages.properties.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Customer Tags per page</li></ul>

help.customers                  = You may search for a customer by entering the last name in the Search Panel and then clicking the Search button. By default the search is not case sensitive if you are using MySQL or MS-SQLServer and case sensitive if you are using PostgreSQL\, Oracle or DB2. You can configure your database to be non-case sensitive (refer to the User Guide for details on how to modify the case-sensitivity).  Wildcard configuration parameters control the precise searches of substrings (See <b>Configuration >> Admin App Configuration</b>) but with the default settings a wildcard is added before and after all search text which means that all <b>Smiths</b> will be returned if you enter <b>mith</b> as the Last Name. In a similar fashion you can search for a customer based on certain fields of his address (street\, city and postcode). <br /><br />You may also search for all customers belonging to a customer group\, for administrator users and for users that have been enabled or disabled. An administrator can define default values for the customer group and customer type droplists (see <b>Configuration >> Admin App Configuration</b>)\, and also whether these droplists are visible for a certain user using role-based security.  In KonaKart\, an administrator can also log into the application with the same credentials and so can be considered to be a user and a customer.<br /><br />The Address field may be customized through a template\, and even disabled completely. The template can be found under <b>Configuration >> Admin App Configuration</b> and valid template fields are:<ul><li>$cr - Carriage return (new line)</li><li>$firstname</li><li>$lastname</li><li>$company</li><li>$streets = $street + line break + $suburb</li><li>$street</li><li>$suburb</li><li>$city</li><li>$postcode</li><li>$state</li><li>$telephone</li><li>$telephone1</li><li>$email</li><li>$country</li></ul>To disable the address field you must leave the template empty.<br /><br />Any displayed customers may be edited or deleted by clicking the respective buttons at the bottom of the list.<br /><br />Click the <b>Orders</b> button to view any orders that the customer may have submitted.<br /><br />Click the <b>Email</b> button to send an email to the customer.<br /><br />Click the <b>Login</b> button to log in to the KonaKart eCommerce application as the selected customer\, in a new browser window. The base url and the features of the new window can be configured under <b>Configuration >> Admin App Configuration</b>. The user must have edit privileges for the Customers panel in order for this button to be visible.<br /><br />Click the <b>Reset Password</b> button to reset a customer's password - an email will be sent to the customer containing the new password.<br /><br />Click the <b>Subscriptions</b> button to go to a panel showing any recurring billing subscriptions that may be associated with the selected customer. If your store doesn't support recurring billing\, then this button may be removed in the <b>Configuration >> Admin App Configuration</b> section of the Admin App.<br /><br /><b>File based configuration</b> can be used to define the number of customers shown in each group returned from the database and to set case-insensitive searching for case-sensitive databases.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Customers per page</li></ul>

help.customPanel1               = Help text for custom panel 1. Substitute this with your own text in the file AdminHelpMessages.properties.
help.customPanel2               = Help text for custom panel 2. Substitute this with your own text in the file AdminHelpMessages.properties.
help.customPanel3               = Help text for custom panel 3. Substitute this with your own text in the file AdminHelpMessages.properties.
help.customPanel4               = Help text for custom panel 4. Substitute this with your own text in the file AdminHelpMessages.properties.
help.customPanel5               = Help text for custom panel 5. Substitute this with your own text in the file AdminHelpMessages.properties.
help.customPanel6               = Help text for custom panel 6. Substitute this with your own text in the file AdminHelpMessages.properties.
help.customPanel7               = Help text for custom panel 7. Substitute this with your own text in the file AdminHelpMessages.properties.
help.customPanel8               = Help text for custom panel 8. Substitute this with your own text in the file AdminHelpMessages.properties.
help.customPanel9               = Help text for custom panel 9. Substitute this with your own text in the file AdminHelpMessages.properties.
help.customPanel10              = Help text for custom panel 10. Substitute this with your own text in the file AdminHelpMessages.properties.

help.kk_panel_customA           = <b>Insert Product Wizard</b><br /><br />This is an exmaple of the kind of functionality that can be added in Custom Panels of the Administration Application.<br /><br />This example is a user-friendly wizard that allows a user to insert a simple product.<br /><br />The application (including full source code) is available to Enterprise customers so that it can be used as a starting point for developing custom admin functionality.
help.kk_panel_customB           = Help text for custom panel B. Substitute this with your own text in the file AdminHelpMessages.properties.
help.kk_panel_customC           = Help text for custom panel C. Substitute this with your own text in the file AdminHelpMessages.properties.
help.kk_panel_customD           = Help text for custom panel D. Substitute this with your own text in the file AdminHelpMessages.properties.
help.kk_panel_customE           = Help text for custom panel E. Substitute this with your own text in the file AdminHelpMessages.properties.
help.kk_panel_customF           = Help text for custom panel F. Substitute this with your own text in the file AdminHelpMessages.properties.
help.kk_panel_customG           = Help text for custom panel G. Substitute this with your own text in the file AdminHelpMessages.properties.
help.kk_panel_customH           = Help text for custom panel H. Substitute this with your own text in the file AdminHelpMessages.properties.
help.kk_panel_customI           = Help text for custom panel I. Substitute this with your own text in the file AdminHelpMessages.properties.
help.kk_panel_customJ           = Help text for custom panel J. Substitute this with your own text in the file AdminHelpMessages.properties.

help.customPanelsConfig         = <b>Custom Panels</b><br /><br />This section is for configuring your custom panels.<br /><br />You can set the height of the custom panel frame to suit your needs by specifying a number of pixels (e.g. 700px).<br /><br />For each of the ten panels you can specify a different URL.  When the custom panels are called some parameters are appended to define the context.<br /><br />In the Community version the sessionId is added.  In the Enterprise version the id of the currently displayed language, the admin userId and the storeId are all added.

help.dataFeeds                  = <b>Data Feeds</b><br /><br />This section is for configuring your data feeds.   Currently you can only send your product details to Google Shopping\, but other feeds may be added in the future. <br /><br />To enable you to send your products to Google you must first obtain a Google Merchant <b>Account Id</b>, a Google <b>Username</b> and a Google <b>Password</b> and enter the details below.<br /><br />To run the product feed update either choose the option on the Tools menu of the Admin App or check the KonaKart User Guide for instructions on how to run the product feed update from a job scheduler such as cron.<br /><br />If you disable Google Data Feeds here\, no data (inserts\, updates or deletes) will be sent to Google when you modify (insert\, update or delete) products in KonaKart. Conversely\, if you enable Google Data Feeds\, KonaKart will update the published data in Google when product data is changed within KonaKart\, using the credentials you define on this configuration panel.<br /><br />You no longer have to specify a Google <b>API Key</b> or the <b>Store Location</b> but these have been retained for backwards compatibility.<br /><br />${help.returnByApi}

help.deleteSessions             = Every time a user logs on\, a session is created for the user\, and is persisted in the database. Sessions expire when a user logs off or after a certain amount of inactive time. <br /><br />Removing the expired sessions from the database\, improves performance since the session is checked every time the user decides to perform an action\, and a table with fewer sessions gives a faster response time.

help.editCustomerAddress        = <b>Edit Customer</b><br /><br />This is the Customer's <b>Default Address</b>.<br /><br />A drop list of zones is only displayed if the selected country actually has any associated zones. If the country has no associated zones\, then a <b>State</b> entry field is displayed which will accept any text value.<br /><br />The <b>Custom Address</b> fields are generic fields that are associated with the address.   You can use these for whatever you like.

help.editCustomerPersonalCustom = These are the <b>Customer Custom</b> fields that relate to the Customer.<br /> You can use these for whatever you like.

help.editCustomerPersonalEdit   = Enter the personal details for the Customer.<br /><br />You cannot change the password here. Instead use the \"Reset Password\" on the Customers panel.<br /><br />The <b>Customer Type</b> may take one of three values:<ol><li>An Administrator User</li><li>A Standard Application Customer</li><li>A Default Customer. There should only be one of these. It is a fictitious customer used to create a temporary order for displaying order totals before the checkout process. i.e. In the edit cart screen a customer can see estimated shipping costs and promotional discounts without having to log in or register. The address of the default customer should be an address that will generate average shipping costs. i.e. If the majority of your business is national then it shouldn't be an international address.</li></ol><br/>If the <b>Customer Group</b> is changed to a valid new group\, you will be prompted to send a template based eMail to the customer. This is a useful feature for when the customer is going through an approval process. For example\, a customer may have registered through the application as a wholesale customer. During registration he was placed in a \"Waiting for Approval\" customer group and now the administrator may approve or decline the request. As a result of the approval\, the customer may receive an eMail informing him of the decision. The template used is in the form <b>CustGroupChange_groupId_lang.vm</b> e.g. CustGroupChange_2_en.vm\, if the customer has been moved to the group with id equals 2 in a system where the lang is \"en\".<br /><br />The <b>External Reference</b> attributes are placeholders for identifiers that identify the customer in external systems such as a payment gateway that stores credit card details or a national identification number.

help.editCustomerPersonalInsert = Enter the personal details for the Customer.<br /><br />The password field will display dots instead of the characters that you type.<br /><br />The <b>Customer Type</b> may take one of three values:<ol><li>An Administrator User</li><li>A Standard Application Customer</li><li>A Default Customer. There should only be one of these. It is a fictitious customer used to create a temporary order for displaying order totals before the checkout process. i.e. In the edit cart screen a customer can see estimated shipping costs and promotional discounts without having to log in or register. The address of the default customer should be an address that will generate average shipping costs. i.e. If the majority of your business is national then it shouldn't be an international address.</li></ol>The <b>External Reference</b> attributes are placeholders for identifiers that identify the customer in external systems such as a payment gateway that stores credit card details or a national identification number.  

help.editCustomerPoints         = This panel allows you to manage the reward points of a customer. Whenever points are added to or removed from a customer's account\, a transaction record is created which may have an optional <b>code</b> and <b>description</b>. The code is intended to categorize the type of transaction such as  ORDER\, REG or REV if the points are generated due to an order or because a customer has registered or because he has written a review etc. The description is intended to provide a more verbose explanation which the customer can view in the store front application after logging in.<br/><br/>Using this panel\, the administrator may assign and deduct points from a customer's account by clicking either the <b>Add Points</b> or <b>Remove Points</b> button. In both cases\, a new transaction record is created which may have its own code and description. After adding or removing points\, the panel is refreshed and the new total is visible as well as the new transaction record.

help.editCustomerTags           = This folder is used to view\, edit\, insert and remove customer tag values for a customer. The tags are used for marketing purposes\, to show dynamic content\, to determine whether to activate a promotion and to filter the recipients of customer mailings. Expressions can be created using the tags\, that can be evaluated in real time to display dynamic content. i.e. Show a banner or activate a promotion only to customers over 50 years old that have viewed products in a particular category. <br/><br/>Normally\, the value of a tag is set automatically as a customer uses the store front application. For example\, a tag may be set to store the search string as a customer searches for a product\, or to store the current basket total\, or to store the id of a product or category that the customer is viewing. This folder allows you to view the current tag values for a customer and in rare circumstances\, modify them.<br/><br/>All of the defined customer tags are listed in the list box on the left hand side. The tags that have a value for this customer are listed in the panel on the right hand side. In order to add one or more tags\, they must be selected and then added by clicking the <b>>></b> button. A value has to be entered for the tag before saving. If the <b>Validation</b> attribute of the selected tag\, contains regular expression\, then the value is validated against this regular expression. Internally the tag value is always stored as a string\, although each tag has a type and utility methods for getting and setting the value as a date\, integer\, decimal\, boolean and integer array. Therefore do not be alarmed if instead of seeing a date\, you see a long number or see a string that looks like :23:1:78: when the tag is of type MULTI_INT. For the case of a date\, the float-over text will always tell you what the date actually is.

help.editOrder                  = This panel may be used to edit various details of an order.<br /><br />The state of the order may be changed by selecting the new state from a drop list of available states. The new state information and any associated comments are also added to the audit trail of the order. If the <b>Notify Customer</b> check box is clicked\, an email is automatically sent to the customer to inform him that the state of his order has changed. Note that the default value of this checkbox is a property of the order status and may be defined for each order status in the order status maintenance panel.<br /><br />If the panel has been configured to show credit card details\, then these may be edited and saved. Note that they will be automatically encrypted before being saved in the database.<br /><br />If the panel has been configured to display the order number\, tracking number and custom fields\, then these may be edited and saved. Note that the <b>Order Number</b> is a user specific order number that may be set when the order is saved. This differs from the Order Id which is a unique integer automatically assigned by the KonaKart engine when the order is saved.

help.editProductsAttributes     = Attributes may be added to the product by selecting the options from the list box (multiple selections are allowed) and then clicking the arrowed button to create the attribute details on the right hand side of the window. The default number of options displayed, as well as the number of results displayed after a search, may be customized in the <b>Configuration>>AdminApp Configuration</b> section of the Admin App.<br /><br />For each attribute you must enter a numeric value which will be added or subtracted from the price of the product if the customer selects this option. You may enter optional values <b>P1 to P3</b> which will be used if the customer is using product <b>Price1 to Price3</b>. For example if your store supports both retail and wholesale customers which are differentiated by the customer group that they belong to, you will probably be displaying different prices to them. In this case, if a product has options, the option prices can also be differentiated.<br /><br />The attributes <b>C1 and C2</b> are custom values that may be set with custom data.<br /><br />The arrows above and below the <b>Delete</b> button allow you to modify the ordering of the attributes. The order set here is reflected in the storefront application. 

help.editProductsCategories     = A product may reside in one or more categories. The actual details of the product only exist once in the database since the same product instance may be linked to multiple categories.<br /><br />At least one category must be selected.<br /><br />A warning image ( <img src='warning.gif'> ) after the category name means that it is an invisible category and so is not visible within the application category tree. 

help.editProductsDetails_1      = When the product is <b>disabled</b>, it is not returned by the API calls and so does not appear on your storefront.<br /><br />The product may be assigned one or more <b>custom attribute templates</b> which allow you to define an unlimited number of custom attributes for the product. After assigning a template, the custom attributes within the template appear under the Custom Tab in a sub tab called Template Attributes. The templates are only saved after clicking the save button in the edit product panel.<br /><br />The <b>quantity</b> and <b>SKU</b> fields should only be used if this product has a single quantity and a single SKU. If the product has multiple quantities for different configurations, then the quantities and SKU's should be entered in the Quantities tab. In this tab the quantity field should be set to 0 and the SKU field left empty. If the Warn of Duplicate SKUs configuration variable is set to true in the <b>Configuration >> Admin App Configuration</b> section of the Admin App, then a warning appears when the system detects that the SKU entered already exists.<br /><br />The <b>product types</b> visible in the drop list may be modified by adding a comma separated list of integers representing the types to exclude. Look at the on-line help of the <b>Configuration >> Admin App Configuration</b> section of the Admin App for more details on this. If you are running the Enterprise Version of KonaKart you can exclude and order the product types using file based configuration by editing the <b>konakartadmin_gwt.properties</b> file.<br /><br /><b>Price1 to Price3</b> are optional price fields that can be used for saving other prices such as wholesale price or MRP. User groups may be configured to use one of these alternative prices, so that you can differentiate the prices that you users see based on the group that they belong to. If one or more Payment Schedule objects exist in the database, then a drop list will be displayed where you can choose a recurring billing payment schedule for this product.<br /><br /><b>Invisible products</b> are by default not returned by the KonaKart server API and therefore not shown in the shopping application (your store). This default functionality can be overridden by setting <b>showInvisible</b> in the <b>DataDescriptor</b> object used in the API calls. The Invisible products are still available for ordering via the API, so can be useful in certain circumstances. You can configure the Admin App to either show the invisible products in the Admin App (the default) or not show them (see the Configuration section). In the Solr configuration section you can configure whether invisible products are added to the suggested search list and to the suggested spelling list.<br /><br />When a product type of <b>Bundled Product</b> is selected, some extra buttons appear on the UI:<ul><li><b>Select Products</b> opens up a pop-up window to enable the selection of products to include in the bundle. When this pop-up window is closed, the selected products are not saved in the database until the save button on this window is clicked. </li><li><b>Calc Price</b> sets the price fields of the bundle product by adding the prices of the products in the bundle. A discount can be entered into the calculation by typing a number in the Discount field next to the Calc Price button. The discount number will be treated as a percentage if the % character is entered after the number. (e.g 10% rather than 10).

help.editProductsDetails_2      = The calculated prices can be overridden at any time and are not saved in the database until the Save button is clicked.</li><li><b>Calc Weight</b> sets the Weight field of the bundle product by adding the weights of the products in the bundle. The calculated weight can be overridden at any time and is not saved in the database until the Save button is clicked.</li></ul> The <b>Quantity</b> field for a bundle product is read-only. It is calculated by considering the quantities of all components of the bundle and the lowest quantity is returned. If the quantity of a product within the bundle is greater than 1 then this information is also used within the formula.<br /><br />The <b>Stock Reorder Level</b> defaults to -1 which means that the global value defined by the STOCK_REORDER_LEVEL configuration variable is used. If set to a positive number, then this value will override the global value.<br /><br /><b>Can order when not in stock</b> defaults to the global value defined by the STOCK_ALLOW_CHECKOUT configuration variable. The default value can be overridden on a product by product basis, by setting it to yes or no.<br /><br />The <b>Product Id</b> can be made invisible / visible by setting the configuration variable under <b>Configuration >> Admin App Configuration</b>.

help.editProductsDetails        = ${help.editProductsDetails_1}${help.editProductsDetails_2}

help.editProductsBookable       = When a product is of type <b>Bookable Product</b>\,  this folder becomes visible to allow you to specify attributes that are only applicable to a bookable product. <br /><br />A bookable product such as a course\, has a start and end date. These dates can be set to the same day\, but the end date must not precede the start date. Once the dates have been set\, you may define time slots. A time slot defines a start and end time for a day within the start and end dates. The times must follow the 24 hour notation where 2:15 AM is 2:15 and 2:15 PM is 14:15. A day may have more than one time slot. i.e. A course may have a few hours in the morning\, a break for lunch and a few hours in the afternoon. The drop list that allows you to select a day\, will only display valid days that exist between the start and end dates.<br /><br />A bookable product may have bookings associated with it (i.e. students that have signed up for a course). There is an attribute that defines the maximum number of bookings that can be made for this product (-1 for no limit) and one for the current number of bookings that have been made. The current number is updated automatically every time a booking is made through the application or admin application APIs. .<br /><br />Finally there are 5 custom fields that may be used to add information specific to the type of bookable product being defined.

help.editProductsCustom         = Here you can manage the custom attributes for a product. Every product in KonaKart can have two types of custom attributes.<br /><br />The attributes in the <b>Custom Attributes</b> folder are mapped to database table attributes in the product table. This means that they can also be used to search for products and to order the returned array. There are 10 strings\, 2 integers and 2 decimal fields.<br /><br />The attributes in the <b>Template Attributes folder</b> are defined using the Custom Attributes and Custom Attribute Templates panels. These attributes have associated metadata which is used to:<ul><li>Decide what widget to use when entering data using the Admin App.</li><li>Store validation rules used by the Admin App to validate entered data.</li><li>Store a message catalog key for each attribute.</li><li>Store an attribute type and template used by the storefront application to dynamically detect the type of data being displayed and how to display it using the template.</li><li>Custom fields which may be used by the storefront application to display the data. i.e. to group the custom attributes.</li></ul>When saved\, these attributes are encoded into an XML structure and saved within a single database attribute of the product table. This means that they may not be used for searching for products or ordering the array of products returned by a search.

help.editProductsDescription    = A product name and description must be entered for each language. The product URL, the Product Comparison Data and various Custom Fields (if displayed) are not compulsory.<br /><br />The <b>Product Comparison Data</b> is structured data that can be used on the UI to compare this product with a similar product. For example\, it could be XML where each tag represents a feature of the product. <br /><br />The <b>Custom Fields</b> can be used for any purpose and the labels can be changed to reflect what the fields should contain.  The custom field lengths can be modified in the database if required (by default they are set to be very short fields to optimise performance when these are not required).  Their display on this panel can be enabled using File-Based Configuration and their validation defined using Custom Validation.<br /><br /><b>Note:</b> The Insert or Save button will not be enabled until valid data has been entered in all compulsory fields (colored yellow) in <b>all tabs</b>. If you are wondering why the Insert or Save button isn't enabled\, you should cycle through all of the tabs colored yellow and look for entry fields colored yellow.

help.editProductsDownloads      = The <b>File Path</b> and <b>Content Type</b> are used for Digital Download products. The File Path is the path of a file containing the digital product. This path will be appended to the <b>Base Path</b> defined by a configuration variable under <b>Configuration >> Digital Downloads</b>. When using the Upload button to upload the digital download files\, the Base Path must be set to a valid value so that the uploader can determine where to create the files on the server. For example\, the Base Path could be \"C:/images/\" and the file path could be \"cities/london.jpg\". The Content Type describes the content of the file. Examples are \"image/jpeg\" or \"application/pdf\".<br /><br />The <b>Max Download Days</b> attribute defines the maximum number of days the product can be downloaded for. It defaults to -1 which means that the global value defined by the DD_MAX_DOWNLOAD_DAYS configuration variable is used. If set to a positive number\, then this value will override the global value.<br /><br />The <b>Max Number Downloads</b> attribute defines the maximum number of times which the product can be downloaded. It defaults to -1 which means that the global value defined by the DD_MAX_DOWNLOADS configuration variable is used. If set to a positive number\, then this value will override the global value.<br /><br />When <b>Index text of download</b> is checked and when the SOLR search engine is enabled\, the text of the download is indexed in the search engine. It only functions for downloads of type .txt and .pdf.

help.editProductsImages         = This tool allows you to upload images to the server from the local file system and to edit the product image attributes in order to point to an image.<br /><br /><b>Configuration</b><br />Image base URL and Image base path are configuration variables and can be managed in the Configuration>>Images section of this application. The Image base URL is used to view the images on this window and so you will only be able to see the images if this value is set correctly. The Image base Path is the base path on the file system of the server where images will be uploaded. Image Path is the path relative to the base path where images will be uploaded and can be left empty if you prefer the images to be loaded directly to the base path.<br/><br/><b>Image Attributes</b><br/>The product has four image attributes for storing images. The image name may be entered manually into the attribute field if the image already exists on the server. Otherwise the image may be uploaded from the local file system. In order to achieve this\, you must first choose the local file. Once selected\, you click the Upload button in order to upload the file to the server. Once uploaded\, the image should become visible on the panel.<br/><br/><b>Upload with Name Change</b><br/>When uploading an image you may change its name so that on the server it is stored with a different name. To do this you must use the first select / upload buttons on the panel which are not associated with any image fields\, and type the new name into the image name field. The image will be uploaded and the full path of the image will become Image base Path + Image Path + Image Name.

help.editProductsImages2        = This tool allows you to upload product images to the server from the local file system.<br /><br />It has been designed to load images with names specifically-designed to be used with the default storefront application of KonaKart.  The number of images that can be associated with a product is unlimited and can be configured (the default is 8).  You can upload any number of images although at least 1 image is recommended.<br /><br />The filename chosen for the uploaded image files is generated by the system (many aspects of the names can be configured using File-Based Configuration (Enterprise Edition only)).<br /><br />Both the generated image filename directory and the generated product UUID are shown at the bottom of the panel for diagnostic purposes only (they cannot be modified directly but can be used to identify the images created after they have been uploaded).

help.editProductsMerchandising  = Products may be associated with other products so that when selected, the application displays the associated products to attempt to convince the customer to buy an accessory or a more expensive but similar product or an extended warranty etc. KonaKart supports the following types of merchandising:<ul><li><b>Up-selling</b> is a sales technique whereby a salesman attempts to have the consumer purchase more expensive items, upgrades, or other add-ons in an attempt to make a more profitable sale. Up-selling usually involves marketing more profitable services or products, but up-selling can also be simply exposing the customer to other options he or she may not have considered previously.</li><li><b>Cross-selling</b> is the strategy of selling other products to a customer who has already purchased (or signalled their intention to purchase) a product from the vendor. For example, you could show more books from the same author.</li><li><b>Accessories</b> for a product can be displayed in order to persuade the customer to purchase them while purchasing the main product. For example you could show a range of notebook cases when a customer is buying a notebook PC.</li><li><b>Dependent Products</b> are products which need to be sold together with the main product. They normally consist of service plans or extended warranties.</li><li><b>Custom Relationships</b> may be created to associate a product with other products in order to meet specific business requirements.</li></ul><br />In order to associate some products to the main product, you must follow these steps:<ul><li>Select the merchandising type from the drop list</li><li>Search for the products by typing a search string and clicking the <b>Search</b> button</li><li>Add one or more products by selecting them on the left panel and then by clicking the <b>>></b> button to add them to the right panel</li><li>Any unwanted products may be removed from the right panel by selecting them and clicking the <b>Del</b> button</li><li>When you are happy with the selection, you must click the <b>Save</b> button to write the changes to the database. Note that the <b>Save</b> button must be clicked before moving onto another merchandising type.</li></ul>

help.editProductsQuantities     = This screen is used when you need to assign different quantities to a product based on its attributes. For example if you have a shirt that comes in various colors and sizes\, you will probably want to know how many you have in stock for the various color / size combinations.<br /><br />If the product has no attributes\, then this screen has no purpose. If the product does have attributes\, you can set the quantity in stock\, the SKU and available date for each combination by using the <b>quantity</b>\,  <b>SKU</b> and <b>Date Available</b> fields on each row of the table. If any of the rows is set to a number other than zero\, then the product quantity attribute (in the details tab) is ignored. If all rows are set to zero\, then the value in the product quantity attribute is used. Therefore\, in order to guarantee accurate results\, the product quantity attribute should be set to zero when you intend using this feature.<br /><br />When inserting a product this screen will be empty because it can only display data based on product attributes that already exist. You must save the product\, click the <b>Back</b> button and then edit the product in order to insert SKU / quantity / date available data.<br /><br />If the Warn of Duplicate SKUs configuration variable is set to true in the <b>Configuration >> Admin App Configuration</b> section of the Admin App\, then a warning appears when the system detects that the SKU entered already exists.

help.editProductsReviews        = Reviews may be edited and deleted by clicking on the Edit and Delete links for each review.

help.editProductsSpecial        = This panel allows you to set a special price for a product as well as setting tier prices for the product.<br /><br />If a special price is entered\, then this price will become the new special price of the product. The check box is used to enable the special price. When disabled it will not be visible within the store front application. The duration of the special offer may be programmed by setting a start date and an expiry date. In both cases the date may be picked from the calendar widget and the precision may be set by choosing the exact hour and minute from the drop lists. For performance reasons\, the start and end dates are not used on each product select query. Instead they are used by the AdminProductBatchMgr (Enterprise Version Only) to enable / disable the special based on these dates. Note that special price functionality is not supported when using catalog prices.<br /><br />Tier prices may be defined for the product in order to modify the price based on the volume ordered. Each tier price contains the standard four price fields as well as a custom field that may contain any text useful for the store front application. i.e. A message catalog key. The <b>Use Percentage Discount</b> checkbox determines whether the prices entered are actual prices or percentage discounts. i.e. If the price field contains 10.00 and the checkbox is checked\, this means that a 10% discount will be applied to the standard price rather than a price of $10.00.

help.editProductsStores         = This panel can be used to assign products to multiple stores. The price Id (PId) may be different for each store so that the product can pick up a different price based on the store. Also the product may be assigned three custom attributes to contain store dependent data (C1-C3). For example\, a shared product may have different shipping requirements based on the store or may differ in some store related way.<br /><br />In insert mode\, the panel will be empty and during the insert\, the product will be automatically assigned to the current store.<br /><br />In edit mode\, the list box on the left will display a list of all available stores. In order to associate a product to a store\, one or more stores must be selected in the list box before clicking the <b>\>\></b> button which will create the association. Note that the default price Id is set to -1 which means that the standard product price will be used (which may be determined by the customer group). If the price Id is set to 0-3\, then price 0 to price 3 are used\, regardless of the customer group.<br /><br />Note that if a product is removed from the current store\, then it will no longer be visible after clicking the save button. Note also that after assigning a product to a store\, you must log into that store using this application and assign the product to one or more categories before it will be visible in the store front application.<br /><br />This panel is only available to Super Users. 

help.editProductsTags           = This panel allows you to associate tags to products. Tags may be used in the eCommerce application to filter product searches. All tags belong to one or more tag groups and tag groups may be associated to categories so that the application can determine which tag groups to display based on the current product category being displayed. For example\, for a tag group named Megapixels within a category named Digital Cameras\, the tags could be 4 Mpixel\, 6 MPixel\, 8 Mpixel etc. <br /><br />The tag groups displayed in the left panel are the tag groups associated to the category or categories of this product. The product must have been saved in order for the left panel to be populated. When a tag group is clicked on\, the tags within the group become visible and may be associated to the product by clicking the <b>>></b> button. To remove tags\, you must click on them on the right panel and then click the <b>Del</b> button. Multiple selection is allowed for removes.

help.editStore                  = This panel allows you to edit an existing store.<br /><br />Once the storeId is set for a store it cannot be changed but the name and description can be changed at any time.<br /><br />The store status settings are defined as follows:<br /><br /><b>Enabled</b> = active stores that are available for use.  If disabled a store is not accessible to application or admin app users. <br /><br /><b>Under Maintenance</b> = stores that are currently being maintained so are inaccessible to application users, but can be accessed by admin app users.<br /><br /><b>Deleted</b> = stores that are deleted are no longer available for use by application or admin app users.  These stores are not physically deleted from the database but only marked as "deleted".  Therefore it is possible to "Un-delete" a store if required. 

help.enterpriseOnly             = <b>Enterprise Only</b><br /><br />This panel is only available in the Enterprise verison of KonaKart.<br /><br />Please contact <a href="mailto:sales@konakart.com?Subject=KonaKart%20 Enterprise%20Edition">sales@konakart.com</a> for information about the Enterprise version. 

help.expressions                = Expressions are used to make decisions based on customer behaviour and attributes. For example\, we may want to show specific content from visitors from a Google search or apply a promotion to a customer on his birthday\, or a promotion for customers that have placed an order in the last month and have viewed the details of a particular product. The combinations are endless !<br/><br/>Expressions are created using customer tags. A customer tag can be associated with a customer and given a value for that customer. An expression can evaluate one or more mathematically connected customer tag values. This is best explained using an example:<br/>Let's say that we want to show a banner to all male customers  over the age of 40 who have viewed the details of a shirt with a product id of 1056. First of all we need to create three customer tags:<ul><li>IS_CUSTOMER_MALE (BOOLEAN_TYPE)</li><li>CUSTOMER_AGE (INT_TYPE)</li><li>RECENTLY_VIEWED_PRODUCT (MULTI_INT_TYPE)</li></ul>For step two\, we need to ensure that these tags are populated by the store front application when a customer registers and as he navigates around the application viewing products. The third step is to create an expression that looks like:<br/>IS_CUSTOMER_MALE=TRUE AND CUSTOMER_AGE>40 AND  RECENTLY_VIEWED_PRODUCT=1056<br/>Finally\, within the application\, the expression has to be evaluated on the page where the banner needs to be shown in order to decide whether or not to display the banner.<br/><br/>The only compulsory attribute of an expression is the expression name which can later be used to search for it. Once an expression has been created in this panel\, you can click the <b>Variables</b> button in order to open a new panel where the expression logic can be created as described in the example above.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Expressions per page</li></ul>

help.expressionVariables        = If no variables exist\, you must click the <b>New</b> button which will then display one empty expression variable. From the drop lists you can select the customer tag and operator to use. The value entered\, must match the customer tag type. i.e. If the customer tag is BOOLEAN_TYPE\, you will only be allowed to enter true or false selected from a drop list. If it is DATE_TYPE\, a pop-up calendar will appear to aid you in choosing a date. If your expression consists of only one customer tag\, you may click the <b>Save</b> button and you've finished. If you need to AND or OR the values from two tags\, then you must click the <b>New</b> button next to the current tag which will create a new expression variable. For a more complicated expression you may want to create (A OR B) AND (B AND C) OR (D AND E OR F) where interim results are grouped together before being evaluated. In order to create a group\, you must click the <b>Grp</b> button. This will create and display an AND/OR drop list below the selected variable rather than to the left of it.<br/><br/>The <b>Cancel</b> button will revert all variable data to the values entered during the previous save.

help.digitalDownloads           = <b>Digital Downloads</b><br /><br />This panel allows you to define a number of configuration variables for your Digital Download products including the base path that defines where you store the files.<br /><br />${help.returnByApi}<br /><br />Check the floatover text on each field for more information on what the different variables are for<br /><br />KonaKart is configured using the configuration variables present within this section of the Administration Application. The variables are stored within the <b>configuration</b> database table and may be edited from this window.<br /><br />Changes may take a few seconds to become active because the application cache needs to be reloaded\, and this happens on a scheduled basis at the frequency defined by the <b>Client config cache refresh check interval</b> configuration variable that can be edited by clicking the <b>Cache</b> sub-section of the <b>Configuration</b> menu.<br /><br />Most variables have float over text with a short description of their functionality.

help.insertStore                = This panel allows you to insert a new store.<br /><br />You specify the storeId here but you cannot change this after your save the store the first time.  The storeId you choose must be unique - the system will not let you insert a new store with a storeId that's already being used.<br /><br />The name and description can be changed at any time.<br /><br />The store status settings are defined as follows:<br /><br /><b>Enabled</b> = active stores that are available for use.  If disabled a store is not accessible to application or admin app users. <br /><br /><b>Under Maintenance</b> = stores that are currently being maintained so are inaccessible to application users, but can be accessed by admin app users.<br /><br /><b>Deleted</b> = stores that are deleted are no longer available for use by application or admin app users.  These stores are not physically deleted from the database but only marked as "deleted".  Therefore it is possible to "Un-delete" a store if required.  

help.importer                   = <b>KonaKart Importer</b><br /><br />This panel allows you to import data from files into KonaKart using custom import routines.  Please refer to the User Guide for more details.<br /><br />For the <b>Import</b> and <b>Delete</b> commands you first need to select one or more files or directories to operate on before clicking on the respective buttons.<br /><br />By default\, the <b>Import</b> button is configured to load products into KonaKart from the selected file.  An example datafile (productsExample.xml) is provided which is an example of the format of the file that is required for this simplified import routine. <br /><br />You can upload new data files for subsequent import by clicking on the <b>Upload</b> button.<br /><br />The <b>Refresh</b> button updates the set of files in the directory specified to hold the data files.   You can configure the location of the data files directory on the panel at <b>Configuration >> Importer Configuration</b>.  Likewise you can configure where the importer log files will be written on the same configuration panel.

help.ipnHistory                 = This window allows you to view and search for notifications sent to KonaKart by payment gateways. Many payment gateways can be configured to send transaction information to KonaKart regarding the status of the payment, and this information is stored in a database for auditing purposes.<br /><br />The <b>KonaKart Result</b> will be positive if the transaction completes successfully regardless of the payment gateway response. The <b>Gateway Result</b> is the actual result from the gateway and will vary depending on the payment gateway you are using. The <b>Gateway Full Response</b> contains the full set of data returned by the gateway. The <b>Transaction Type</b> defines the type of transaction and the <b>Transaction Amount</b> the value of the transaction. The <b>Capture Id</b> may be populated in the case where the transaction was an Auth and needs to be followed by a Capture. In this case the Capture Id is the string that needs to be passed to the Capture transaction in order to identify the transaction. In a similar fashion the <b>Credit Id</b> is the Id that is normally returned by a Capture and can be used in the future for any credit / refund transactions. The <b>Admin Payment Class</b> is the full class name of the class that contains the code for carrying out future transactions such as Capture or Credit transactions.<br /><br />An order may be associated with many payment notifications for various reasons. For example, a customer may make more than one attempt at entering his credit card details or an order may be split up into multiple payments or there may be an auth, followed by a capture followed by a credit transaction.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Callback Records per page</li></ul>

help.jobs                       = <b>KonaKart Job Scheduler</b><br /><br />This panel allows you to monitor and execute batch jobs defined for your system.<br /><br />To execute a job\, select the required job in the table then click on the <b>Run</b> button.  If successful\, this will refresh the list of jobs in the table and show the job that you selected in a new row as an "Executing" job.<br /><br />You can view the log file for a job by selecting the row of the job that is <b>Executing</b> and clicking the <b>View</b> button.<br /><br />If you do not see any jobs listed it may be because Quartz is not enabled in your web.xml file for the konakartadmin webapp.

help.languages                  = These are the languages that are defined for your online store. A language has a name\, a code\, a locale\, an image name\, a directory and a sort order.<br /><br />A language is selected by clicking on it\, and then it may be edited or deleted. Note that the default language may not be deleted.<br /><br />A new language may be created by clicking the <b>New</b> button\, defining the new language in the edit fields at the bottom\, then clicking on the <b>Save</b> button to insert the new entry into the database.<br /><br />If you want to define a language that you want to use for the Admin App but not for defining language variants in entities such as products and categories\, you can set the language to "Display Only" by checking the checkbox then saving.

help.license                    = <b>KonaKart Licensing</b><br /><br />You need a valid license to run the Enterprise version of KonaKart.<br /><br />To obtain a license key\, contact <a href="mailto:sales@konakart.com?Subject=KonaKart%20 License%20Key%20Request">sales@konakart.com</a>.<br /><br />Enter the <b>License Owner</b> and <b>License Key</b> values that you obtained from KonaKart then click on <b>Save</b>.

help.logging                    = <b>Logging</b><br /><br />Logging is typically only used for diagnostic purposes and recommended to be set off <b>OFF</b> for normal use. <br /><br />To see diagnostic logging from the KonaKart Admin App you need to set the <b>Admin App logging level</b> to a level higher than <b>OFF</b> (for example set it to \"INFO\") and ensure that the <b>log4j.logger.com.konakart.clientlogging</b> value in <b>konakartadmin/WEB-INF/classes/konakart-logging.properties</b> is set to the same level (or higher) (for example set it to \"INFO\" or \"DEBUG\").  <br /><br />You can edit that <b>konakart-logging.properties</b> file from the <b>Edit Config Files</b> configuration menu option.<br /><br />The KonaKart log file directory is the location where certain KonaKart diagnostic log files are written eg. payment gateway response log files\, velocity results files etc.  This is also for diagnostics only and no log files are written unless other debug flags are set elsewhere. <br /><br />${help.returnByApi}<br /><br /><b>Analytics</b><br /><br />Enabling Analytics causes some code (that is defined in the Messages.properties file\, as key <b>analytics.code</b>) to be inserted into your store's web pages.  The intended use for this feature is to insert analytics code (for example Google Analytics Code) into your store so that you can obtain useful statistics on the use of your site.

help.manufacturers              = A number of manufacturers within the database are shown in the list box in alphabetical order. The default number of manufacturers displayed\, as well as the number of results displayed after a search\, may be customized in the <b>Configuration>>AdminApp Configuration</b> section of the Admin App.<br /><br />Each manufacturer may be edited or deleted. If you choose to delete a manufacturer that has products linked to it in the database\, you will be presented with the option of allowing the system to delete the products also.<br /><br />An <b>image</b> for the manufacturer may be uploaded by selecting a file from the file system and then clicking the upload button. By default the file will be uploaded to the manufacturer directory (default is "manufacturer" but can be overridden in File Based Configuration) which is appended to the Image Base Path (defined by a configuration variable that can be managed in the Configuration>>Images section of this application). Before clicking the upload button\, the file name (for the file that will be created) may be changed and extra path information may be added.<br /><br />A new manufacturer may be created by clicking the <b>New</b> button.<br /><br />The <b>Products</b> button opens a window displaying a list of products for the chosen manufacturer.<br /><br />The <b>Manufacturer Id</b> can be made invisible / visible by setting the configuration variable under <b>Configuration >> Admin App Configuration</b>.

help.messages                   = <b>Messages</b><br /><br />For maintaining the messages used in the Storefront Application and the Admin Application when you are using database-based messages.<br /><br />By default there are three message types: 1 = Application\, 2 = Admin Application and 3 = Admin Application Help Messages. Additional message types can be added so that they appear in the message type droplists by modifying the <b>MESSAGE_TYPES</b> configuration variable (see Configuration >> Admin App Configuration to modify this value).<br /><br />You can either specify that your system should use file-based messages (the default) or database-based messages.   You define your choice by setting the "Use Database For Messages" option to true on the Configuration >> Admin App Configuration panel.<br /><br />Click on the <b>Switch Editor</b> icon (to the right of the <b>Locale</b> field) to switch between the Rich Text Editor and the Plain Text Editor when editing your messages. This can be useful if you need to change the HTML values that the Rich Text Editor inserts but doesn't show on the screen.  When you save a message the system will save the text from the currently-selected editor.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Messages per page</li></ul>

help.miscItems                  = These are the <b>Miscellaneous Items</b> that are defined for your online store. <b>Miscellaneous Items</b> can be added to products and / or categories for a variety of different uses within the system.<br /><br />A <b>Miscellaneous Item</b> has a value\, a miscellaneous item type, an object type (eg product or category) and the id of the object it is associated to.<br /><br />You can <b>search</b> for miscellaneous items by using the search panel at the top of the display.  Enter all or part of the miscellaneous item name and all the records that contain this text will be returned.  (For every match that is found\, all the language variants of that matching miscellaneous item are also returned\, even if they do not also match the search text).<br /><br />The <b>Save</b> button is enabled when all the fields are populated correctly (and the record is validated successfully).<br /><br />Clicking the <b>Cancel</b> button will discard any changes you have made since the last save and the original values will be restored to the screen.<br /><br />Click on the <b>New</b> button to create a new miscellaneous item. Note that the button will not be enabled until you have inserted at least one miscellaneous item type.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Miscellaneous Items per page</li></ul>

help.miscItemTypes               = These are the <b>Miscellaneous Item Types</b> that are defined for your online store. <b>Miscellaneous Item Types</b> can be added to categorise your Miscellaneous Items that can be associated with products and / or categories for a variety of different uses within the system.<br /><br />A <b>Miscellaneous Item Type</b> has a name\, a description and a language.<br /><br />You can <b>search</b> for miscellaneous item types by using the search panel at the top of the display.  Enter all or part of the miscellaneous item name and all the records that contain this text will be returned.  (For every match that is found\, all the language variants of that matching miscellaneous item types are also returned\, even if they do not also match the search text).<br /><br />The <b>Save</b> button is enabled when all the fields are populated correctly (and the record is validated successfully).<br /><br />Clicking the <b>Cancel</b> button will discard any changes you have made since the last save and the original values will be restored to the screen.<br /><br />Click on the <b>New</b> button to create a new miscellaneous item type.<br /><br />Click on the <b>Delete</b> button to delete the currently selected miscellaneous item type plus all the miscellaneous items that exist of this type.

help.modules                    = This tool allows you to install and uninstall payment modules\, shipping modules\, order total modules and other modules.<br /><br />The installation process consists of writing configuration data into the database configuration table. Once the installation process for a module is complete\, the tool also allows you to edit the data so that the default values can be changed. During run-time\, the KonaKart application reads the configuration data to determine which modules to activate and how to configure them.<br /><br />The removal process\, removes all of the configuration data from the database.<br /><br />When a module is installed and enabled\, it will be visible and selectable during the checkout process. Most modules can be disabled without having to uninstall them.<br /><br />${help.returnByApi}<br /><br />Changes may take a few seconds to become active because the application cache needs to be reloaded\, and this happens on a scheduled basis at the frequency defined by the <b>CLIENT_CONFIG_CACHE_CHECK_SECS</b> configuration variable.

help.multistoreConfig           = <b>Multi-Store Configuration</b><br /><br />These are the configuration variables that are used in a multi-store installation.<br /><br />You can define the multi-store template storeId to the store whose reports you wish to copy for new stores (in the future\, more configuration data may be copied from the template store).<br /><br />You can define the roles that will be assigned to new users that are created when you create new stores.  The number of new users that are created when creating new stores is dependent on whether you are using Shared or Non-Shared Customers.  In Shared Customers mode\, only a "Store Administrator" user is created\, but in Non-Shared Customers mode a "Super User" user is also created.  You can change the roles that are assigned for the users and change the roles themselves to configure the permissions granted to new users exactly as you please.<br /><br />When new stores are created some SQL commands are run to set up the database in various ways.  First the "KonaKart new store creation SQL" script is run\, then KonaKart loads some set-up data that isn't in any SQL script\, then finally this is followed by the execution of the "User new store creation SQL" script.  If you need to change the data that is loaded\, you should add your SQL commands to the "User new store creation SQL" script and not modify the "KonaKart" script.<br /><br />For more specialized requirements there is a "hook" function that is called whenever a store is created or modified.   You have to implement this class in java (default name is <b>com.konakartadmin.bl.AdminStoreIntegrationMgr</b>) and it will be executed by KonaKart at the appropriate times (See the User Guide for details of this customization opportunity).

help.orderStatus                = These are the order statuses that are defined for your online store. <br /><br />You can define as many order status names as you please. Order statuses describe the status of orders in the system.<br /><br />An order status has a name and an id.  You should define the name in each language that you want to provide in the store. During an insert you may define the value of the numeric order status id or let the system assign the next available id by leaving the input field empty. There is also a check box to define the default behavior when the status of the order is changed in the admin app using the edit order panel. This panel contains a check box for notifying the customer (by eMail) of a status change, and the value of this check box is set automatically by the value of the order status attribute. This functionality is useful for helping administrators adhere to a process that defines at which states changes eMails should be sent to customers. Note that within the edit order panel, the default may be overidden.<br /><br />An order status is selected by clicking on it, and then it may be edited or deleted.<br /><br />A new order status may be created by clicking the <b>New</b> button, defining the new order status in the edit fields at the bottom, then clicking on the <b>Save</b> button to insert the new entry into the database.

help.orders                     = This panel can be configured to display the Order Id or the Order Number in the left most column. The Order Id is generated by KonaKart automatically and is a unique ascending integer. The Order Number may be generated by custom business logic just before an order is saved and so may adhere to company standards etc. The Order Number may contain both letters and numbers. The panel can be configured in the <b>Configuration >> Admin App Configuration</b> section of the Admin App.<br /><br />You may search for orders using a combination of various filters:<br /><ul><li>Orders from a customer using the customer's id</li><li>Orders based on their Order Id or Order Number</li><li>Orders in a certain state</li><li>Orders from a customer using the customer's name</li><li>Orders from a customer using the customer's email address</li><li>Orders from a customer using the customer's postcode</li></ul>Once the search criteria have been set\\, you must click the search button.<br /><br />Any displayed orders may be edited or deleted by clicking the respective buttons at the bottom of the list.<br /><br />Click the <b>Invoice</b> button to view and print the invoice.<br /><br />Click the <b>Packing Slip</b> button to view and print the packing slip.<br /><br />Click the <b>Payment Info</b> button to view any payment gateway information that may be associated with the order.<br /><br />Click the <b>Returns</b> button to view / edit / insert any information regarding products that have been returned.<br /><br />Click the <b>Refunds</b> button to view / edit / insert any information regarding refunds and to perform real time refunds through the payment gateway. This button may be hidden by setting the fbc.kk_panel_orders.hide_refunds parameter in konakartadmin_gwt.properties.<br /><br />Click the <b>Export Order</b> button to export the order as an XML file (Enterprise Extensions Only). The root directory for file creation is set by the configuration variable in the <b>Configuration >> Shipping / Packing</b> section of the Admin App.<br /><br />Click the <b>Export Order For Shipping</b> button to export the order for shipping. This option uses code in the Shipping Modules to export the order in a format appropriate for a 3rd Party Shipping Application - such as for UPS WorldShip. The root directory for file creation is set by the configuration variable in the <b>Configuration >> Shipping / Packing</b> section of the Admin App.<br /><br />Click the <b>Customer</b> button to go to a panel showing information about the customer that submitted the order. From this panel you can send an eMail to the customer\\, log in to the application as the customer etc.<br /><br />Click the <b>Subscriptions</b> button to go to a panel showing any recurring billing subscriptions that may be associated with the selected order. If your store doesn't support recurring billing\\, then this button may be removed in the <b>Configuration >> Admin App Configuration</b> section of the Admin App.<br /><br /><b>File based configuration</b> can be used to define the number of orders shown in each group returned from the database.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Orders per page</li></ul>

help.paymentSchedules           = This panel allows you to set up payment schedules for recurring billing.  A payment schedule defines how payments for a product may be organized over time by setting the time interval and the total number of payments. If the <b>Number of Payments</b> field is set to -1 this implies that the payments will go on indefinitely until the subscription is disabled. The <b>Day of Month</b> field allows you to specify a particular day of the month in monthly billing scenarios.<br/><br/>A product may be associated with a Payment Schedule in order to trigger the creation of a recurring billing subscription when an order is confirmed by a customer.

help.pdfConfig                  = <b>PDF Configuration</b><br /><br />These are the configuration parameters for PDF document creation in your store. <br /><br />These are only used in the Enterprise Extensions Edition of KonaKart.<br /><br />You can define the <b>PDF Directory</b> path where PDF files will be created.  <br /><br />In the case of the Invoices\, when KonaKart creates these it stores only the part of the file name after the base path so that the full file name can be generated by concatenating the base path configuration value with the storeId (or \"store1\" in single-store mode)\ and the invoice file name attribute on the order object.  This allows you to move the generated documents to a new home just so long as you re-configure the base path configuration value.<br /><br />${help.returnByApi}

help.prodAttrs                  = Custom attributes are attributes which you may define and then add to a template which in turn may be added to a product. This panel allows you to create new and manage existing attributes. Each custom attribute definition has the following attributes:<ul><li><b>Name:</b> The name of the custom attribute which is a compulsory field. i.e. ScreenSize or MegaPixels etc.</li><li><b>Type:</b> You may choose types from a drop list. This information may be used by the storefront application when displaying the attribute value. i.e. If it knows the type of attribute it may decide what template to use in order to display it.</li><li><b>Facet:</b> If the custom attribute is used for faceted search, it must be mapped to one of the SOLR facet fields.</li><li><b>Set Function:</b> This is used by the admin app when creating a UI widget for the custom attribute. Valid Set Functions are:<ul><li>integer(min,max) where min and max may be numbers or set to null. i.e. integer(10,null) checks that the integer has a minimum value of 10 or above. Integer(null,null) just checks that the value entered is an integer without doing any range checking.</li><li>double(min,max) using the same logic as explained above for decimal numbers.</li><li>string(min,max) using the same logic as explained above for the length of the string.</li><li>choice('true','false')creates a radio button panel with the options of true and false. choice('msg.small','msg.medium','msg.large') creates 3 radio buttons where the labels are looked up in a message catalog. In this case, the text displayed is looked up from the message catalog, whereas the values saved are always msg.small, msg.medium and msg.large regardless of the language.</li><li>option(0=date.day.long.Sunday,1=date.day.long.Monday,2=date.day.long.Tuesday) creates a drop list for the first 3 days of the week. The text of the days displayed is retrieved from the message catalog whereas the saved data is 0 for Sunday, 1 for Monday etc. </li><li>RichText(x) where x defines the vertical size (in elements) of the Rich Text data entry widget. (e.g. RichText(10) for a size of 10em)</li></ul></li><li><b>Template:</b> The template contains a string that may be used by the storefront application to display the value. i.e. In the case of a date, the storefront application could detect that it is a date from the <b>type</b> and then use the template to display the date correctly. </li><li><b>Msg Cat Key:</b> This is used by the storefront and admin applications to look up the label from the message catalog. If not present, the <b>name</b> may be used.</li><li><b>Validation:</b> This may contain regular expression such as true|false or [0-9]* which will be used by the admin app to validate the attribute.</li><li><b>Custom Fields:</b> The custom fields may contain any metadata for the attribute which can be used by the storefront application. i.e. A custom field may contain data useful for grouping custom attributes.</li></ul>When custom attributes are converted to an XML string and saved within the product object, some metadata fields of the custom attribute are saved along with the value of the attribute itself. These metadata fields (i.e. Message catalog key, the template for displaying the attribute and the custom fields) are stored in the XML for performance reasons. When a Product Attribute Descriptor is modified or deleted, all of the products using the descriptor are not updated automatically. A dialog box appears where you can choose whether to update the products. If the \u201CYes\u201D button is clicked, then the code loops through all products using the Product Attribute Descriptor and updates the XML. If there are many products, this process may take a while.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Custom Attributes per page</li></ul>

help.prodAttrTemplates          = <b>Custom Attribute Templates</b><br /><br />Custom attributes are attributes which you may define and then add to a template which in turn may be added to a product. This panel allows you to create new and manage existing custom attribute templates. 

help.productOptions             = A list of product options is shown on the left side of the window. The available values for each option can be viewed by clicking the <b>+</b> symbol next to the option name. Each option or option value may be edited or deleted, by selecting it and clicking the appropriate button. The default number of options displayed, as well as the number of results displayed after a search, may be customized in the <b>Configuration>>AdminApp Configuration</b> section of the Admin App.<br /><br />An option may be of four different types.<ul><li>The <b>Standard</b> type is where each option value defines a product attribute which may or may not modify the price of the product (i.e. \u201CSmall\u201D, \u201CMedium\u201D and \u201CLarge\u201D for an option called \u201CSize\u201D).</li><li>The <b>Variable Quantity</b> type (Enterprise Only) is an option whose value may take a customer defined quantity. For example if the option is \u201CAdditional Memory\u201D you may define one option value of \u201CGB\u201D and in the storefront UI a data entry text box is displayed to the user (rather than a list of fixed option values) where the user may enter the number of Gigabytes of additional memory he requires. In this case the price defined when adding the option to a product, becomes the unit price and will be multiplied by the quantity entered by the customer in order to determine the final price of the option.</li><li>The <b>Customer Price</b> type (Enterprise Only) allows the customer to enter a price for the option. This could be used for making donations where the customer can enter the donation amount.</li><li>The <b>Customer Text</b> type (Enterprise Only) option allows a customer to enter text which could be used to personalize the product. For example the text could contain a name or initials to engrave the product with.</li></ul>To create a new option, you must select the <b>root</b> node and then click the <b>New</b> button. To create a new option value, you must select the option, and then click the <b>New</b> button.

help.productAvailableDate       = This panel is intended for a power user to quickly update the available date of a product based on its SKU.<br/><br/> The intended way of using the panel is to enter the SKU and then to tab into the Date field. At this point the SKU will be looked up and if it is valid\, the product name will appear below the SKU field and the current available date will appear below the Date field. If the SKU is invalid\, then the color of the SKU field will remain yellow. Once a valid date has been entered\, the Save button will activate and so you can tab to it and press the enter key to save the data. At this point\, the focus will be returned to the SKU field and a line will be written to the log area to confirm that the transaction was successful.<br/><br/>The check box below the save button\, allows you to decide whether you want the date field to be cleared after the save button is clicked. If you have multiple SKUs with the same date\, it is convenient not to clear the field. The date template below the check box\, allows you to change the date template for entering the date. For example you may want to enter just two numbers for the year rather than four.<br/><br/>The log area may be cleared by clicking the clear button below the log.

help.productQuantity            = This panel is intended for a power user to quickly update the quantity of a product based on its SKU.<br/><br/> The intended way of using the panel is to enter the SKU and then to tab into the Quantity field. At this point the SKU will be looked up and if it is valid\, the product name will appear below the SKU field and the current quantity will appear below the Quantity field. If the SKU is invalid\, then the color of the SKU field will remain yellow. Once a valid quantity has been entered\, the Save button will activate and so you can tab to it and press the enter key to save the data. At this point\, the focus will be returned to the SKU field and a line will be written to the log area to confirm that the transaction was successful.<br/><br/>The check box below the save button\, allows you to decide whether you want the new quantity to be added to the existing quantity or whether you want it to replace the existing quantity.<br/><br/>The log area may be cleared by clicking the clear button below the log.

help.products                   = You may search for products using a combination of various filters:<br /><ul><li>Products containing some text</li><li>Products by SKU</li><li>Products within a category</li><li>Products of a manufacturer</li><li>Products of a certain type</li><li>Products coming soon</li><li>Products on special offer</li></ul>Wildcard configuration parameters control the precise searches of substrings (See <b>Configuration >> Admin App Configuration</b>) but with the default settings a wildcard is added before and after all search text which means that all <b>Apples</b> will be returned if you enter <b>ple</b> as the search string.<br /><br />To search by SKU, you must check the SKU check box and enter the SKU in the text field above the search button. If the SKU check box isn't checked, the search is done on the product name (and description if the Search Desc. box is checked). By default the search is not case sensitive if you are using MySQL or MS-SQLServer and case sensitive if you are using PostgreSQL\, Oracle or DB2. You can configure your database to be non-case sensitive (refer to the User Guide for details on how to modify the case-sensitivity).  Once the search criteria have been set, you must click the search button.<br /><br />Any displayed product may be edited or deleted by clicking the respective buttons at the bottom of the list. Click the <b>New</b> button to create a product.<br /><br />If you've defined one or more product catalogs, a <b>Remove From Cat</b> button will be visible. The functionality associated with this button is to remove all catalog prices and quantities defined for the selected product and selected catalog.<br /><br />The product id and sku (if set) can be viewed by moving the mouse over the product name in the array of products.<br /><br />Using <b>File based configuration</b> you can configure the panel to display the product SKU instead of the product name. In this case the mouse float-over displays the product id and the product name.  File based configuration can also be used to define the number of products shown in each group returned from the database and to set case-insensitive searching for case-sensitive databases.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Products per page</li></ul>

help.promotionRules             = The number of products and customers that a promotion applies to\, may be narrowed down by applying rules. The rules available allow you to exclude or include a number of Manufacturers\, Categories\, Products\, Customers and Customers belonging to specific Customer Groups\, from a promotion\, by clicking on the links.<br /><br />The popup window that opens\, allows you to make a selection. When you close the popup window\, this window gives you a summary of the actions that the rules will take. e.g. How many products will be included or how many customers will be excluded etc.<br /><br />Expressions may also be evaluated in order to decide whether a promotion is active for a customer. Elsewhere in the Admin App\, expressions may be created by logically connecting using AND / OR operators\, a number of expression variables based on Customer Tags. For example\, you could create an expression that looks like:<br/>IS_CUSTOMER_MALE=TRUE AND CUSTOMER_AGE>40 AND  RECENTLY_VIEWED_PRODUCT=1056<br/>and associate this expression to the promotion so that the promotion will only be active when the expression evaluates to TRUE. In most cases it is only necessary to associate one expression to the promotion although if more than one expression is associated\, then the results are OR'ed together which means that only one of the expressions needs to evaluate to TRUE in order for the promotion to be active.

help.promotions                 = A promotion is an offer that a merchant may apply to any number of his products. Promotions may be created\, edited and deleted. Once a promotion has been created\, clicking the <b>Rules</b> button allows you to refine it by:<ul><li>Allowing only certain customers to use the promotion</li><li>Allowing all customers to use the promotion except for some</li><li>Including only certain products with particular options in the promotion</li><li>Including all products in the promotion except for some</li><li>Including only products from certain categories in the promotion</li><li>Including products from all categories in the promotion except for some</li><li>Including only products from certain manufacturers in the promotion</li><li>Including products from all manufacturers in the promotion except for some</li></ul><br /><b>New</b><br />When the new button is clicked\, some edit fields become visible. These edit fields apply to all promotions. The ones in yellow are mandatory and must be set with valid data. The promotion must be given a name and the type of promotion must be selected from the drop list. Once a type has been selected\, more edit fields appear which are specific to the selected promotion. They must all be set and then the promotion can be saved.<br /><br />The promotion types available in the drop list are defined in the <b>Modules >> Order Total</b> section of the Admin App. New types may be added by adding new modules to KonaKart. Note that the promotion will not become active until the relevent OrderTotal module has been installed.<br /><br /><b>Coupons</b><br />A promotion may be associated with one or more coupons. This means that during the checkout process\, the customer must enter a valid coupon code in order to activate the promotion. The window that opens by clicking this button\, allows you to manage <b>only</b> the coupons associated with this promotion.<br /><br /><b>Rules</b><br />This button opens a window that allows you to add rules to the promotion in order to narrow down the number of products and customers that it applies to.<br /><br /><b>Gift Certificates</b><br />This button opens a window that allows you to associate Gift Certificate products to the promotion.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Promotions per page</li></ul>

help.protocol                   = <b>HTTP / HTTPS</b><br /><br />KonaKart is configured using the configuration variables present within this section of the Administration Application. The variables are stored within the <b>configuration</b> database table and may be edited from this window.<br /><br />Changes may take a few seconds to become active because the application cache needs to be reloaded\, and this happens on a scheduled basis at the frequency defined by the <b>Client config cache refresh check interval</b> configuration variable that can be edited by clicking the <b>Cache</b> sub-section of the <b>Configuration</b> menu.<br /><br />Most variables have float over text with a short description of their functionality.<br /><br />On this panel you can enable or disable the use of SSL and define related parameters.<br /><br />There are two ways to define the use of SSL on this panel.  One is to define the <b>port numbers</b> for HTTP mode and HTTPS mode respectively.  From these port values the secure redirect URL is derived.   The other choice is to define the <b>Base URL</b> for your SSL pages which overrides the standard derivation of the redirect URL and does not use the SSL port number definition.  For the <b>Base URL</b> you should use a string that defines what your requests should be from the outside before the request URI is appended to the end. If you use the standard SSL port you can remove that from the base URL definition.<br /><br />${help.returnByApi}

help.publishProducts            = Click the <b>Publish</b> button to start a background process that will publish details of all your visible and active products to Google.<br /><br />This process uses the values configured on the <b>Data Feeds</b> Configuration panel.<br /><br />Check your publish products log in your logs directory and the container log for details of the success or failure of the publishing process.

help.refreshConfig              = The configuration variables used to configure KonaKart\, are stored in the database and can be edited in the Configuration section of this admin tool. <br /><br />For performance reasons\, these properties are cached. This means that changes made to the properties in the database are not seen by KonaKart until the cache is refreshed. This functionality allows you to make many modifications to the configuration variables in the database\, and to activate them all at once by refreshing the cache.

help.refunds                    = This panel allows you manage refunds. You can insert, edit and delete refund information and also perform real time refunds through a payment gateway.<br><br>When the <b>New</b> button is clicked, the fields for the new refund object are automatically populated with the Order Id, the Order Number, the total amount of the order and the Transaction Identifier which is retrieved from the payment information that was saved during the original transaction. Before saving, this information may be modified. For example, you may wish to change the amount refunded if it is only a partial refund. When you click the <b>Save</b> button, the refund information is saved in the database and a pop-up dialog appears asking you whether you wish to perform a real time refund through the payment gateway. If you answer <b>Yes</b> the refund transaction is executed and the result is returned in the <b>Refund Status</b> field. A value of "0" (equivalent to an amber bullet in the list view) means that a transaction hasn't taken place. A value of "1" (green bullet) means that the transaction was successful and a value of "-1" (red bullet) means that the transaction wasn't successful. If you click the <b>Payment Info</b> button, a panel opens that shows you the information exchanged with the payment gateway in order to understand for example, why a transaction may have failed. Note that it is only possible to carry out a real time refund transaction if the payment gateway (during the original payment transaction) saves the transaction id and populates the Admin Payment Class attribute with the class name of the class that the Admin App can use to perform the refund.<br><br>If the <b>Send eMail</b> check box is checked, an eMail is sent to the customer based on a Velocity template for the state of the order. The template is different depending on whether the order is placed in the <b>Refund Approved</b> or <b>Refund Declined</b> state. The default value of the check box may be set by the fbc.kk_panel_refunds.send_mail parameter in konakartadmin_gwt.properties.

help.reports                    = These are the reports that are defined for your online store. <br /><br />To add a new report click the \"<b>New</b>\" button and then you specify the filename of the new report to upload.<br /><br />To edit a report\, first select it\, then click the \"<b>Edit</b>\" button to edit it - although you may find it easier to experiment with writing new reports in the Eclipse environment using the BIRT plugins.<br /><br />To delete a report\, first select it\, then click the \"<b>Delete</b>\" button to delete it.  You are asked to confirm the deletion before the report is actually deleted.<br /><br />To refresh the list of reports click the \"<b>Refresh</b>\" button.<br /><br />To run a report\, first select it\, then click the \"<b>Run</b>\" button to execute it.

help.reportsConfig              = <b>Reports Configuration</b><br /><br />These are the configuration parameters for Reports in your store.<br /><br />Although BIRT reports are integrated by default with KonaKart the coupling with BIRT is very loose and it is perfectly possible to integrate your own reports and reporting system into KonaKart.<br /><br />The <b>Report definitions base path</b> defines where your report files are stored.<br /><br />The <b>Report file extension</b> defines the file extension for each report file (for BIRT this is .rptdesign but you could change this to suit your own reporting system).<br /><br />The <b>Report viewer URL</b> defines the URL of the servlet that produces and displays your reports.  By default, in KonaKart, this will be the URL for the birtviewer report viewer - note that this uses localhost by default so to use reports on another machine you will need to replace that with a hostname that can be resolved correctly from the client\'s PC.<br /><br />The <b>Status Page Report URL</b> defines the URL for content that will be displayed in the frame on the "My Store Status" page of the Admin App.   You can use any URL you like (it doesn't have to be a report) but by default we display a chart\, produced by BIRT\, displaying the number of orders received in the last 25 days.<br /><br />${help.returnByApi}

help.resetDatabase              = <b>Reset Database</b><br /><br /><b>PROCEED WITH CAUTION</b><br /><br />On clicking the <b>Delete</b> button the database will be emptied of all of the following records:<br /><ul><li>Products</li><li>Categories</li><li>Product Options</li><li>Bookings</li><li>Orders</li><li>Miscellaneous Items</li><li>Subscriptions</li><li>WishLists</li><li>Expressions</li><li>Custom Attributes and Custom Attribute Templates</li><li>Promotions</li><li>Audit Data</li></ul><br />This is a way to empty the database when you want to remove all the sample data that is provided in the default KonaKart installation.<br /><br />Note that Customers are not removed and neither are the reference records such as Currencies\, Languages and Tax-related objects.<br /><br />Following a successful execution of this command the database will be ready to add your own data without any sample data remaining.<br /><br />Clearly this is a powerful operation so <b>should only be used if you are certain you want to empty your database</b>.  Note that there is no undo operation to get the deleted data back.

help.returnByApi                = Do not tick the checkbox on the right of each configuration parameter if you do not want it to be returned by the storefront APIs.  If you do not need a configuration variable to be returned by the storefront APIs uncheck the field to improve performance and security.

help.returns                    = An order may have multiple returns (i.e. The products within the order may be returned at different times). The return must contain a Return Merchandise Authorization code (RMA) and may contain text explaining the reason for the return. Each return contains a number of returned products whose quantity cannot exceed the total number of products within the order.<br /><br /><b>Searching and Editing</b><br />Returns may be searched for by the id of the order\, the Order Number or by the RMA. You must enter the search constraints and then click the <b>Search</b> button. This will retrieve all return objects matching the search criteria. In most cases there will only be one return per order. When you click on a row containing a return\, the details of the return will be displayed. The details include the Order Id\, Order Number\, the RMA Code and the Return Reason. Below these details\, you will see a list of products that the order contained. Each product can be identified by its product Id and / or its SKU. You may modify the number of products returned by entering a number that cannot be greater than the quantity within the original order. Clicking the <b>Save</b> button will save the modification.<br /><br /><b>Inserting</b><br />To insert a new return\, you must click the <b>New</b> button and enter an Order Id and an RMA Code. The Order Number is optional. When you tab out of the Order Id field after having entered the id of an existing order\, a list of products will appear\, all with return quantity set to 0. You may change these quantity fields to match the actual products that have been returned and then click the <b>Save</b> button to save the return. If your orders have an Order Number\, you may enter that instead of the Order Id\, and when tabbing out of the Order Number field the product list appears in the same way as just described. When this window is opened from the Orders window after having selected an order\, the Order Id and Order Number fields are automatically populated with data from the selected order.<br /><br />The <b>AdminOrderIntegrationMgr</b> contains a <b>getRMACode()</b> method which automatically generates an RMA code based on the order id that is used to populate the entry field. This method may be modified to add your own custom algorithm. In order to force manual entry of the RMA Code, the method must return null.<br /><br />A custom button with a label such as <b>Credit</b> may appear if it has been defined by the administrator and you are authorized to use it.   This button will have functionality specific to your particular store (please ask your KonaKart administrator for details).<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Returned Products per page</li></ul>

help.reviews                    = This panel allows you to manage product reviews written by customers. Reviews can be edited and deleted.<br /><br />The storefront application may be configured so that when a review is entered\, it is in an invisible state until and administrator validates the content and sets the state to visible. Alternatively he may decide not to approve the review (rather than deleting it) so that it remains invisible but the state is changed so that he knows that he doesn't have to review it again . The configuration variable to configure this behaviour\, may be found in the <b>Configuration >> Security and Auditing</b> section of the admin app. If the default state for reviews (through this configuration variable) is set to 1 (Invisible state)\, then they will not be displayed on the storefront until the state is changed using this panel.<br /><br /><b>File based configuration</b> can be used to define the number of reviews shown in each group returned from the database.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Reviews per page</li></ul>

help.roleToPanels               = This window allows you to create new roles\, edit and delete existing roles and to associate roles to panels and API Calls.<br /><br />All existing roles are displayed in the list on the left hand side of the window. When you select a role\, the panels associated with that role are displayed in the <b>Assigned Panels</b> list and the available panels are displayed in the <b>Available Panels</b> list. You can add panels to the role by selecting them in the <b>Available Panels</b> list and then clicking the <b>Add</b> button. You can remove panels from the role by selecting them in the <b>Assigned Panels</b> list and then clicking the <b>Remove</b> button. Note that multiple selects are allowed. You must click the <b>Save</b> button in order to save any modifications. Once modifications have been saved you may click the <b>Privileges</b> button in order to set the user privileges for each panel. The available privileges are edit / insert / delete or a combination of these. If none of these privileges are selected\, then the user will have read only access. You may notice that there are some other check boxes labelled <b>Cust1</b>\, <b>Cust2</b> and <b>Cust3</b>. These may be used by a panel to configure access to features such as pop-up windows for that panel. If they are being used\, they will be in green and float-over text will explain what they are being used for.<br /><br />A new role may be entered by clicking the <b>New</b> button and then by filling the required fields in the popup window. Existing roles may be edited or deleted by selecting them and then clicking the <b>Edit</b> or <b>Delete</b> buttons. Each role has a name and description\, which are compulsory fields. There are five custom fields and a SuperUser check box. When SuperUser is set\, the role allows an administrator to administer a store even when it has been deleted or is disabled.<br /><br />KonaKart can be configured for API Call security in the <b>Security and Auditing</b> section of the <b>Configuration</b> menu. This provides an extra level of security by defining the API Calls that can be accessed by any particular role. When enabled\, a <b>Show API Calls</b> button will appear\, that allows you to switch between panel and API Calls. The configuration of API Calls works in a similar fashion to the panel based security explained above. You can add API Calls to the role by selecting them in the <b>Available API Calls</b> list and then clicking the <b>Add</b> button. You can remove API Calls from the role by selecting them in the <b>Assigned API Calls</b> list and then clicking the <b>Remove</b> button. Note that multiple selects are allowed. You must click the <b>Save</b> button in order to save any modifications.

help.rss                        = Here you can view the latest news\, relevant to the version of KonaKart that you are using\, and to more recent versions. The full RSS feed is available from <a href=\"http://www.konakart.com/konakart.rss\"  target=\"_blank\">http://www.konakart.com/konakart.rss</a>

help.shipments                  = An order may have multiple shipments (i.e. The products within the order may be shipped at different times). A shipment is associated with an order referenced by the order id. It may also contain an order number, a tracking number and shipping notes. If one or more shippers have been defined under <b>Localizations >> Shippers</b>, then they will appear in the drop list so that a shipper can be selected for the shipment. If a tracking URL has been defined for the shipper, then the tracking URL field will be automatically populated when a shipper is selected from the drop list. If the tracking URL contains the <b>{TRACK_NUM}</b> placeholder, it will be substituted with the actual tracking number either when the shipment is saved or when the shipper is selected (if the tracking number has already been entered). Each shipment contains a number of shipped products whose quantity cannot exceed the total number of products within the order.<br /><br /><b>Searching and Editing</b><br />Shipments may be searched for by the id of the order, the order number or by the tracking number. You must enter the search constraints and then click the <b>Search</b> button. This will retrieve all shipment objects matching the search criteria. In most cases there will only be one shipment per order. When you click on a row containing a shipment, the details of the shipment are displayed. Below these details, you will see a list of products that the order contains. Each product can be identified by its product Id and / or its SKU. You may modify the number of products shipped by entering a number that cannot be greater than the quantity within the original order. Clicking the <b>Save</b> button saves the modification.<br /><br /><b>Inserting</b><br />To insert a new shipment, you must click the <b>New</b> button and enter an Order Id. All other fields are optional. When you tab out of the Order Id field after having entered the id of an existing order, a list of products appears, all with shipped quantity set to 0. You may change these quantity fields to match the actual products that have been shipped and then click the <b>Save</b> button to save the shipment. If your orders have an Order Number, you may enter that instead of the Order Id, and when tabbing out of the Order Number field the product list appears in the same way as just described. When this window is opened from the Orders window after having selected an order, the Order Id and Order Number fields are automatically populated with data from the selected order.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Shipments per page</li></ul>

help.shippers                   = This panel is used to store information regarding shippers such as FedEx or USPS etc. When adding shipments to an order, you can select one of the shippers defined here from a drop list.<br/><br/>Only the <b>Name</b> is mandatory although it may be useful to populate the <b>Tracking URL</b> with a URL such as http://www.myshipper.com/track?id={TRACK_NUM}. When a shipment is added to an order, the {TRACK_NUM} placeholder is replaced by the actual tracking number and the full tracking URL is saved in the shipment object. In this way, the storefront application can easily display a URL for the customer to click on in order to track the shipment.

help.sitemap                    = <b>Sitemap Configuration</b><br /><br />These are the configuration parameters for the Sitemap generation in your store. <br /><br />You can define the directory where the sitemap files will be written. They are generated by a batch job which can be scheduled to run at regular intervals by the Quartz scheduler. It can also be run interactively from the Admin App under <b>Scheduler >> Scheduler</b>.

help.solrControl                = You can use this panel to add all products in the catalog to the Solr search engine and to remove all products indexed by the Solr search engine.<br /><br />Solr should already be running and be available at the URL which can be configured under <b>Configuration >> Solr Search Engine</b>.<br /><br />Since the add / remove requests could take some time to complete\, the processes run asynchronously and control is immediately restored to the Admin App. In order to track progress\, you may use the Solr Admin App which will show many statistics of the Solr Server. If for some reason an exception occurs\, you will be able to read details in the Solr log.

help.stockOrders                = <b>Stock and Orders Configuration</b><br /><br />As with other Configuration Settings\, you can modify of these values and refresh the caches (see under the <b>Tools</b> menu) to see them have an instant effect (although some that affect the Admin App require you to log out then log in again). <br /><br /><b>Show Invisible Products</b> : Set to <b>true</b> to show "invisible" products in the Admin App\, or set to <b>false</b> if you do not want them to be appear in the Admin App.<br /><br /><b>Stock Reorder Class</b> : The name of a java class that implements code that you want to execute when a product needs to be reordered. See the detailed customization documentation for more information. <br /><br /><b>Order Integration Class</b> : The name of a java class that implements code that you want to execute when an order changes status.  See the detailed customization documentation for more information.<br /><br /><b>Fetch Descriptions Separately</b> : In most situations you should leave this set to <b>false</b> for better performance.  The purpose is to modify the way product descriptions are retrieved from the database.  If this is set to <b>true</b> the product descriptions are retrieved separately after the main product queries have been completed.  This is required when using databases where the type of the products_description column has been changed from the KonaKart default value (for example to CLOB in Oracle) which cannot be used as part of the standard KonaKart product queries.

help.stores                     = <b>Store Maintenance</b><br /><br />If you have been granted sufficient privileges\, you may search for a store in the mall by entering any combination of the search criteria at the top of the panel then clicking the Search button.<br /><br />The search is not case sensitive unless your database is configured to be non-case sensitive.  Wildcard configuration parameters control the precise searches of substrings (See <b>Configuration >> Admin App Configuration</b>) but with the default settings a wildcard is added before and after all search text which means that\, for example\, storeId <b>StoreX</b> will be returned if you enter <b>tor</b> as the StoreId.<br /><br />In a similar fashion you can search for a store in the mall on whether or not it is enabled or disabled\, under maintenance or not under maintenance and whether or not it is marked as deleted.<br /><br />Only the stores you are authorized to maintain will be returned.<br /><br />Any displayed stores may be edited or deleted by clicking the respective buttons at the bottom of the list assuming the relevant privileges have been granted to the current user.<br /><br />The user must have edit store privileges for the Edit Store panel in order for the Edit button to be visible.<br /><br />To create a new store click the <b>New</b> button whereupon a new panel will be displayed on which you define the attributes for the new store.<br /><br />To create a new store by cloning an existing one select the store to clone then click the <b>Clone</b> button whereupon a new panel will be displayed on which you define some attributes to execute the clone and define the new storeId.  Stores created by cloning are initialised to be \"Under Maintenance\".<br /><br />To delete a store select the store to delete then click the <b>Delete</b> button whereupon a confirmation dialogue will be displayed.  Click on the <b>Yes</b> button to confirm.  Note that the store isn\'t actually deleted from the database by a delete operation\, it is merely marked as deleted.  Thus\, it is possible to undelete a store that has been deleted by editing the deleted store and unchecking the <b>Deleted</b> box.<br /><br /><b>Enabled</b> = active stores that are available for use.  If disabled a store is not accessible to application or admin app users. <br /><br /><b>Under Maintenance</b> = stores that are currently being maintained so are inaccessible to application users, but can be accessed by admin app users.<br /><br /><b>Deleted</b> = stores that are deleted are no longer available for use by application or admin app users.  These stores are not physically deleted from the database but only marked as "deleted".  Therefore it is possible to "Un-delete" a store if required. 

help.storeStatus                = This status window shows the current state of your online store i.e. How many orders in different states\, how many registered customers etc. <br /><br />By clicking on the number\, you are redirected to a window giving more details about the status information.<br /><br />The <b>Refresh</b> button forces an update of the status information.

help.subscriptions              = This panel allows you to manage recurring billing subscriptions. A subscription is normally inserted automatically by the system when an order is placed\, if that order contains one or more products that have been configured with payment schedules. The payment schedule mainly defines the frequency of payments. The actual recurring billing transactions may be executed by payment gateways that support this functionality\, or they may be executed by a batch program that reads the subscription objects from the database and decides whether a payment is due. <br/><br/>The subscriptions may be searched for using either the subscription code\, the order id (or order number) or the customer id of the customer who created the order. The subscription code is a unique code that is normally returned by the payment gateway when a subscription is created. If a gateway isn't being used to manage the subscription\, then the code may be left empty. If the <b>Has Problem</b> checkbox is set\, then the only subscriptions returned are those that aren't functioning properly during the actual billing transaction. Note that the panel may be configured to display the numeric order id or the order number\, by setting the configuration variable in the <b>Configuration >> Admin App Configuration</b> section of the Admin App.<br/><br/>Most of the attributes are self explanatory. The <b>Amount</b> defines the amount that will be billed at regular intervals. Some payment gateways also support a <b>Trial Amount </b> which is the value billed during a trial period defined by the payment schedule. A subscription may be enabled / disabled using the <b>Active</b> checkbox. If payments aren't being accepted by the payment gateway\, then the problem attribute will be set and a description may be written to the description attribute to identify the source of the problem. i.e. The credit card has expired. These attributes will normally be written by the program making the payments or by a return message from the payment gateway.<br /><br />Click the <b>Payment Info</b> button to go to a panel showing all payments that have been made for this subscription including the response of the payment gateway.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Subscriptions per page</li></ul>

help.subZones                   = A tax area or geographical zone is an area which may span multiple physical areas such as countries or states. In KonaKart it is used for defining tax areas which share a tax rate and for geographical areas used when setting up shipping and payment modules to define where these modules may be used. e.g. A certain shipping module may only be used for domestic and not international shipping.<br /><br />This panel is used to map tax areas / geo zones to certain physical zones within countries or all physical zones of a country.  Once defined, the tax area may be associated to different tax rates for different types of products defined by the tax class.<br /><br />A tax area mapping is selected by clicking on it, and then it may be edited or deleted. <br /><br />A new tax area mapping may be created by clicking the <b>New</b> button, defining the new tax area mapping in the edit fields at the bottom, then clicking on the <b>Save</b> button to insert the new entry into the database. Note that a tax area or geographical zone may be mapped to multiple physical areas (e.g. to multiple countries and / or multiple states within a country). 

help.syncProducts               = This panel may be used to synchronize products between stores. It is used when running KonaKart in multi-store, shared products and shared categories mode. In this mode you may use one or more stores as pre-production stores in order to insert and test out product information. When you are satisfied that the information is correct, you may copy the products to another store which may for example be the production store.<br/><br/>When searching for products to synchronize, you select from the drop list the store that you want to synchronize with and then from the other drop list you may choose to search for new products or products which are out of sync. New products are products that exist in this store but have never been copied to the destination store. Out of sync products are products that exist in both stores but have different last modified dates. If you are searching for a single product, you may enter the product id or sku as one of the search filters.<br/><br/>In the case of new products, when you select one and click the copy button, it creates a copy and inserts it into the destination store. When the copy button is clicked for an out of sync product, the existing product in the destination store is edited rather than a new one being inserted. In some cases the product may have associated products such as up-sell, cross sell or bundled products that do not exist in the destination store. The default functionality is to copy over these products as well. You may decide not to copy them by unchecking the check box in the confirmation panel.<br/><br/>When you click the Copy All button, all products (new and out of sync) are copied to the destination store using the batch program in the com.konakartadmin.bl.AdminProductBatchMgr called synchronizeStoresBatch. A log file is created in the log directory defined in the Admin App under Configuration >> Logging. The program runs as a background task and progress may be monitored by clicking on the search button to display the products that haven't been synchronized yet.<br/><br/>The Edit button allows you to view the details and to edit the selected product.

help.tags                       = These are the <b>tags</b> defined that are defined for your online store. A <b>tag</b> is used like a label for a variety of objects in the system.  Tags can be placed in any number of Tag Groups.<br /><br />A <b>tag</b> has a name and a sort order\, and must be defined for all the languages defined in the system.<br /><br />You can <b>search</b> for tags by using the search panel at the top of the display.  Enter all or part of the tag name and all the tags that contain this text will be returned.  (For every match that is found\, all the language variants of that matching tag are also returned\, even if they do not also match the search text).<br /><br />The <b>Save</b> button is enabled when all the fields are populated correctly (and the record is validated successfully).<br /><br />Clicking the <b>Cancel</b> button will discard any changes you have made since the last save and the original values will be restored to the screen.<br /><br />Click on the <b>New</b> button to create a new tag.<br /><br />When you select a tag from the list the <b>Tag Groups</b> button will be enabled.   Click the <b>Tag Groups</b> button to display a screen that will allow you to define which tag groups the selected tag should belong to.  The tag will be included in the tag groups selected on the right hand side of that window\, and not in the tag groups listed on the left hand side of that screen.   When you click on the <b>Save</b> button on the tag group selection window the system will save the tag group assignments and any changes you have made to the tag names on the tags window.  If you click on the <b>Cancel</b> button on the tag group selection window all the tag group selection changes are discarded for that tag.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Tags per page</li></ul>

help.tagGroups                  = These are the <b>tag groups</b> that are defined for your online store. <b>Tag Groups</b> are used to group tags together for a variety of different uses within the system.<br /><br />A <b>tag group</b> has a name and a description and both must be defined for all the languages defined in the system. When using SOLR faceted search, a tag group must be set up for each facet and the tag groups must then be mapped to a category. The facet drop list allows you to map the tag group to one of the SOLR facet fields.<br /><br />You can <b>search</b> for tag groups by using the search panel at the top of the display.  Enter all or part of the tag group name and all the records that contain this text will be returned.  (For every match that is found, all the language variants of that matching tag group are also returned, even if they do not also match the search text).<br /><br />The <b>Save</b> button is enabled when all the fields are populated correctly (and the record is validated successfully).<br /><br />Clicking the <b>Cancel</b> button will discard any changes you have made since the last save and the original values will be restored to the screen.<br /><br />Click on the <b>New</b> button to create a new tag group.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Tag Groups per page</li></ul>

help.taxClasses                 = <b>Tax Class Configuration</b><br /><br />These are the tax classes that are defined for your online store. A tax class has a title, tax code and a description.   A common example of a tax class is 'Taxable Goods' which might have a description of 'The following types of products are included: non-food\, services\, etc'.<br /><br />A tax class is selected by clicking on it\, and then it may be edited or deleted.<br /><br />A new tax class may be created by clicking the <b>New</b> button\, defining the new tax class in the edit fields at the bottom\, then clicking on the <b>Save</b> button to insert the new entry into the database.

help.taxAreas                   = A tax area or geographical zone is an area which may span multiple physical areas such as countries or states. In KonaKart it is used for defining tax areas which share a tax rate and for geographical areas used when setting up shipping and payment modules to define where these modules may be used. e.g. A certain shipping module may only be used for domestic and not international shipping.

help.taxRates                   = These are the tax rates that are defined for your online store. A tax rate is a percentage number used to calculate tax on a product. e.g. 20% VAT in the UK. It has to be associated with a tax area (where the tax will be applied) and to a tax class which is an attribute of a product. e.g. Baby food taxed at 4% in the tax area of France. <br /><br />A tax rate is selected by clicking on it\, and then it may be edited or deleted.<br /><br />A new tax rate may be created by clicking the <b>New</b> button\, defining the new tax rate in the edit fields at the bottom\, then clicking on the <b>Save</b> button to insert the new entry into the database. Note that during the insert process\, a tax class and a tax area must be selected from the drop lists.

help.templates                  = <b>Velocity Templates Configuration</b><br /><br />These are the configuration parameters for the Velocity Templates in your store. <br /><br />You can define the <b>Templates Directory</b> path where the velocity template files will be created.<br /><br />The Velocity templates for each store are stored separately under another sub directory which has the name of the store id but you should not specify this value here as it is added by KonaKart automatically. By default the location for the Velocity Templates is a directory called <b>templates</b> under the installation home of KonaKart although it may be changed by modifying the value of this configuration variable.<br /><br />${help.returnByApi}

help.velocityTemplates          = <b>Velocity Templates</b><br /><br />This panel allows you to maintain the velocity templates used by your system.  You can <b>Edit</b>\, <b>Copy</b>\, <b>Upload</b> or <b>Delete</b> the selected template.<br /><br />To add a new template click the \"<b>New</b>\" button and then you specify the filename of the new template to upload.<br /><br />To edit a template\, first select it\, then click the \"<b>Edit</b>\" button to edit it - although you should take great care if you are editing the templates in a live Production system without first testing your changes!<br /><br />To delete a template\, first select it\, then click the \"<b>Delete</b>\" button to delete it.  You are asked to confirm the deletion before the template is actually deleted.<br /><br />To refresh the list of templates click the \"<b>Refresh</b>\" button.<br /><br />To make a copy of a template\, first select it\, then click the \"<b>Copy</b>\" button then enter the name for the new template in the dialog box displayed.   This option is handy for creating different variants of a template for different locales.

help.viewBatchLogs               = <b>View Batch Logs</b><br /><br />This panel allows you to view the log files in your defined batch log files directory<br /><br />Select a log file then click the \"<b>View</b>\" button to display it.<br /><br />To delete a log file\, first select it\, then click the \"<b>Delete</b>\" button to delete it.  You are asked to confirm the deletion before the log file is actually deleted.<br /><br />To refresh the list of log files from the directory click the \"<b>Refresh</b>\" button.

help.viewImporterLogs            = <b>View Importer Logs</b><br /><br />This panel allows you to view the log files in your defined importer log files directory<br /><br />Select a log file then click the \"<b>View</b>\" button to display it.<br /><br />To delete a log file\, first select it\, then click the \"<b>Delete</b>\" button to delete it.  You are asked to confirm the deletion before the log file is actually deleted.<br /><br />To refresh the list of log files from the directory click the \"<b>Refresh</b>\" button.

help.viewLogs                   = <b>View Logs</b><br /><br />This panel allows you to view the log files in your defined log files directory<br /><br />Select a log file then click the \"<b>View</b>\" button to display it.<br /><br />To delete a log file\, first select it\, then click the \"<b>Delete</b>\" button to delete it.  You are asked to confirm the deletion before the log file is actually deleted.<br /><br />To refresh the list of log files from the directory click the \"<b>Refresh</b>\" button.

help.userDefinedConfigs         = <b>User Defined Configurations</b><br /><br />These are the User Defined configuration parameters.<br /><br />Any configuration parameters added to Group 31 will appear here.<br /><br />${help.returnByApi}

help.userToRoles                = This window allows you to add and remove roles from an Admin Application User.<br /><br />All Admin App Users are displayed in the list on the left hand side of the window. When you select a user\, the user's roles are displayed in the <b>Assigned Roles</b> list and the available roles are displayed in the <b>Available Roles</b> list. You can add roles by selecting them in the <b>Available Roles</b> list and then clicking the <b>Add</b> button. You can remove roles by selecting them in the <b>Assigned Roles</b> list and then clicking the <b>Remove</b> button. Note that multiple selects are allowed. You must click the <b>Save</b> button in order to save any modifications.

help.zones                      = <b>Zone Configuration</b><br /><br />These are the zones that are defined for your online store. A zone is a physical area within a country; such as a state or a region. It has a name\, a code\, a search string and some optional custom fields.<br /><br />A zone is selected by clicking on it\, and then it may be edited or deleted.<br /><br />A new zone may be created by clicking the <b>New</b> button\, defining the new zone in the edit fields at the bottom\, then clicking on the <b>Save</b> button to insert the new entry into the database. Note that during the insert process\, a country must be selected from the drop list\, which is the country that contains the zone.<br /><br />If the invisible check box is clicked\, the zone is not displayed in the UI. The search string field can contain any string used in the store front application to search for the Zone. For example\, some US states have many tax zones within the state\, which may be identified by the Zip code or by a combination of Zip code and county. In KonaKart these zones should be defined but made invisible so that the customer is not presented with a drop list of hundreds of areas to choose from. (i.e. the customer should just see a list of the standard US states). However\, once the customer has entered his address information during registration\, custom code can be used to search for the exact zone that the customer belongs to and then to register the customer with that zone so that the correct tax may be calculated.<br /><br />The custom fields can be used for any site-specific purposes.  The custom fields are not used directly by KonaKart functionality but are searchable and returned from the database by the KonaKart Zone APIs to support user customizations.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Zones per page</li></ul>
