//
// (c) 2006 DS Data Systems UK Ltd, All rights reserved.
//
// DS Data Systems and KonaKart and their respective logos, are 
// trademarks of DS Data Systems UK Ltd. All rights reserved.
//
// The information in this document is the proprietary property of
// DS Data Systems UK Ltd. and is protected by English copyright law,
// the laws of foreign jurisdictions, and international treaties,
// as applicable. No part of this document may be reproduced,
// transmitted, transcribed, transferred, modified, published, or
// translated into any language, in any form or by any means, for
// any purpose other than expressly permitted by DS Data Systems UK Ltd.
// in writing.
//
package com.konakartadmin.app;

import java.util.Calendar;

import com.konakart.app.DataDescriptor;
import com.konakart.app.ExportOrderOptions;
import com.konakart.app.ExportOrderResponse;
import com.konakart.app.KKEvent;
import com.konakart.app.KKEventSearch;
import com.konakart.app.NameValue;
import com.konakart.app.PaymentOptions;
import com.konakart.app.PdfOptions;
import com.konakart.app.PdfResult;
import com.konakartadmin.app.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.konakart.util.KKConstants;
import com.konakartadmin.bl.KKAdmin;

/**
 *  The KonaKart Custom Engine - Generated by CreateKKAdminCustomEng
 */
@SuppressWarnings("all")
public class KKAdminCustomEng implements com.konakartadmin.appif.KKAdminIf
{
     private KKAdmin kkAdminEng = null;

    /**
     * Configuration parameter passed when the engine is instantiated
     */
     private AdminEngineConfig adminEngConf = null;

     protected static Log log = LogFactory.getLog(KKAdminCustomEng.class);

    /**
     *  These are all the interface objects that you can override.
     *
     *  Replace the required custom class with one that implements
     *  your custom code.
     */
     private GetEngConf _getEngConf = null;
     private GetStores _getStores = null;
     private GetMallStores _getMallStores = null;
     private CloneStore _cloneStore = null;
     private InsertMallStore _insertMallStore = null;
     private DoesMallStoreExist _doesMallStoreExist = null;
     private DeleteMallStore _deleteMallStore = null;
     private UpdateMallStore _updateMallStore = null;
     private GetKonakartAdminPropsFilePath _getKonakartAdminPropsFilePath = null;
     private GetKonakartPropertyValue _getKonakartPropertyValue = null;
     private LogMsg _logMsg = null;
     private GetDefaultLanguage _getDefaultLanguage = null;
     private GetLanguageByCode _getLanguageByCode = null;
     private GetLanguageById _getLanguageById = null;
     private GetLanguageForLocale _getLanguageForLocale = null;
     private GetLanguageIdForLocale _getLanguageIdForLocale = null;
     private GetAllLanguages _getAllLanguages = null;
     private GetLanguages _getLanguages = null;
     private InsertLanguage _insertLanguage = null;
     private DeleteLanguage _deleteLanguage = null;
     private UpdateLanguage _updateLanguage = null;
     private GetDefaultCurrency _getDefaultCurrency = null;
     private GetCurrency _getCurrency = null;
     private GetCurrencies _getCurrencies = null;
     private DeleteCurrency _deleteCurrency = null;
     private InsertCurrency _insertCurrency = null;
     private UpdateCurrency _updateCurrency = null;
     private GetOrderStatusNames _getOrderStatusNames = null;
     private DeleteOrderStatusName _deleteOrderStatusName = null;
     private InsertOrderStatusName _insertOrderStatusName = null;
     private InsertOrderStatusNames _insertOrderStatusNames = null;
     private UpdateOrderStatusName _updateOrderStatusName = null;
     private GetCountries _getCountries = null;
     private DeleteCountry _deleteCountry = null;
     private InsertCountry _insertCountry = null;
     private UpdateCountry _updateCountry = null;
     private SendEmail _sendEmail = null;
     private GetOrdersCount _getOrdersCount = null;
     private GetOrdersLite _getOrdersLite = null;
     private GetOrders _getOrders = null;
     private GetOrdersCreatedSince _getOrdersCreatedSince = null;
     private UpdateOrder _updateOrder = null;
     private UpdateOrderStatus _updateOrderStatus = null;
     private GetAllOrderStatuses _getAllOrderStatuses = null;
     private GetAllAddressFormats _getAllAddressFormats = null;
     private GetHtml _getHtml = null;
     private GetPdf _getPdf = null;
     private GetCustomers _getCustomers = null;
     private GetCustomersLite _getCustomersLite = null;
     private GetCustomerForId _getCustomerForId = null;
     private GetProductNotificationsForCustomer _getProductNotificationsForCustomer = null;
     private UpdateCustomer _updateCustomer = null;
     private DeleteCustomer _deleteCustomer = null;
     private DeleteOrder _deleteOrder = null;
     private GetCustomersCount _getCustomersCount = null;
     private GetCustomersCountWhoHaventPlacedAnOrderSince _getCustomersCountWhoHaventPlacedAnOrderSince = null;
     private GetCustomersCountWhoHavePlacedAnOrderSince _getCustomersCountWhoHavePlacedAnOrderSince = null;
     private GetAllCountriesFull _getAllCountriesFull = null;
     private GetAllTaxClassesFull _getAllTaxClassesFull = null;
     private GetZonesById _getZonesById = null;
     private GetAllGeoZones _getAllGeoZones = null;
     private GetGeoZones _getGeoZones = null;
     private DeleteGeoZone _deleteGeoZone = null;
     private InsertGeoZone _insertGeoZone = null;
     private UpdateGeoZone _updateGeoZone = null;
     private GetSubZones _getSubZones = null;
     private DeleteSubZone _deleteSubZone = null;
     private InsertSubZone _insertSubZone = null;
     private UpdateSubZone _updateSubZone = null;
     private GetConfigurationInfo _getConfigurationInfo = null;
     private GetAllConfigurations _getAllConfigurations = null;
     private GetAllConfigurationGroups _getAllConfigurationGroups = null;
     private InsertConfigurationGroup _insertConfigurationGroup = null;
     private InsertConfiguration _insertConfiguration = null;
     private UpdateConfiguration _updateConfiguration = null;
     private UpdateConfigurationGroup _updateConfigurationGroup = null;
     private GetConfigurationGroupsByTitle _getConfigurationGroupsByTitle = null;
     private GetConfigurationByKey _getConfigurationByKey = null;
     private RegisterCustomer _registerCustomer = null;
     private ForceRegisterCustomer _forceRegisterCustomer = null;
     private ResetCustomerPassword _resetCustomerPassword = null;
     private ResetCustomerPasswordSpecifyingEmail _resetCustomerPasswordSpecifyingEmail = null;
     private SetCustomerPassword _setCustomerPassword = null;
     private ChangePassword _changePassword = null;
     private ChangeUserPassword _changeUserPassword = null;
     private CheckPasswordValidity _checkPasswordValidity = null;
     private GetConfigurationsByGroup _getConfigurationsByGroup = null;
     private SaveConfigs _saveConfigs = null;
     private InsertConfigs _insertConfigs = null;
     private RemoveConfigs _removeConfigs = null;
     private GetModules _getModules = null;
     private InsertProduct _insertProduct = null;
     private InsertProductWithOptions _insertProductWithOptions = null;
     private DoesProductExist _doesProductExist = null;
     private GetProduct _getProduct = null;
     private InsertProductCategory _insertProductCategory = null;
     private GetProductWithOptions _getProductWithOptions = null;
     private SearchForProducts _searchForProducts = null;
     private SearchForProductsWithOptions _searchForProductsWithOptions = null;
     private EditProduct _editProduct = null;
     private EditProductWithOptions _editProductWithOptions = null;
     private DeleteProduct _deleteProduct = null;
     private DeleteCategoryTree _deleteCategoryTree = null;
     private DeleteSingleCategory _deleteSingleCategory = null;
     private GetCategory _getCategory = null;
     private GetCategoryTree _getCategoryTree = null;
     private InsertCategory _insertCategory = null;
     private MoveCategory _moveCategory = null;
     private EditCategory _editCategory = null;
     private DeleteManufacturer _deleteManufacturer = null;
     private EditManufacturer _editManufacturer = null;
     private GetAllManufacturers _getAllManufacturers = null;
     private GetManufacturer _getManufacturer = null;
     private InsertManufacturer _insertManufacturer = null;
     private DeleteReview _deleteReview = null;
     private EditReview _editReview = null;
     private GetAllReviews _getAllReviews = null;
     private GetReview _getReview = null;
     private GetReviewsPerProduct _getReviewsPerProduct = null;
     private GetReviews _getReviews = null;
     private InsertReview _insertReview = null;
     private InsertSpecial _insertSpecial = null;
     private GetSpecial _getSpecial = null;
     private DeleteSpecial _deleteSpecial = null;
     private EditSpecial _editSpecial = null;
     private GetAllSpecials _getAllSpecials = null;
     private GetSpecialsPerCategory _getSpecialsPerCategory = null;
     private GetAllProductOptions _getAllProductOptions = null;
     private GetProductOptions _getProductOptions = null;
     private GetProductOptionValuesPerOption _getProductOptionValuesPerOption = null;
     private DeleteProductOptions _deleteProductOptions = null;
     private DeleteProductOptionValues _deleteProductOptionValues = null;
     private GetProductOptionsPerId _getProductOptionsPerId = null;
     private GetProductOptionsPerName _getProductOptionsPerName = null;
     private GetAllProductOptionValues _getAllProductOptionValues = null;
     private GetProductOptionValuesPerId _getProductOptionValuesPerId = null;
     private GetProductOptionValuesPerName _getProductOptionValuesPerName = null;
     private GetProductOptionValueToProductOptions _getProductOptionValueToProductOptions = null;
     private InsertProductsOptionsValuesToProductsOptions _insertProductsOptionsValuesToProductsOptions = null;
     private InsertProductOption _insertProductOption = null;
     private EditProductOption _editProductOption = null;
     private InsertProductOptionValue _insertProductOptionValue = null;
     private EditProductOptionValue _editProductOptionValue = null;
     private GetNextProductOptionId _getNextProductOptionId = null;
     private GetNextProductOptionValuesId _getNextProductOptionValuesId = null;
     private GetProductAttributesPerProduct _getProductAttributesPerProduct = null;
     private DeleteProductAttribute _deleteProductAttribute = null;
     private DeleteProductAttributesPerProduct _deleteProductAttributesPerProduct = null;
     private EditProductAttribute _editProductAttribute = null;
     private InsertProductAttribute _insertProductAttribute = null;
     private InsertProductOptions _insertProductOptions = null;
     private InsertProductOptionValues _insertProductOptionValues = null;
     private CheckSession _checkSession = null;
     private Login _login = null;
     private Logout _logout = null;
     private GetAllTaxRates _getAllTaxRates = null;
     private GetTaxRates _getTaxRates = null;
     private DeleteTaxRate _deleteTaxRate = null;
     private InsertTaxRate _insertTaxRate = null;
     private UpdateTaxRate _updateTaxRate = null;
     private GetZones _getZones = null;
     private DeleteZone _deleteZone = null;
     private InsertZone _insertZone = null;
     private UpdateZone _updateZone = null;
     private GetTaxClasses _getTaxClasses = null;
     private DeleteTaxClass _deleteTaxClass = null;
     private InsertTaxClass _insertTaxClass = null;
     private UpdateTaxClass _updateTaxClass = null;
     private GetAddressFormats _getAddressFormats = null;
     private DeleteAddressFormat _deleteAddressFormat = null;
     private InsertAddressFormat _insertAddressFormat = null;
     private UpdateAddressFormat _updateAddressFormat = null;
     private SearchForIpnHistory _searchForIpnHistory = null;
     private InsertIpnHistory _insertIpnHistory = null;
     private DeleteExpiredSessions _deleteExpiredSessions = null;
     private TestDB _testDB = null;
     private SetConfigurationValue _setConfigurationValue = null;
     private GetConfigFiles _getConfigFiles = null;
     private GetReports _getReports = null;
     private ReloadReports _reloadReports = null;
     private GetFileContents _getFileContents = null;
     private GetFileContentsAsByteArray _getFileContentsAsByteArray = null;
     private TailFile _tailFile = null;
     private SaveFileContents _saveFileContents = null;
     private DeleteFile _deleteFile = null;
     private CopyFile _copyFile = null;
     private AddCategoriesToPromotion _addCategoriesToPromotion = null;
     private AddCouponsToPromotion _addCouponsToPromotion = null;
     private AddPromotionsToCoupon _addPromotionsToCoupon = null;
     private AddCustomersToPromotion _addCustomersToPromotion = null;
     private AddCustomerGroupsToPromotion _addCustomerGroupsToPromotion = null;
     private AddCustomersToPromotionPerOrdersMade _addCustomersToPromotionPerOrdersMade = null;
     private AddManufacturersToPromotion _addManufacturersToPromotion = null;
     private AddExpressionsToPromotion _addExpressionsToPromotion = null;
     private AddProductsToPromotion _addProductsToPromotion = null;
     private AddGiftCertificatesToPromotion _addGiftCertificatesToPromotion = null;
     private DeletePromotion _deletePromotion = null;
     private DeleteCoupon _deleteCoupon = null;
     private EditCoupon _editCoupon = null;
     private EditPromotion _editPromotion = null;
     private GetCouponsPerPromotion _getCouponsPerPromotion = null;
     private GetCoupons _getCoupons = null;
     private GetProductsPerPromotion _getProductsPerPromotion = null;
     private GetGiftCertificatesPerPromotion _getGiftCertificatesPerPromotion = null;
     private GetPromotion _getPromotion = null;
     private GetPromotions _getPromotions = null;
     private GetPromotionsCount _getPromotionsCount = null;
     private GetPromotionsPerCoupon _getPromotionsPerCoupon = null;
     private InsertCouponForPromotion _insertCouponForPromotion = null;
     private InsertCoupon _insertCoupon = null;
     private InsertPromotion _insertPromotion = null;
     private RemoveCategoriesFromPromotion _removeCategoriesFromPromotion = null;
     private RemoveCouponsFromPromotion _removeCouponsFromPromotion = null;
     private RemovePromotionsFromCoupon _removePromotionsFromCoupon = null;
     private RemoveCustomersFromPromotion _removeCustomersFromPromotion = null;
     private RemoveCustomerGroupsFromPromotion _removeCustomerGroupsFromPromotion = null;
     private RemoveManufacturersFromPromotion _removeManufacturersFromPromotion = null;
     private RemoveExpressionsFromPromotion _removeExpressionsFromPromotion = null;
     private RemoveProductsFromPromotion _removeProductsFromPromotion = null;
     private RemoveGiftCertificatesFromPromotion _removeGiftCertificatesFromPromotion = null;
     private GetCategoriesPerPromotion _getCategoriesPerPromotion = null;
     private GetCustomerGroupsPerPromotion _getCustomerGroupsPerPromotion = null;
     private GetManufacturersPerPromotion _getManufacturersPerPromotion = null;
     private GetRelatedProducts _getRelatedProducts = null;
     private GetRelatedProductsWithOptions _getRelatedProductsWithOptions = null;
     private RemoveRelatedProducts _removeRelatedProducts = null;
     private AddRelatedProducts _addRelatedProducts = null;
     private GetOrderForOrderId _getOrderForOrderId = null;
     private GetOrderForOrderIdAndLangId _getOrderForOrderIdAndLangId = null;
     private ReadFromUrl _readFromUrl = null;
     private EditOrderReturn _editOrderReturn = null;
     private InsertOrderReturn _insertOrderReturn = null;
     private DeleteOrderReturn _deleteOrderReturn = null;
     private GetOrderReturns _getOrderReturns = null;
     private SetEndpoint _setEndpoint = null;
     private GetMsgs _getMsgs = null;
     private GetCustomValidatorSet _getCustomValidatorSet = null;
     private GetHelpMsg _getHelpMsg = null;
     private GetSku _getSku = null;
     private GetSkus _getSkus = null;
     private DoesCustomerExistForEmail _doesCustomerExistForEmail = null;
     private GetAuditData _getAuditData = null;
     private ImportAudit _importAudit = null;
     private DeleteAuditData _deleteAuditData = null;
     private GetRolesPerSessionId _getRolesPerSessionId = null;
     private GetRolesPerUser _getRolesPerUser = null;
     private AddRolesToUser _addRolesToUser = null;
     private RemoveRolesFromUser _removeRolesFromUser = null;
     private RemovePanelsFromRole _removePanelsFromRole = null;
     private RemoveApiCallsFromRole _removeApiCallsFromRole = null;
     private AddPanelsToRole _addPanelsToRole = null;
     private AddApiCallsToRole _addApiCallsToRole = null;
     private GetPanelsPerRole _getPanelsPerRole = null;
     private GetApiCallsPerRole _getApiCallsPerRole = null;
     private GetAllPanels _getAllPanels = null;
     private GetAllApiCalls _getAllApiCalls = null;
     private GetAllRoles _getAllRoles = null;
     private EditRole _editRole = null;
     private InsertRole _insertRole = null;
     private DeleteRole _deleteRole = null;
     private DeletePanel _deletePanel = null;
     private DeleteApiCall _deleteApiCall = null;
     private EditPanel _editPanel = null;
     private EditApiCall _editApiCall = null;
     private GetPanel _getPanel = null;
     private GetApiCall _getApiCall = null;
     private GetRole _getRole = null;
     private InsertPanel _insertPanel = null;
     private InsertApiCall _insertApiCall = null;
     private InsertDigitalDownload _insertDigitalDownload = null;
     private SendTemplateEmailToCustomers _sendTemplateEmailToCustomers = null;
     private SendTemplateEmailToCustomersWithOptions _sendTemplateEmailToCustomersWithOptions = null;
     private SendTemplateEmailToCustomers1 _sendTemplateEmailToCustomers1 = null;
     private SendTemplateEmailToCustomers1WithOptions _sendTemplateEmailToCustomers1WithOptions = null;
     private InsertProductNotification _insertProductNotification = null;
     private DeleteProductNotification _deleteProductNotification = null;
     private GetCustomerForEmail _getCustomerForEmail = null;
     private InsertCustomerGroup _insertCustomerGroup = null;
     private InsertCustomerGroups _insertCustomerGroups = null;
     private UpdateCustomerGroup _updateCustomerGroup = null;
     private DeleteCustomerGroup _deleteCustomerGroup = null;
     private GetCustomerGroups _getCustomerGroups = null;
     private EditOrder _editOrder = null;
     private SetCreditCardDetailsOnOrder _setCreditCardDetailsOnOrder = null;
     private GetTopLevelCategories _getTopLevelCategories = null;
     private Custom _custom = null;
     private CustomSecure _customSecure = null;
     private GetBundleProductDetails _getBundleProductDetails = null;
     private GetTags _getTags = null;
     private GetTagGroups _getTagGroups = null;
     private GetTagGroupToTags _getTagGroupToTags = null;
     private InsertTag _insertTag = null;
     private InsertTags _insertTags = null;
     private InsertTagGroup _insertTagGroup = null;
     private InsertTagGroups _insertTagGroups = null;
     private InsertTagGroupToTags _insertTagGroupToTags = null;
     private UpdateTag _updateTag = null;
     private UpdateTagGroup _updateTagGroup = null;
     private DeleteTag _deleteTag = null;
     private DeleteTagGroup _deleteTagGroup = null;
     private GetTagGroupsPerCategory _getTagGroupsPerCategory = null;
     private GetCategoriesPerTagGroup _getCategoriesPerTagGroup = null;
     private GetCategoriesToTagGroups _getCategoriesToTagGroups = null;
     private AddTagGroupsToCategory _addTagGroupsToCategory = null;
     private AddCategoriesToTagGroups _addCategoriesToTagGroups = null;
     private RemoveTagGroupsFromCategory _removeTagGroupsFromCategory = null;
     private GetTagsPerProduct _getTagsPerProduct = null;
     private AddTagsToProduct _addTagsToProduct = null;
     private RemoveTagsFromProduct _removeTagsFromProduct = null;
     private UpdateCachedConfigurations _updateCachedConfigurations = null;
     private PublishProducts _publishProducts = null;
     private AddAllProductsToSearchEngine _addAllProductsToSearchEngine = null;
     private AddProductToSearchEngine _addProductToSearchEngine = null;
     private RemoveAllProductsFromSearchEngine _removeAllProductsFromSearchEngine = null;
     private RemoveProductFromSearchEngine _removeProductFromSearchEngine = null;
     private SetProductQuantity _setProductQuantity = null;
     private SetProductQuantityWithOptions _setProductQuantityWithOptions = null;
     private GetProductQuantity _getProductQuantity = null;
     private GetProductQuantityWithOptions _getProductQuantityWithOptions = null;
     private SetProductAvailability _setProductAvailability = null;
     private SetProductAvailabilityWithOptions _setProductAvailabilityWithOptions = null;
     private GetProductAvailability _getProductAvailability = null;
     private GetProductAvailabilityWithOptions _getProductAvailabilityWithOptions = null;
     private AddCustomDataToSession _addCustomDataToSession = null;
     private GetCustomDataFromSession _getCustomDataFromSession = null;
     private Execute _execute = null;
     private RunBatchJob _runBatchJob = null;
     private GetProductsToStores _getProductsToStores = null;
     private InsertProductsToStores _insertProductsToStores = null;
     private RemoveProductsToStores _removeProductsToStores = null;
     private InsertOrder _insertOrder = null;
     private GetWishLists _getWishLists = null;
     private InsertWishList _insertWishList = null;
     private DeleteWishList _deleteWishList = null;
     private InsertWishListItem _insertWishListItem = null;
     private DeleteWishListItem _deleteWishListItem = null;
     private GetAddresses _getAddresses = null;
     private GetAddressById _getAddressById = null;
     private InsertAddress _insertAddress = null;
     private UpdateAddress _updateAddress = null;
     private DeleteAddress _deleteAddress = null;
     private InsertCustomerTag _insertCustomerTag = null;
     private GetCustomerTags _getCustomerTags = null;
     private UpdateCustomerTag _updateCustomerTag = null;
     private DeleteCustomerTag _deleteCustomerTag = null;
     private GetCustomerTag _getCustomerTag = null;
     private DeleteCustomerTagForCustomer _deleteCustomerTagForCustomer = null;
     private GetCustomerTagForCustomer _getCustomerTagForCustomer = null;
     private GetCustomerTagForName _getCustomerTagForName = null;
     private GetCustomerTagsForCustomer _getCustomerTagsForCustomer = null;
     private InsertCustomerTagForCustomer _insertCustomerTagForCustomer = null;
     private InsertExpression _insertExpression = null;
     private UpdateExpression _updateExpression = null;
     private DeleteExpression _deleteExpression = null;
     private GetExpression _getExpression = null;
     private GetExpressionVariable _getExpressionVariable = null;
     private GetExpressionVariablesForExpression _getExpressionVariablesForExpression = null;
     private GetExpressionForName _getExpressionForName = null;
     private GetExpressions _getExpressions = null;
     private InsertExpressionVariables _insertExpressionVariables = null;
     private UpdateExpressionVariable _updateExpressionVariable = null;
     private DeleteExpressionVariable _deleteExpressionVariable = null;
     private DeleteExpressionVariablesForExpression _deleteExpressionVariablesForExpression = null;
     private GetExpressionsPerPromotion _getExpressionsPerPromotion = null;
     private EvaluateExpression _evaluateExpression = null;
     private SearchDigitalDownloads _searchDigitalDownloads = null;
     private ImportDigitalDownload _importDigitalDownload = null;
     private GetRewardPoints _getRewardPoints = null;
     private PointsAvailable _pointsAvailable = null;
     private DeletePoints _deletePoints = null;
     private AddPoints _addPoints = null;
     private GetFiles _getFiles = null;
     private GetSearchRules _getSearchRules = null;
     private DeletePaymentSchedule _deletePaymentSchedule = null;
     private GetPaymentSchedule _getPaymentSchedule = null;
     private GetPaymentSchedules _getPaymentSchedules = null;
     private InsertPaymentSchedule _insertPaymentSchedule = null;
     private UpdatePaymentSchedule _updatePaymentSchedule = null;
     private DeleteSubscription _deleteSubscription = null;
     private GetSubscription _getSubscription = null;
     private GetSubscriptions _getSubscriptions = null;
     private InsertSubscription _insertSubscription = null;
     private UpdateSubscription _updateSubscription = null;
     private CheckDataIntegrity _checkDataIntegrity = null;
     private ExportOrder _exportOrder = null;
     private SearchMsg _searchMsg = null;
     private GetMsgValue _getMsgValue = null;
     private DeleteMsg _deleteMsg = null;
     private InsertMsg _insertMsg = null;
     private UpdateMsg _updateMsg = null;
     private ImportMsgs _importMsgs = null;
     private ExportMsgs _exportMsgs = null;
     private AddAddressesToProduct _addAddressesToProduct = null;
     private RemoveAddressFromProduct _removeAddressFromProduct = null;
     private GetProductCountPerAddress _getProductCountPerAddress = null;
     private GetManufacturers _getManufacturers = null;
     private InsertProdAttrDesc _insertProdAttrDesc = null;
     private UpdateProdAttrDesc _updateProdAttrDesc = null;
     private DeleteProdAttrDesc _deleteProdAttrDesc = null;
     private GetProdAttrDesc _getProdAttrDesc = null;
     private GetProdAttrDescsForTemplate _getProdAttrDescsForTemplate = null;
     private GetProdAttrDescsForTemplates _getProdAttrDescsForTemplates = null;
     private GetProdAttrDescs _getProdAttrDescs = null;
     private InsertProdAttrTemplate _insertProdAttrTemplate = null;
     private UpdateProdAttrTemplate _updateProdAttrTemplate = null;
     private DeleteProdAttrTemplate _deleteProdAttrTemplate = null;
     private GetProdAttrTemplate _getProdAttrTemplate = null;
     private GetProdAttrTemplates _getProdAttrTemplates = null;
     private AddProdAttrDescsToTemplate _addProdAttrDescsToTemplate = null;
     private RemoveProdAttrDescsFromTemplate _removeProdAttrDescsFromTemplate = null;
     private GetTemplateCountPerProdAttrDesc _getTemplateCountPerProdAttrDesc = null;
     private GetProductCountPerProdAttrDesc _getProductCountPerProdAttrDesc = null;
     private UpdateProductsUsingProdAttrDesc _updateProductsUsingProdAttrDesc = null;
     private UpdateProductsUsingTemplates _updateProductsUsingTemplates = null;
     private GetProductCountPerTemplate _getProductCountPerTemplate = null;
     private CallPaymentModule _callPaymentModule = null;
     private GetBookings _getBookings = null;
     private DeleteBooking _deleteBooking = null;
     private InsertBooking _insertBooking = null;
     private UpdateBooking _updateBooking = null;
     private DeleteCatalog _deleteCatalog = null;
     private GetCatalogs _getCatalogs = null;
     private InsertCatalog _insertCatalog = null;
     private UpdateCatalog _updateCatalog = null;
     private GetCatalogById _getCatalogById = null;
     private InsertMiscItemType _insertMiscItemType = null;
     private UpdateMiscItemType _updateMiscItemType = null;
     private DeleteMiscItemType _deleteMiscItemType = null;
     private GetMiscItemTypes _getMiscItemTypes = null;
     private InsertMiscItems _insertMiscItems = null;
     private UpdateMiscItems _updateMiscItems = null;
     private DeleteMiscItem _deleteMiscItem = null;
     private GetMiscItems _getMiscItems = null;
     private CopyProductToStore _copyProductToStore = null;
     private GetProductsToSynchronize _getProductsToSynchronize = null;
     private GetConfigData _getConfigData = null;
     private UpdateConfigData _updateConfigData = null;
     private InsertConfigData _insertConfigData = null;
     private RemoveConfigData _removeConfigData = null;
     private GetKonaKartAdminVersion _getKonaKartAdminVersion = null;
     private ScaleImage _scaleImage = null;
     private AddImage _addImage = null;
     private RemoveImage _removeImage = null;
     private GetJobStatus _getJobStatus = null;
     private InsertOrderRefund _insertOrderRefund = null;
     private EditOrderRefund _editOrderRefund = null;
     private DeleteOrderRefund _deleteOrderRefund = null;
     private GetOrderRefunds _getOrderRefunds = null;
     private InsertKKEvent _insertKKEvent = null;
     private GetKKEvents _getKKEvents = null;
     private DeleteKKEvents _deleteKKEvents = null;
     private GetShippers _getShippers = null;
     private GetShipper _getShipper = null;
     private DeleteShipper _deleteShipper = null;
     private InsertShipper _insertShipper = null;
     private UpdateShipper _updateShipper = null;
     private InsertOrderShipment _insertOrderShipment = null;
     private EditOrderShipment _editOrderShipment = null;
     private DeleteOrderShipment _deleteOrderShipment = null;
     private GetOrderShipments _getOrderShipments = null;
     private InsertMiscPrices _insertMiscPrices = null;
     private DeleteMiscPrices _deleteMiscPrices = null;
     private GetMiscPrices _getMiscPrices = null;
     private UpdateMiscPrices _updateMiscPrices = null;
     private GetRMACode _getRMACode = null;
     private RemoveProductFromCatalog _removeProductFromCatalog = null;

    /**
     * Constructor
     * 
     * @deprecated From version 2.2.7.0, you should use the constructor that receives an
     *             AdminEngineConfig object
     * @throws KKAdminException
     */
    @Deprecated
    public KKAdminCustomEng() throws KKAdminException
    {
        AdminEngineConfig adEngineConf = new AdminEngineConfig();
        adEngineConf.setMode(AdminEngineConfig.MODE_SINGLE_STORE);
        adEngineConf.setStoreId(KKConstants.KONAKART_DEFAULT_STORE_ID);

        this.adminEngConf = adEngineConf;
        kkAdminEng = new KKAdmin(this.adminEngConf);
    }

    /**
     * Constructor
     * 
     * @param adEngineConf
     * @throws KKAdminException
     */
    public KKAdminCustomEng(AdminEngineConfig adEngineConf) throws KKAdminException
    {
        this.adminEngConf = adEngineConf;
        kkAdminEng = new KKAdmin(this.adminEngConf);
    }

/**
 * Common code to manage exceptions in the KKAdmin engine
 * 
 * @param e
 * @return Either the exception specified if it's already a KKAdminException or a new
 *         KKAdminException that wraps the specified exception
 */
protected KKAdminException manageThrowable(Throwable e)
{
    if (log.isDebugEnabled())
    {
        log.debug("KKAdmin threw an exception:", e);
    }
    if (e.getClass().getName().equals("com.konakartadmin.app.KKAdminException"))
     {
    return (com.konakartadmin.app.KKAdminException) (e);
    }
    return new KKAdminException(e);
}

    /**
     * Get the assigned KKAdmin Engine configuration.
     * 
     * @return the KKAdmin Engine configuration
     * @throws KKAdminException
     */
     public AdminEngineConfig getEngConf() throws KKAdminException
     {
         try
         {
            if (_getEngConf == null)
            {
                _getEngConf = new GetEngConf(kkAdminEng);
            }

            return _getEngConf.getEngConf();
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get the stores supported by the server.
     * 
     * @return an array of AdminStore objects
     * @throws KKAdminException
     */
     public AdminStore[] getStores() throws KKAdminException
     {
         try
         {
            if (_getStores == null)
            {
                _getStores = new GetStores(kkAdminEng);
            }

            return _getStores.getStores();
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get the stores in the mall supported by the server - Multi-Store Single DB only.
     * 
     * @param search
     *            search definition for stores
     * @param offset
     *            offset in results (for paging)
     * @param size
     *            maximum number of records to return from the offset (for paging)
     * @return an AdminStoreSearchResult object
     * @throws KKAdminException
     */
     public AdminStoreSearchResult getMallStores(AdminStoreSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getMallStores == null)
            {
                _getMallStores = new GetMallStores(kkAdminEng);
            }

            return _getMallStores.getMallStores(search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a new store into the mall by cloning a specified store.
     * <p>
     * Multi-Store Single DB only.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param options
     *            Some options for defining how to execute the clone
     * @param storeToCloneId
     *            the store the will be cloned to make the new store
     * @param newStore
     *            the new store
     * @throws KKAdminException
     */
     public void cloneStore(String sessionId, AdminNewStoreOptions options, String storeToCloneId, AdminStore newStore) throws KKAdminException
     {
         try
         {
            if (_cloneStore == null)
            {
                _cloneStore = new CloneStore(kkAdminEng);
            }

            _cloneStore.cloneStore(sessionId, options, storeToCloneId, newStore);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a new store into the mall.
     * <p>
     * Multi-Store Single DB only
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param store
     *            a new Store object to insert (all attributes should be filled in, including
     *            storeId)
     * @throws KKAdminException
     */
     public void insertMallStore(String sessionId, AdminStore store) throws KKAdminException
     {
         try
         {
            if (_insertMallStore == null)
            {
                _insertMallStore = new InsertMallStore(kkAdminEng);
            }

            _insertMallStore.insertMallStore(sessionId, store);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Does the specified store exist?
     * <p>
     * Multi-Store Single DB only
     * 
     * @param storeId
     *            The StoreId of the store to check
     * @return true if the store already exists, otherwise false
     * @throws KKAdminException
     */
     public boolean doesMallStoreExist(String storeId) throws KKAdminException
     {
         try
         {
            if (_doesMallStoreExist == null)
            {
                _doesMallStoreExist = new DoesMallStoreExist(kkAdminEng);
            }

            return _doesMallStoreExist.doesMallStoreExist(storeId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Deletes an AdminStore object. (It isn't actually deleted from the database - it is merely
     * marked as "deleted").
     * <p>
     * Multi-Store Single DB only
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param storeId
     *            the StoreId of the store to delete
     * @throws KKAdminException
     */
     public void deleteMallStore(String sessionId, String storeId) throws KKAdminException
     {
         try
         {
            if (_deleteMallStore == null)
            {
                _deleteMallStore = new DeleteMallStore(kkAdminEng);
            }

            _deleteMallStore.deleteMallStore(sessionId, storeId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Updates an AdminStore object. (All fields (except the storeId which is the key) can be
     * updated).
     * <p>
     * Multi-Store Single DB only
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param store
     *            The AdminStore object to update
     * @throws KKAdminException
     */
     public void updateMallStore(String sessionId, AdminStore store) throws KKAdminException
     {
         try
         {
            if (_updateMallStore == null)
            {
                _updateMallStore = new UpdateMallStore(kkAdminEng);
            }

            _updateMallStore.updateMallStore(sessionId, store);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the full path name of the konakartadmin.properties file as a String.
     * 
     * @return Returns the konakartAdminPropsFilePath.
     * @throws KKAdminException
     */
     public String getKonakartAdminPropsFilePath() throws KKAdminException
     {
         try
         {
            if (_getKonakartAdminPropsFilePath == null)
            {
                _getKonakartAdminPropsFilePath = new GetKonakartAdminPropsFilePath(kkAdminEng);
            }

            return _getKonakartAdminPropsFilePath.getKonakartAdminPropsFilePath();
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the property value from the properties file in the specified section
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param section
     *            Properties file section e.g. the first part of the property name ("konakart" or
     *            "torque"). Use constants in KonakartAdminConstants, eg.
     *            <code>KonakartAdminConstants.PROPERTY_FILE_SECTION_KONAKART</code> or
     *            <code>KonakartAdminConstants.PROPERTY_FILE_SECTION_TORQUE</code> etc
     * @param propertyName
     *            property name
     * @return Returns the value of the specified property as a String
     * @throws KKAdminException
     */
     public String getKonakartPropertyValue(String sessionId, String section, String propertyName) throws KKAdminException
     {
         try
         {
            if (_getKonakartPropertyValue == null)
            {
                _getKonakartPropertyValue = new GetKonakartPropertyValue(kkAdminEng);
            }

            return _getKonakartPropertyValue.getKonakartPropertyValue(sessionId, section, propertyName);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * For debugging the client - it writes out the String that's sent if we are logging at the
     * specified level or above
     * 
     * @param level
     *            the logging level (0=OFF,1=SEVERE,2=ERROR,4=WARNING,6=INFO,8=DEBUG)
     * @param message
     *            the message to log
     * @throws KKAdminException
     */
     public void logMsg(int level, String message) throws KKAdminException
     {
         try
         {
            if (_logMsg == null)
            {
                _logMsg = new LogMsg(kkAdminEng);
            }

            _logMsg.logMsg(level, message);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the default language. The default language is defined by the DEFAULT_LANGUAGE
     * configuration variable.
     * 
     * @return the default language
     * @throws KKAdminException
     */
     public AdminLanguage getDefaultLanguage() throws KKAdminException
     {
         try
         {
            if (_getDefaultLanguage == null)
            {
                _getDefaultLanguage = new GetDefaultLanguage(kkAdminEng);
            }

            return _getDefaultLanguage.getDefaultLanguage();
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the language referenced by the two letter lower case code (e.g. es, de, en)
     * 
     * @param code
     *            the language code
     * @return the language by language code
     * @throws KKAdminException
     */
     public AdminLanguage getLanguageByCode(String code) throws KKAdminException
     {
         try
         {
            if (_getLanguageByCode == null)
            {
                _getLanguageByCode = new GetLanguageByCode(kkAdminEng);
            }

            return _getLanguageByCode.getLanguageByCode(code);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the language referenced by language ID. If the language is KKConstants.NOT_SET then
     * the default language is returned.
     * 
     * @param id
     *            the language id
     * @return the language object with the specified language id or null if no such language is
     *         found.
     * @throws KKAdminException
     */
     public AdminLanguage getLanguageById(int id) throws KKAdminException
     {
         try
         {
            if (_getLanguageById == null)
            {
                _getLanguageById = new GetLanguageById(kkAdminEng);
            }

            return _getLanguageById.getLanguageById(id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Retrieves the language for the locale
     * 
     * @param locale
     *            a 2 or 4 character locale (eg. en, de, es)
     * @return Returns the language of the matching language or the default language if no matching
     *         language was found.
     * @throws KKAdminException
     */
     public AdminLanguage getLanguageForLocale(String locale) throws KKAdminException
     {
         try
         {
            if (_getLanguageForLocale == null)
            {
                _getLanguageForLocale = new GetLanguageForLocale(kkAdminEng);
            }

            return _getLanguageForLocale.getLanguageForLocale(locale);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Retrieves the language Id for the locale
     * 
     * @param locale
     *            a 2 or 4 character locale (eg. en, de, es)
     * @return Returns the languageId of the matching language or the languageId of the default
     *         language if no matching language was found.
     * @throws KKAdminException
     */
     public int getLanguageIdForLocale(String locale) throws KKAdminException
     {
         try
         {
            if (_getLanguageIdForLocale == null)
            {
                _getLanguageIdForLocale = new GetLanguageIdForLocale(kkAdminEng);
            }

            return _getLanguageIdForLocale.getLanguageIdForLocale(locale);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get all of the languages in the database. Does not return the display-only languages.
     * 
     * @return Returns all of the languages
     * @throws KKAdminException
     */
     public AdminLanguage[] getAllLanguages() throws KKAdminException
     {
         try
         {
            if (_getAllLanguages == null)
            {
                _getAllLanguages = new GetAllLanguages(kkAdminEng);
            }

            return _getAllLanguages.getAllLanguages();
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This returns an AdminLanguageSearchResult object. It allows you to search criteria for code
     * and name and also to define whether or not you want to retrieve the display-only languages in
     * addition to the data languages by setting the includeDisplayOnlyLangs attribute of the
     * AdmnLanguageSearch object to true. The default behaviour is not to return the display-only
     * languages.
     * 
     * @param search
     *            the search object that defines the search parameters and sort order
     * @return Returns an AdminLanguageSearchResult
     * @throws KKAdminException
     */
     public AdminLanguageSearchResult getLanguages(AdminLanguageSearch search) throws KKAdminException
     {
         try
         {
            if (_getLanguages == null)
            {
                _getLanguages = new GetLanguages(kkAdminEng);
            }

            return _getLanguages.getLanguages(search);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a Language.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param lang
     *            A Language object
     * @return returns the id of the inserted Language
     * @throws KKAdminException
     */
     public int insertLanguage(String sessionId, AdminLanguage lang) throws KKAdminException
     {
         try
         {
            if (_insertLanguage == null)
            {
                _insertLanguage = new InsertLanguage(kkAdminEng);
            }

            return _insertLanguage.insertLanguage(sessionId, lang);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a Language.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param langId
     *            A Language id
     * @return returns the id of the deleted Language
     * @throws KKAdminException
     */
     public int deleteLanguage(String sessionId, int langId) throws KKAdminException
     {
         try
         {
            if (_deleteLanguage == null)
            {
                _deleteLanguage = new DeleteLanguage(kkAdminEng);
            }

            return _deleteLanguage.deleteLanguage(sessionId, langId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update a Language.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param lang
     *            A Language object
     * @return returns the id of the updated Language
     * @throws KKAdminException
     */
     public int updateLanguage(String sessionId, AdminLanguage lang) throws KKAdminException
     {
         try
         {
            if (_updateLanguage == null)
            {
                _updateLanguage = new UpdateLanguage(kkAdminEng);
            }

            return _updateLanguage.updateLanguage(sessionId, lang);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * The default currency is referenced by a configuration variable called DEFAULT_CURRENCY. If
     * this isn't found then we return the currency in the currency table with the lowest id.
     * 
     * @return Returns a currency object
     * @throws KKAdminException
     */
     public AdminCurrency getDefaultCurrency() throws KKAdminException
     {
         try
         {
            if (_getDefaultCurrency == null)
            {
                _getDefaultCurrency = new GetDefaultCurrency(kkAdminEng);
            }

            return _getDefaultCurrency.getDefaultCurrency();
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Return the currency object for the specified currency code.
     * 
     * @param currencyCode
     *            the currency Code to look up
     * @return Returns a currency object
     * @throws KKAdminException
     */
     public AdminCurrency getCurrency(String currencyCode) throws KKAdminException
     {
         try
         {
            if (_getCurrency == null)
            {
                _getCurrency = new GetCurrency(kkAdminEng);
            }

            return _getCurrency.getCurrency(currencyCode);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an AdminCurrencySearchResult object.
     * 
     * @param search
     *            the search object that defines the search parameters and sort order
     * @return Returns an AdminLanguageSearchResult
     * @throws KKAdminException
     */
     public AdminCurrencySearchResult getCurrencies(AdminCurrencySearch search) throws KKAdminException
     {
         try
         {
            if (_getCurrencies == null)
            {
                _getCurrencies = new GetCurrencies(kkAdminEng);
            }

            return _getCurrencies.getCurrencies(search);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a Currency.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param currId
     *            A currency id
     * @return returns the id of the deleted currency
     * @throws KKAdminException
     */
     public int deleteCurrency(String sessionId, int currId) throws KKAdminException
     {
         try
         {
            if (_deleteCurrency == null)
            {
                _deleteCurrency = new DeleteCurrency(kkAdminEng);
            }

            return _deleteCurrency.deleteCurrency(sessionId, currId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a Currency.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param curr
     *            A currency object
     * @return returns the id of the inserted currency
     * @throws KKAdminException
     */
     public int insertCurrency(String sessionId, AdminCurrency curr) throws KKAdminException
     {
         try
         {
            if (_insertCurrency == null)
            {
                _insertCurrency = new InsertCurrency(kkAdminEng);
            }

            return _insertCurrency.insertCurrency(sessionId, curr);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update a Currency.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param curr
     *            A currency object
     * @return returns the id of the updated currency
     * @throws KKAdminException
     */
     public int updateCurrency(String sessionId, AdminCurrency curr) throws KKAdminException
     {
         try
         {
            if (_updateCurrency == null)
            {
                _updateCurrency = new UpdateCurrency(kkAdminEng);
            }

            return _updateCurrency.updateCurrency(sessionId, curr);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an <code>AdminOrderStatusNameSearchResult</code> object.
     * 
     * @param search
     *            the search object that defines the search parameters and sort order. If
     *            <code>languageId</code> is not set (or set to
     *            <code>AdminLanguageMgr.DEFAULT_LANG</code>) the default language is used. If the
     *            <code>languageId</code> is set to <code>AdminLanguageMgr.ALL_LANGUAGES</code> all
     *            languages are returned.
     * @return Returns an <code>AdminOrderStatusNameSearchResult</code>
     * @throws KKAdminException
     */
     public AdminOrderStatusNameSearchResult getOrderStatusNames(AdminOrderStatusNameSearch search) throws KKAdminException
     {
         try
         {
            if (_getOrderStatusNames == null)
            {
                _getOrderStatusNames = new GetOrderStatusNames(kkAdminEng);
            }

            return _getOrderStatusNames.getOrderStatusNames(search);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete an OrderStatusName object.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param id
     *            An OrderStatus id
     * @return returns the id of the deleted OrderStatusName object
     * @throws KKAdminException
     */
     public int deleteOrderStatusName(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_deleteOrderStatusName == null)
            {
                _deleteOrderStatusName = new DeleteOrderStatusName(kkAdminEng);
            }

            return _deleteOrderStatusName.deleteOrderStatusName(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an OrderStatusName object. You may select the order status id or alternatively set the
     * id of the object to -1 in order for the system to assign an Id. An exception will be thrown
     * if the selected id already exists.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param obj
     *            An OrderStatusName object
     * @return returns the order status id of the inserted object
     * @throws KKAdminException
     */
     public int insertOrderStatusName(String sessionId, AdminOrderStatusName obj) throws KKAdminException
     {
         try
         {
            if (_insertOrderStatusName == null)
            {
                _insertOrderStatusName = new InsertOrderStatusName(kkAdminEng);
            }

            return _insertOrderStatusName.insertOrderStatusName(sessionId, obj);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an array of AdminOrderStatusName objects. This method is useful to insert an object
     * for each language defined in the system. All members of the array must have the same order
     * status id. You may select the order status id or alternatively set the id of the objects to
     * -1 in order for the system to assign an Id. An exception will be thrown if the selected id
     * already exists.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param ordStats
     *            An AdminOrderStatusName array object
     * @return returns the order status id of the inserted AdminOrderStatusName objects
     * @throws KKAdminException
     */
     public int insertOrderStatusNames(String sessionId, AdminOrderStatusName[] ordStats) throws KKAdminException
     {
         try
         {
            if (_insertOrderStatusNames == null)
            {
                _insertOrderStatusNames = new InsertOrderStatusNames(kkAdminEng);
            }

            return _insertOrderStatusNames.insertOrderStatusNames(sessionId, ordStats);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update an OrderStatusName object.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param obj
     *            An OrderStatusName object
     * @return returns the id of the updated object
     * @throws KKAdminException
     */
     public int updateOrderStatusName(String sessionId, AdminOrderStatusName obj) throws KKAdminException
     {
         try
         {
            if (_updateOrderStatusName == null)
            {
                _updateOrderStatusName = new UpdateOrderStatusName(kkAdminEng);
            }

            return _updateOrderStatusName.updateOrderStatusName(sessionId, obj);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This returns an AdminCountrySearchResult object.
     * 
     * @param search
     *            an AdminCountrySearch object
     * @param offset
     *            the offset in the database
     * @param size
     *            the number of records from the specified offset
     * @return Returns an AdminCountrySearchResult object
     * @throws KKAdminException
     */
     public AdminCountrySearchResult getCountries(AdminCountrySearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getCountries == null)
            {
                _getCountries = new GetCountries(kkAdminEng);
            }

            return _getCountries.getCountries(search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a Country.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param id
     *            A Country id
     * @return returns the id of the deleted Country
     * @throws KKAdminException
     */
     public int deleteCountry(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_deleteCountry == null)
            {
                _deleteCountry = new DeleteCountry(kkAdminEng);
            }

            return _deleteCountry.deleteCountry(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an AdminCountry object.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param country
     *            An AdminCountry object
     * @return returns the id of the inserted AdminCountry object
     * @throws KKAdminException
     */
     public int insertCountry(String sessionId, AdminCountry country) throws KKAdminException
     {
         try
         {
            if (_insertCountry == null)
            {
                _insertCountry = new InsertCountry(kkAdminEng);
            }

            return _insertCountry.insertCountry(sessionId, country);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update an AdminCountry object.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param country
     *            An AdminCountry object
     * @return returns the id of the updated AdminCountry object
     * @throws KKAdminException
     */
     public int updateCountry(String sessionId, AdminCountry country) throws KKAdminException
     {
         try
         {
            if (_updateCountry == null)
            {
                _updateCountry = new UpdateCountry(kkAdminEng);
            }

            return _updateCountry.updateCountry(sessionId, country);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Send an email as defined in the specified AdminEmail object.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param adminEmailData
     *            the Email object to fill out to define the email to send
     * @return true if the email is sent successfully, and exception is raised in other cases
     * @throws KKAdminException
     *             typically when the email could not be sent
     */
     public boolean sendEmail(String sessionId, AdminEmail adminEmailData) throws KKAdminException
     {
         try
         {
            if (_sendEmail == null)
            {
                _sendEmail = new SendEmail(kkAdminEng);
            }

            return _sendEmail.sendEmail(sessionId, adminEmailData);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns a count of the Orders with the specified status.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param orderStatus
     *            the order status Id
     * @return the count of the number of orders with the specified status.
     * @throws KKAdminException
     */
     public int getOrdersCount(String sessionId, int orderStatus) throws KKAdminException
     {
         try
         {
            if (_getOrdersCount == null)
            {
                _getOrdersCount = new GetOrdersCount(kkAdminEng);
            }

            return _getOrdersCount.getOrdersCount(sessionId, orderStatus);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns a set of Orders matching the specified search criteria.
     * <p>
     * The orders returned are sparsely-populated with:
     * <ul>
     * <li>id</li>
     * <li>order number</li>
     * <li>customer id</li>
     * <li>customer name</li>
     * <li>street address</li>
     * <li>city</li>
     * <li>formatted total price including tax</li>
     * <li>purchase date</li>
     * <li>order status id</li>
     * <li>order status text</li>
     * <li>custom1</li>
     * <li>custom2</li>
     * <li>custom3</li>
     * <li>custom4</li>
     * <li>custom5</li>
     * </ul>
     * <p>
     * The returned orders may be sorted by:
     * <ul>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOMERS_NAME_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOMERS_NAME_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ORDER_ID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ORDER_ID_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_PURCHASED_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_PURCHASED_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ORDER_TOTAL_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ORDER_TOTAL_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ORDER_STATUS_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ORDER_STATUS_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ORDER_NUMBER_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ORDER_NUMBER_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CREATOR_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CREATOR_DESCENDING</li>
     * </ul>
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param search
     *            the Orders search criteria object (String sessionId, can be null)
     * @param offset
     *            offset in the database
     * @param size
     *            max number of records to return from the offset
     * @param languageId
     *            the language Id - or it could be
     *            com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to use the default language
     * @return A set of Orders that match the specified search criteria within an
     *         AdminOrderSearchResult object
     * @throws KKAdminException
     */
     public AdminOrderSearchResult getOrdersLite(String sessionId, AdminOrderSearch search, int offset, int size, int languageId) throws KKAdminException
     {
         try
         {
            if (_getOrdersLite == null)
            {
                _getOrdersLite = new GetOrdersLite(kkAdminEng);
            }

            return _getOrdersLite.getOrdersLite(sessionId, search, offset, size, languageId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns a set of Orders that match the search criteria.
     * <p>
     * The returned orders may be sorted by:
     * <ul>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOMERS_NAME_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOMERS_NAME_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ORDER_ID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ORDER_ID_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_PURCHASED_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_PURCHASED_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ORDER_TOTAL_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ORDER_TOTAL_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ORDER_STATUS_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ORDER_STATUS_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ORDER_NUMBER_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ORDER_NUMBER_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CREATOR_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CREATOR_DESCENDING</li>
     * </ul>
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param search
     *            the definition of the search for orders - can be null
     * @param offset
     *            the offset in the database
     * @param size
     *            the number of records from the specified offset
     * @param languageId
     *            the language Id - or it could be
     *            com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to use the default language
     * @return a set of orders matching the search criteria within an AdminOrderSearchResult object
     * @throws KKAdminException
     */
     public AdminOrderSearchResult getOrders(String sessionId, AdminOrderSearch search, int offset, int size, int languageId) throws KKAdminException
     {
         try
         {
            if (_getOrders == null)
            {
                _getOrders = new GetOrders(kkAdminEng);
            }

            return _getOrders.getOrders(sessionId, search, offset, size, languageId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns a set of Orders created since the specified date.
     * 
     * @deprecated From version 2.2.4.0 you should use getOrders().
     * @param sessionId
     *            The session Id of the logged in user
     * @param since
     *            the date to use to define the range of orders to return
     * @param languageId
     *            the language Id - or it could be
     *            com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to use the default language
     * @return a set of orders placed since the specified date. If there are no orders then an empty
     *         array is returned
     * @throws KKAdminException
     */
    @Deprecated
     public AdminOrder[] getOrdersCreatedSince(String sessionId, Calendar since, int languageId) throws KKAdminException
     {
         try
         {
            if (_getOrdersCreatedSince == null)
            {
                _getOrdersCreatedSince = new GetOrdersCreatedSince(kkAdminEng);
            }

            return _getOrdersCreatedSince.getOrdersCreatedSince(sessionId, since, languageId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update the order status with optional comments. If the locale attribute of the order is not
     * null, it will be used to read the email template in the customer's preferred language.
     * Otherwise the default language will be used.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param orderId
     *            the order id
     * @param orderStatus
     *            the new Order Status
     * @param comments
     *            if not null, these comments are added
     * @param notifyCustomer
     *            if true the customer will be notified by email
     * @param updateOrder
     *            contains order update data such as who updated the order
     * @throws KKAdminException
     */
     public void updateOrder(String sessionId, int orderId, int orderStatus, String comments, boolean notifyCustomer, AdminOrderUpdate updateOrder) throws KKAdminException
     {
         try
         {
            if (_updateOrder == null)
            {
                _updateOrder = new UpdateOrder(kkAdminEng);
            }

            _updateOrder.updateOrder(sessionId, orderId, orderStatus, comments, notifyCustomer, updateOrder);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update the order status with optional comments. If the locale attribute of the order is not
     * null, it will be used to read the email template in the customer's preferred language.
     * Otherwise the default language will be used.
     * 
     * @deprecated From version 6.2.0.0 you should use {@link #updateOrder} instead.
     * @param sessionId
     *            The session Id of the logged in user
     * @param orderId
     *            the order id
     * @param orderStatus
     *            the new Order Status
     * @param comments
     *            if not null, these comments are added
     * @param notifyCustomer
     *            if true the customer will be notified by email
     * @throws KKAdminException
     */
    @Deprecated
     public void updateOrderStatus(String sessionId, int orderId, int orderStatus, String comments, boolean notifyCustomer) throws KKAdminException
     {
         try
         {
            if (_updateOrderStatus == null)
            {
                _updateOrderStatus = new UpdateOrderStatus(kkAdminEng);
            }

            _updateOrderStatus.updateOrderStatus(sessionId, orderId, orderStatus, comments, notifyCustomer);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an array of AdminOrderStatusNames for the specified languageId. Use
     * AdminLanguageMgr.ALL_LANGUAGES to retrieve the Order Status Names for All languages.
     * 
     * @param languageId
     * @return an array of AdminOrderStatusNames for the specified languageId.
     * @throws KKAdminException
     */
     public AdminOrderStatusName[] getAllOrderStatuses(int languageId) throws KKAdminException
     {
         try
         {
            if (_getAllOrderStatuses == null)
            {
                _getAllOrderStatuses = new GetAllOrderStatuses(kkAdminEng);
            }

            return _getAllOrderStatuses.getAllOrderStatuses(languageId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This returns an array of all the address formats
     * 
     * @return Returns an array of all the address formats
     * @throws KKAdminException
     */
     public AdminAddressFormat[] getAllAddressFormats() throws KKAdminException
     {
         try
         {
            if (_getAllAddressFormats == null)
            {
                _getAllAddressFormats = new GetAllAddressFormats(kkAdminEng);
            }

            return _getAllAddressFormats.getAllAddressFormats();
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Retrieve the HTML string for the specified HTML type, in the specified language. Typically
     * used to get a section of formatted HTML that can be inserted into a page of some kind.
     * <p>
     * "HTML types" can be one of:
     * <ul>
     * <li>KKConstants.HTML_ORDER_DETAIL (= 1)</li>
     * <li>KKConstants.HTML_ORDER_INVOICE (= 2)</li>
     * <li>KKConstants.HTML_ORDER_PACKING_LIST (= 3)</li>
     * <li>KKConstants.HTML_NAMED_TEMPLATE (= 9)</li>
     * </ul>
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param htmlType
     *            the HTML type eg. KonakartAdminConstants.HTML_ORDER_DETAIL
     * @param id
     *            a record Id the use is dependent on the htmlType
     * @param languageId
     *            the languageId for the language that the HTML should be in
     * @param arg1
     *            an argument whose use is dependent on the htmlType
     * @return a String of HTML
     * @throws KKAdminException
     */
     public String getHtml(String sessionId, int htmlType, int id, int languageId, String arg1) throws KKAdminException
     {
         try
         {
            if (_getHtml == null)
            {
                _getHtml = new GetHtml(kkAdminEng);
            }

            return _getHtml.getHtml(sessionId, htmlType, id, languageId, arg1);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Create the PDF document and return the URL, File name or bytes as defined by the input
     * options.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param options
     *            the options that define the PDF report to be produced and what is returned from
     *            this interface.
     * @return a PdfResult object containing information that is defined in the options specified on
     *         input.
     * @throws KKAdminException
     */
     public PdfResult getPdf(String sessionId, PdfOptions options) throws KKAdminException
     {
         try
         {
            if (_getPdf == null)
            {
                _getPdf = new GetPdf(kkAdminEng);
            }

            return _getPdf.getPdf(sessionId, options);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns a set of Customers that match the search criteria.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param search
     *            the definition of the search for customers - can be null
     * @param offset
     *            the offset in the database
     * @param size
     *            the number of records from the specified offset
     * @return a set of customers matching the search criteria within an AdminCustomerSearchResult
     *         object
     * @throws KKAdminException
     */
     public AdminCustomerSearchResult getCustomers(String sessionId, AdminCustomerSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getCustomers == null)
            {
                _getCustomers = new GetCustomers(kkAdminEng);
            }

            return _getCustomers.getCustomers(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns a set of "Lite" Customers that match the search criteria. Only a few attributes are
     * populated on "Lite" Customers.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param search
     *            the definition of the search for customers - can be null
     * @param offset
     *            the offset in the database
     * @param size
     *            the number of records from the specified offset
     * @return a set of customers matching the search criteria within an AdminCustomerSearchResult
     *         object
     * @throws KKAdminException
     */
     public AdminCustomerSearchResult getCustomersLite(String sessionId, AdminCustomerSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getCustomersLite == null)
            {
                _getCustomersLite = new GetCustomersLite(kkAdminEng);
            }

            return _getCustomersLite.getCustomersLite(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the customer object for the customer defined by the given id.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param customerId
     *            The numeric id of the customer
     * @return Customer Object or Null if the customer doesn't exist.
     * @throws KKAdminException
     */
     public AdminCustomer getCustomerForId(String sessionId, int customerId) throws KKAdminException
     {
         try
         {
            if (_getCustomerForId == null)
            {
                _getCustomerForId = new GetCustomerForId(kkAdminEng);
            }

            return _getCustomerForId.getCustomerForId(sessionId, customerId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get an array of product notifications for the customer.
     * 
     * @param sessionId
     *            session Id
     * @param customerId
     *            Id of the customer whose product notifications will be returned
     * @return an array of product notifications for the customer
     * @throws KKAdminException
     */
     public AdminProductNotification[] getProductNotificationsForCustomer(String sessionId, int customerId) throws KKAdminException
     {
         try
         {
            if (_getProductNotificationsForCustomer == null)
            {
                _getProductNotificationsForCustomer = new GetProductNotificationsForCustomer(kkAdminEng);
            }

            return _getProductNotificationsForCustomer.getProductNotificationsForCustomer(sessionId, customerId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update a Customer.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param customer
     *            A customer
     * @throws KKAdminException
     */
     public void updateCustomer(String sessionId, AdminCustomer customer) throws KKAdminException
     {
         try
         {
            if (_updateCustomer == null)
            {
                _updateCustomer = new UpdateCustomer(kkAdminEng);
            }

            _updateCustomer.updateCustomer(sessionId, customer);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a Customer.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param custId
     *            A customer id
     * @return returns the id of the deleted customer
     * @throws KKAdminException
     */
     public int deleteCustomer(String sessionId, int custId) throws KKAdminException
     {
         try
         {
            if (_deleteCustomer == null)
            {
                _deleteCustomer = new DeleteCustomer(kkAdminEng);
            }

            return _deleteCustomer.deleteCustomer(sessionId, custId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Deletes an order and all associated records (eg addresses, status history etc).
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param ordId
     *            Order id of the order to delete
     * @return return the order id of the deleted order
     * @throws KKAdminException
     */
     public int deleteOrder(String sessionId, int ordId) throws KKAdminException
     {
         try
         {
            if (_deleteOrder == null)
            {
                _deleteOrder = new DeleteOrder(kkAdminEng);
            }

            return _deleteOrder.deleteOrder(sessionId, ordId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns a count of the number of Customers matching the specified search.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param search
     *            the definition of the search for customers - can be null
     * @return A count of the number of Customers
     * @throws KKAdminException
     */
     public int getCustomersCount(String sessionId, AdminCustomerSearch search) throws KKAdminException
     {
         try
         {
            if (_getCustomersCount == null)
            {
                _getCustomersCount = new GetCustomersCount(kkAdminEng);
            }

            return _getCustomersCount.getCustomersCount(sessionId, search);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Return the count of the number of customers who haven't placed an order since the
     * lastOrderDate passed in as a parameter.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param lastOrderDate
     *            The date when the last order was placed
     * @return The customer count
     * @throws KKAdminException
     */
     public int getCustomersCountWhoHaventPlacedAnOrderSince(String sessionId, Calendar lastOrderDate) throws KKAdminException
     {
         try
         {
            if (_getCustomersCountWhoHaventPlacedAnOrderSince == null)
            {
                _getCustomersCountWhoHaventPlacedAnOrderSince = new GetCustomersCountWhoHaventPlacedAnOrderSince(kkAdminEng);
            }

            return _getCustomersCountWhoHaventPlacedAnOrderSince.getCustomersCountWhoHaventPlacedAnOrderSince(sessionId, lastOrderDate);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Return the count of the number of customers who have placed an order since the lastOrderDate
     * passed in as a parameter.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param lastOrderDate
     *            The date when the last order was placed
     * @return The customer count
     * @throws KKAdminException
     */
     public int getCustomersCountWhoHavePlacedAnOrderSince(String sessionId, Calendar lastOrderDate) throws KKAdminException
     {
         try
         {
            if (_getCustomersCountWhoHavePlacedAnOrderSince == null)
            {
                _getCustomersCountWhoHavePlacedAnOrderSince = new GetCustomersCountWhoHavePlacedAnOrderSince(kkAdminEng);
            }

            return _getCustomersCountWhoHavePlacedAnOrderSince.getCustomersCountWhoHavePlacedAnOrderSince(sessionId, lastOrderDate);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an array of all Country objects in the database. The objects are fully-populated.
     * 
     * @return Returns an array of Countries - fully-populated
     * @throws KKAdminException
     */
     public AdminCountry[] getAllCountriesFull() throws KKAdminException
     {
         try
         {
            if (_getAllCountriesFull == null)
            {
                _getAllCountriesFull = new GetAllCountriesFull(kkAdminEng);
            }

            return _getAllCountriesFull.getAllCountriesFull();
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an array of all AdminTaxClass objects in the database. The objects are
     * fully-populated.
     * 
     * @return Returns an array of AdminTaxClass objects - fully-populated
     * @throws KKAdminException
     */
     public AdminTaxClass[] getAllTaxClassesFull() throws KKAdminException
     {
         try
         {
            if (_getAllTaxClassesFull == null)
            {
                _getAllTaxClassesFull = new GetAllTaxClassesFull(kkAdminEng);
            }

            return _getAllTaxClassesFull.getAllTaxClassesFull();
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an array of fully-populated AdminZones for the specified countryId.
     * 
     * @param countryId
     *            the countryId
     * @return Returns an array of AdminZones for the specified countryId - fully-populated
     * @throws KKAdminException
     */
     public AdminZone[] getZonesById(int countryId) throws KKAdminException
     {
         try
         {
            if (_getZonesById == null)
            {
                _getZonesById = new GetZonesById(kkAdminEng);
            }

            return _getZonesById.getZonesById(countryId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an array of all GeoZones in the database.
     * 
     * @return Returns an array of all GeoZones - fully-populated
     * @throws KKAdminException
     */
     public AdminGeoZone[] getAllGeoZones() throws KKAdminException
     {
         try
         {
            if (_getAllGeoZones == null)
            {
                _getAllGeoZones = new GetAllGeoZones(kkAdminEng);
            }

            return _getAllGeoZones.getAllGeoZones();
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This returns an AdminGeoZoneSearchResult object.
     * 
     * @param search
     *            the definition of the search - can be null
     * @param offset
     *            the offset in the database
     * @param size
     *            the number of records from the specified offset
     * @return Returns an AdminGeoZoneSearchResult object
     * @throws KKAdminException
     */
     public AdminGeoZoneSearchResult getGeoZones(AdminGeoZoneSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getGeoZones == null)
            {
                _getGeoZones = new GetGeoZones(kkAdminEng);
            }

            return _getGeoZones.getGeoZones(search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a GeoZone. The Geo Zone (or "Tax Area") with the specified Id is deleted and, to
     * maintain data integrity, so are any tax rates and tax area to zone mappings that use the geo
     * zone.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param id
     *            A GeoZone id
     * @return returns the id of the deleted GeoZone
     * @throws KKAdminException
     */
     public int deleteGeoZone(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_deleteGeoZone == null)
            {
                _deleteGeoZone = new DeleteGeoZone(kkAdminEng);
            }

            return _deleteGeoZone.deleteGeoZone(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an AdminGeoZone object.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param insertObj
     *            An AdminGeoZone object
     * @return returns the id of the inserted AdminGeoZone object
     * @throws KKAdminException
     */
     public int insertGeoZone(String sessionId, AdminGeoZone insertObj) throws KKAdminException
     {
         try
         {
            if (_insertGeoZone == null)
            {
                _insertGeoZone = new InsertGeoZone(kkAdminEng);
            }

            return _insertGeoZone.insertGeoZone(sessionId, insertObj);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update an AdminGeoZone object.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param updateObj
     *            An AdminGeoZone object
     * @return returns the id of the updated AdminGeoZone object
     * @throws KKAdminException
     */
     public int updateGeoZone(String sessionId, AdminGeoZone updateObj) throws KKAdminException
     {
         try
         {
            if (_updateGeoZone == null)
            {
                _updateGeoZone = new UpdateGeoZone(kkAdminEng);
            }

            return _updateGeoZone.updateGeoZone(sessionId, updateObj);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This returns an AdminSubZoneSearchResult object.
     * 
     * @param search
     *            the definition of the search - can be null
     * @param offset
     *            the offset in the database
     * @param size
     *            the number of records from the specified offset
     * @return Returns an AdminZoneSearchResult object
     * @throws KKAdminException
     */
     public AdminSubZoneSearchResult getSubZones(AdminSubZoneSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getSubZones == null)
            {
                _getSubZones = new GetSubZones(kkAdminEng);
            }

            return _getSubZones.getSubZones(search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a SubZone.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param id
     *            A SubZone id
     * @return returns the id of the deleted Zone
     * @throws KKAdminException
     */
     public int deleteSubZone(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_deleteSubZone == null)
            {
                _deleteSubZone = new DeleteSubZone(kkAdminEng);
            }

            return _deleteSubZone.deleteSubZone(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an AdminSubZone object.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param insertObj
     *            An AdminSubZone object
     * @return returns the id of the inserted AdminSubZone object
     * @throws KKAdminException
     */
     public int insertSubZone(String sessionId, AdminSubZone insertObj) throws KKAdminException
     {
         try
         {
            if (_insertSubZone == null)
            {
                _insertSubZone = new InsertSubZone(kkAdminEng);
            }

            return _insertSubZone.insertSubZone(sessionId, insertObj);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update an AdminSubZone object.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param updateObj
     *            An AdminSubZone object
     * @return returns the id of the updated AdminSubZone object
     * @throws KKAdminException
     */
     public int updateSubZone(String sessionId, AdminSubZone updateObj) throws KKAdminException
     {
         try
         {
            if (_updateSubZone == null)
            {
                _updateSubZone = new UpdateSubZone(kkAdminEng);
            }

            return _updateSubZone.updateSubZone(sessionId, updateObj);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get the configuration values for the given keys.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param validationKeys
     *            an array of configuration keys
     * @return Returns an array of Configuration key values - typically used for validation on the
     *         UI
     * @throws KKAdminException
     */
     public String[] getConfigurationInfo(String sessionId, String[] validationKeys) throws KKAdminException
     {
         try
         {
            if (_getConfigurationInfo == null)
            {
                _getConfigurationInfo = new GetConfigurationInfo(kkAdminEng);
            }

            return _getConfigurationInfo.getConfigurationInfo(sessionId, validationKeys);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an array of all the Configuration objects.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @return An array of Configuration objects
     * @throws KKAdminException
     */
     public KKConfiguration[] getAllConfigurations(String sessionId) throws KKAdminException
     {
         try
         {
            if (_getAllConfigurations == null)
            {
                _getAllConfigurations = new GetAllConfigurations(kkAdminEng);
            }

            return _getAllConfigurations.getAllConfigurations(sessionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an array of all the Configuration Group objects.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @return An array of Configuration Group objects
     * @throws KKAdminException
     */
     public AdminConfigurationGroup[] getAllConfigurationGroups(String sessionId) throws KKAdminException
     {
         try
         {
            if (_getAllConfigurationGroups == null)
            {
                _getAllConfigurationGroups = new GetAllConfigurationGroups(kkAdminEng);
            }

            return _getAllConfigurationGroups.getAllConfigurationGroups(sessionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a configuration group.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param configGroup
     *            an AdminConfigurationGroup object to insert
     * @return Returns the primary key of the configuration group that was inserted
     * @throws KKAdminException
     */
     public int insertConfigurationGroup(String sessionId, AdminConfigurationGroup configGroup) throws KKAdminException
     {
         try
         {
            if (_insertConfigurationGroup == null)
            {
                _insertConfigurationGroup = new InsertConfigurationGroup(kkAdminEng);
            }

            return _insertConfigurationGroup.insertConfigurationGroup(sessionId, configGroup);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a configuration object.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param config
     *            a KKConfiguration object to insert
     * @return Returns the primary key of the configuration object that was inserted
     * @throws KKAdminException
     */
     public int insertConfiguration(String sessionId, KKConfiguration config) throws KKAdminException
     {
         try
         {
            if (_insertConfiguration == null)
            {
                _insertConfiguration = new InsertConfiguration(kkAdminEng);
            }

            return _insertConfiguration.insertConfiguration(sessionId, config);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Updates a KKConfiguration object.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param newConf
     *            the KKConfiguration to update
     * @throws KKAdminException
     */
     public void updateConfiguration(String sessionId, KKConfiguration newConf) throws KKAdminException
     {
         try
         {
            if (_updateConfiguration == null)
            {
                _updateConfiguration = new UpdateConfiguration(kkAdminEng);
            }

            _updateConfiguration.updateConfiguration(sessionId, newConf);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Updates an AdminConfigurationGroup object.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param newConf
     *            the AdminConfigurationGroup to update
     * @throws KKAdminException
     */
     public void updateConfigurationGroup(String sessionId, AdminConfigurationGroup newConf) throws KKAdminException
     {
         try
         {
            if (_updateConfigurationGroup == null)
            {
                _updateConfigurationGroup = new UpdateConfigurationGroup(kkAdminEng);
            }

            _updateConfigurationGroup.updateConfigurationGroup(sessionId, newConf);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an array of AdminConfigurationGroup objects with the specified title.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param title
     * @return An array of AdminConfigurationGroup objects
     * @throws KKAdminException
     */
     public AdminConfigurationGroup[] getConfigurationGroupsByTitle(String sessionId, String title) throws KKAdminException
     {
         try
         {
            if (_getConfigurationGroupsByTitle == null)
            {
                _getConfigurationGroupsByTitle = new GetConfigurationGroupsByTitle(kkAdminEng);
            }

            return _getConfigurationGroupsByTitle.getConfigurationGroupsByTitle(sessionId, title);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns a KKConfiguration object with the specified key.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param key
     *            the Configuration key to search for
     * @return A KKConfiguration object with the specified key
     * @throws KKAdminException
     */
     public KKConfiguration getConfigurationByKey(String sessionId, String key) throws KKAdminException
     {
         try
         {
            if (_getConfigurationByKey == null)
            {
                _getConfigurationByKey = new GetConfigurationByKey(kkAdminEng);
            }

            return _getConfigurationByKey.getConfigurationByKey(sessionId, key);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Register a new customer. If an admin user or registered customer already exists with the same
     * eMail address, then an exception is thrown.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param custReg
     *            Customer Registration details.
     * @return the new customer Id
     * @throws KKAdminException
     *             If an admin user or registered customer already exists with the same eMail
     *             address
     */
     public int registerCustomer(String sessionId, AdminCustomerRegistration custReg) throws KKAdminException
     {
         try
         {
            if (_registerCustomer == null)
            {
                _registerCustomer = new RegisterCustomer(kkAdminEng);
            }

            return _registerCustomer.registerCustomer(sessionId, custReg);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Register a new customer. If an admin user already exists with the same eMail address, it is
     * deleted. If a registered customer already exists with the same eMail address, then an
     * exception is thrown.
     * <p>
     * This method is intended to be used when interfacing to a SSO system for logging in admin
     * users. The idea is that admin users are registered within KonaKart if the SSO system
     * determines that they have adequate privileges. Once registered they are given a role and then
     * logged in by calling other API calls. The information as to which role(s) they should be
     * allocated is also determined from information retrieved from the SSO system. When the
     * KonaKart session expires, the process is repeated and so the admin user has to be
     * re-registered probably using very similar information. The registerCustomer() API call would
     * throw an exception, whereas this API call deletes the existing admin user and registers a new
     * one.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param custReg
     *            Customer Registration details
     * @return the new customer Id
     * @throws KKAdminException
     *             if a registered customer already exists with the same eMail address
     */
     public int forceRegisterCustomer(String sessionId, AdminCustomerRegistration custReg) throws KKAdminException
     {
         try
         {
            if (_forceRegisterCustomer == null)
            {
                _forceRegisterCustomer = new ForceRegisterCustomer(kkAdminEng);
            }

            return _forceRegisterCustomer.forceRegisterCustomer(sessionId, custReg);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Reset a customer's password. A new password is generated and an email is sent to the customer
     * to inform him of the new password. If the locale attribute of the customer is not null, it
     * will be used to read the email template in the customer's preferred language. Otherwise the
     * default language will be used.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param custId
     *            Customer Id
     * @throws KKAdminException
     *             if the customer is not found, or problems resetting the password or sending the
     *             email.
     */
     public void resetCustomerPassword(String sessionId, int custId) throws KKAdminException
     {
         try
         {
            if (_resetCustomerPassword == null)
            {
                _resetCustomerPassword = new ResetCustomerPassword(kkAdminEng);
            }

            _resetCustomerPassword.resetCustomerPassword(sessionId, custId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Reset a customer's password using the eMail address specified. A new password is generated
     * for the specified customer and an email is sent to the customer to inform him of this new
     * password. If the locale attribute of the customer is not null, it will be used to read the
     * email template in the customer's preferred language. Otherwise the default language will be
     * used.
     * <p>
     * This API call should only be used when the emailAddress attribute of the AdminCustomer
     * doesn't specify where the eMail should be sent.
     * 
     * @param sessionId
     * @param custId
     *            Customer Id
     * @param eMailAddress
     *            The eMail address to override the one from the customer object
     * @throws KKAdminException
     *             if the customer is not found, or problems resetting the password or sending the
     *             email.
     */
     public void resetCustomerPasswordSpecifyingEmail(String sessionId, int custId, String eMailAddress) throws KKAdminException
     {
         try
         {
            if (_resetCustomerPasswordSpecifyingEmail == null)
            {
                _resetCustomerPasswordSpecifyingEmail = new ResetCustomerPasswordSpecifyingEmail(kkAdminEng);
            }

            _resetCustomerPasswordSpecifyingEmail.resetCustomerPasswordSpecifyingEmail(sessionId, custId, eMailAddress);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Set a customer's password. The new password is set for the customer. No email notification is
     * sent.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param custId
     *            Customer Id
     * @param newPassword
     *            New password (as entered by the user)
     * @throws KKAdminException
     */
     public void setCustomerPassword(String sessionId, int custId, String newPassword) throws KKAdminException
     {
         try
         {
            if (_setCustomerPassword == null)
            {
                _setCustomerPassword = new SetCustomerPassword(kkAdminEng);
            }

            _setCustomerPassword.setCustomerPassword(sessionId, custId, newPassword);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Ensures that the current password is correct, and then changes it to the new password. The
     * new password is validated against the rules in force for the store. Throws an exception if
     * the currentPassword doesn't match or the newPassword isn't validated successfully.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param currentPassword
     *            current Password
     * @param newPassword
     *            new Password
     * @throws KKAdminException
     *             if the current password doesn't match or the newPassword cannot be validated
     */
     public void changePassword(String sessionId, String currentPassword, String newPassword) throws KKAdminException
     {
         try
         {
            if (_changePassword == null)
            {
                _changePassword = new ChangePassword(kkAdminEng);
            }

            _changePassword.changePassword(sessionId, currentPassword, newPassword);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Change a user's password. This is used when a sessionId cnnot be obtained for a user because
     * the user's password has expired. With this call the user's password is changed without the
     * need to have a SessionId. The new password is validated against the rules in force for the
     * store. Throws an exception if the currentPassword doesn't match or the newPassword isn't
     * validated successfully.
     * 
     * @param user
     *            The user name of the user whose password should be changed.
     * @param currentPassword
     *            current Password
     * @param newPassword
     *            new Password
     * @throws KKAdminException
     *             if the user cannot be logged in, current password doesn't match or the
     *             newPassword cannot be validated
     */
     public void changeUserPassword(String user, String currentPassword, String newPassword) throws KKAdminException
     {
         try
         {
            if (_changeUserPassword == null)
            {
                _changeUserPassword = new ChangeUserPassword(kkAdminEng);
            }

            _changeUserPassword.changeUserPassword(user, currentPassword, newPassword);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Is the password valid?
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param password
     *            the new Password to check for validity
     * @param userId
     *            the user that the password belongs to. If this is specified as -1 no password
     *            validity checks related to the user are carried out.
     * 
     * @return true if the password is valid otherwise an exception is thrown
     * @throws KKAdminException
     *             if theres's an unexpected problem or the password is found to be invalid. If the
     *             password is found to be invalid the msgKey attribute of the KKAdminException will
     *             contain a message catalogue that references a message that explains why.
     */
     public boolean checkPasswordValidity(String sessionId, String password, int userId) throws KKAdminException
     {
         try
         {
            if (_checkPasswordValidity == null)
            {
                _checkPasswordValidity = new CheckPasswordValidity(kkAdminEng);
            }

            return _checkPasswordValidity.checkPasswordValidity(sessionId, password, userId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get the configuration elements for the specified group
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param configGroup
     *            the Configuration Group Id
     * @return Returns an array of Configurations
     * @throws KKAdminException
     */
     public KKConfiguration[] getConfigurationsByGroup(String sessionId, int configGroup) throws KKAdminException
     {
         try
         {
            if (_getConfigurationsByGroup == null)
            {
                _getConfigurationsByGroup = new GetConfigurationsByGroup(kkAdminEng);
            }

            return _getConfigurationsByGroup.getConfigurationsByGroup(sessionId, configGroup);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Saves an array of KKConfiguration objects to the database.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param configs
     *            Configuration array to save
     * @param origConfigs
     *            Original Configuration array to compare against
     * @throws KKAdminException
     */
     public void saveConfigs(String sessionId, KKConfiguration[] configs, KKConfiguration[] origConfigs) throws KKAdminException
     {
         try
         {
            if (_saveConfigs == null)
            {
                _saveConfigs = new SaveConfigs(kkAdminEng);
            }

            _saveConfigs.saveConfigs(sessionId, configs, origConfigs);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert one or more new configuration parameters
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param config
     *            an array of KKConfiguration objects to insert
     * @throws KKAdminException
     */
     public void insertConfigs(String sessionId, KKConfiguration[] config) throws KKAdminException
     {
         try
         {
            if (_insertConfigs == null)
            {
                _insertConfigs = new InsertConfigs(kkAdminEng);
            }

            _insertConfigs.insertConfigs(sessionId, config);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Remove one or more configuration parameters
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param configKeys
     *            an array of configuration key Strings to remove
     * @throws KKAdminException
     */
     public void removeConfigs(String sessionId, String[] configKeys) throws KKAdminException
     {
         try
         {
            if (_removeConfigs == null)
            {
                _removeConfigs = new RemoveConfigs(kkAdminEng);
            }

            _removeConfigs.removeConfigs(sessionId, configKeys);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get the available modules of the specified type.
     * <p>
     * Valid types are:
     * <ul>
     * <li>ModuleInterface.MODULE_TYPE_PAYMENT</li>
     * <li>ModuleInterface.MODULE_TYPE_SHIPPING</li>
     * <li>ModuleInterface.MODULE_TYPE_ORDER_TOTAL</li>
     * <li>ModuleInterface.MODULE_SUB_TYPE_PROMOTION</li>
     * </ul>
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param moduleType
     *            the Configuration Group Id
     * @return Returns an array of Configurations
     * @throws KKAdminException
     */
     public KKModule[] getModules(String sessionId, int moduleType) throws KKAdminException
     {
         try
         {
            if (_getModules == null)
            {
                _getModules = new GetModules(kkAdminEng);
            }

            return _getModules.getModules(sessionId, moduleType);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert the product. The product must have at least one associated AdminProductDescription
     * object.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param product
     *            An AdminProduct object
     * @return Returns the id of the inserted product.
     * @throws KKAdminException
     */
     public int insertProduct(String sessionId, AdminProduct product) throws KKAdminException
     {
         try
         {
            if (_insertProduct == null)
            {
                _insertProduct = new InsertProduct(kkAdminEng);
            }

            return _insertProduct.insertProduct(sessionId, product);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert the product. The product must have at least one associated AdminProductDescription
     * object. The AdminProductMgrOptions object contains options to enable the prices and quantity
     * to be set independently for different catalogs.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param product
     *            An AdminProduct object
     * @param mgrOptions
     *            Allows you to define whether the quantity and prices can have different values
     *            depending on the catalogId. May be set to null.
     * @return Returns the id of the inserted product.
     * @throws KKAdminException
     */
     public int insertProductWithOptions(String sessionId, AdminProduct product, AdminProductMgrOptions mgrOptions) throws KKAdminException
     {
         try
         {
            if (_insertProductWithOptions == null)
            {
                _insertProductWithOptions = new InsertProductWithOptions(kkAdminEng);
            }

            return _insertProductWithOptions.insertProductWithOptions(sessionId, product, mgrOptions);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Is there a product in the database with the specified productId
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param productId
     *            The id of the product
     * @return Returns true if the product exists otherwise false
     * @throws KKAdminException
     */
     public boolean doesProductExist(String sessionId, int productId) throws KKAdminException
     {
         try
         {
            if (_doesProductExist == null)
            {
                _doesProductExist = new DoesProductExist(kkAdminEng);
            }

            return _doesProductExist.doesProductExist(sessionId, productId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get the product referenced by this product id, from the database.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param productId
     *            The numeric id of the product
     * @return Returns the product
     * @throws KKAdminException
     */
     public AdminProduct getProduct(String sessionId, int productId) throws KKAdminException
     {
         try
         {
            if (_getProduct == null)
            {
                _getProduct = new GetProduct(kkAdminEng);
            }

            return _getProduct.getProduct(sessionId, productId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Inserts a new product category record into the database if it doesn't already exist.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param prodId
     *            Product ID
     * @param catId
     *            Category ID
     * @return true if the product category record was inserted, false if it already existed
     * @throws KKAdminException
     */
     public boolean insertProductCategory(String sessionId, int prodId, int catId) throws KKAdminException
     {
         try
         {
            if (_insertProductCategory == null)
            {
                _insertProductCategory = new InsertProductCategory(kkAdminEng);
            }

            return _insertProductCategory.insertProductCategory(sessionId, prodId, catId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get the product referenced by this product id, from the database. The AdminProductMgrOptions
     * object defines whether to use prices and quantity for the catalog defined by the catalogId.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param productId
     *            The numeric id of the product
     * @param mgrOptions
     *            It defines whether to use prices and quantity for the catalog defined by the
     *            catalogId.
     * @return Returns the product
     * @throws KKAdminException
     */
     public AdminProduct getProductWithOptions(String sessionId, int productId, AdminProductMgrOptions mgrOptions) throws KKAdminException
     {
         try
         {
            if (_getProductWithOptions == null)
            {
                _getProductWithOptions = new GetProductWithOptions(kkAdminEng);
            }

            return _getProductWithOptions.getProductWithOptions(sessionId, productId, mgrOptions);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Search for products.
     * <p>
     * The AdminDataDescriptor allows you to:
     * <ul>
     * <li>Apply a limit to the number of objects returned</li>
     * <li>Apply an offset, normally used for paging</li>
     * <li>Apply order by criteria</li>
     * <li>Return invisible objects by setting <code>showInvisible</code> to true</li>
     * <li>Return inactive objects by setting <code>showInactive</code> to true</li>
     * <li>Apply criteria on the custom attributes. If a custom attribute is set, then only products
     * with a matching custom attribute value are returned.</li>
     * </ul>
     * <p>
     * The AdminProductSearch product allows you to enter additional search parameters.
     * <p>
     * The Products may be sorted by :
     * <ul>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_PRICE_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_PRICE_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_QUANTITY_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_QUANTITY_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_STATUS_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_STATUS_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_ADDED</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_AVAILABLE_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_AVAILABLE_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_VIEWED</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_VIEWED_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_VIEWED_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_ORDERED</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_ORDERED_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_ORDERED_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_MANUFACTURER</li>
     * <li>AdminDataDescriptor.ORDER_BY_MANUFACTURER_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_MANUFACTURER_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_MANUFACTURER</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM3_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM3_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM4_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM4_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM5_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM5_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM6_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM6_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM7_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM7_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM8_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM8_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM9_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM9_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM10_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM10_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1INT_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1INT_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2INT_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2INT_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1DEC_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1DEC_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2DEC_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2DEC_DESCENDING</li>
     * </ul>
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param dataDesc
     *            Used to control the data offset, limit the number of items returned and set the
     *            sort order
     * @param prodSearch
     *            An object containing the search criteria
     * @param languageId
     *            the language Id - or it could be
     *            com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to use the default language
     * @return Return a Products object
     * @throws KKAdminException
     */
     public AdminProducts searchForProducts(String sessionId, AdminDataDescriptor dataDesc, AdminProductSearch prodSearch, int languageId) throws KKAdminException
     {
         try
         {
            if (_searchForProducts == null)
            {
                _searchForProducts = new SearchForProducts(kkAdminEng);
            }

            return _searchForProducts.searchForProducts(sessionId, dataDesc, prodSearch, languageId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Search for products.
     * <p>
     * The AdminDataDescriptor allows you to:
     * <ul>
     * <li>Apply a limit to the number of objects returned</li>
     * <li>Apply an offset, normally used for paging</li>
     * <li>Apply order by criteria</li>
     * <li>Return invisible objects by setting <code>showInvisible</code> to true</li>
     * <li>Return inactive objects by setting <code>showInactive</code> to true</li>
     * <li>Apply criteria on the custom attributes. If a custom attribute is set, then only products
     * with a matching custom attribute value are returned.</li>
     * </ul>
     * <p>
     * The AdminProductSearch product allows you to enter additional search parameters.
     * <p>
     * The Products may be sorted by :
     * <ul>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_PRICE_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_PRICE_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_QUANTITY_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_QUANTITY_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_STATUS_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_STATUS_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_ADDED</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_AVAILABLE_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_AVAILABLE_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_VIEWED</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_VIEWED_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_VIEWED_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_ORDERED</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_ORDERED_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_ORDERED_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_MANUFACTURER</li>
     * <li>AdminDataDescriptor.ORDER_BY_MANUFACTURER_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_MANUFACTURER_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM3_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM3_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM4_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM4_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM5_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM5_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM6_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM6_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM7_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM7_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM8_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM8_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM9_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM9_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM10_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM10_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1INT_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1INT_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2INT_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2INT_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1DEC_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1DEC_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2DEC_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2DEC_DESCENDING</li> *
     * </ul>
     * <p>
     * The MgrOptions object defines whether to use prices and quantity for the catalog defined by
     * the catalogId.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param dataDesc
     *            Used to control the data offset, limit the number of items returned and set the
     *            sort order
     * @param prodSearch
     *            An object containing the search criteria
     * @param languageId
     *            the language Id - or it could be
     *            com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to use the default language
     * @param mgrOptions
     *            It defines whether to use prices and quantity for the catalog defined by the
     *            catalogId.
     * @return Return a Products object
     * @throws KKAdminException
     */
     public AdminProducts searchForProductsWithOptions(String sessionId, AdminDataDescriptor dataDesc, AdminProductSearch prodSearch, int languageId, AdminProductMgrOptions mgrOptions) throws KKAdminException
     {
         try
         {
            if (_searchForProductsWithOptions == null)
            {
                _searchForProductsWithOptions = new SearchForProductsWithOptions(kkAdminEng);
            }

            return _searchForProductsWithOptions.searchForProductsWithOptions(sessionId, dataDesc, prodSearch, languageId, mgrOptions);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Edits the product, replacing existing data with data in the product parameter.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param product
     *            AdminProduct object
     * @throws KKAdminException
     */
     public void editProduct(String sessionId, AdminProduct product) throws KKAdminException
     {
         try
         {
            if (_editProduct == null)
            {
                _editProduct = new EditProduct(kkAdminEng);
            }

            _editProduct.editProduct(sessionId, product);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Edit a product and its product description objects. The AdminProductMgrOptions object
     * contains options to enable the prices and quantity to be set independently for different
     * catalogs.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param product
     *            AdminProduct object
     * @param mgrOptions
     *            Allows you to define whether the quantity and prices can have different values
     *            depending on the catalogId. May be set to null.
     * @throws KKAdminException
     */
     public void editProductWithOptions(String sessionId, AdminProduct product, AdminProductMgrOptions mgrOptions) throws KKAdminException
     {
         try
         {
            if (_editProductWithOptions == null)
            {
                _editProductWithOptions = new EditProductWithOptions(kkAdminEng);
            }

            _editProductWithOptions.editProductWithOptions(sessionId, product, mgrOptions);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete the product referenced by the productId parameter.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param productId
     *            The numeric id of the product
     * @throws KKAdminException
     */
     public void deleteProduct(String sessionId, int productId) throws KKAdminException
     {
         try
         {
            if (_deleteProduct == null)
            {
                _deleteProduct = new DeleteProduct(kkAdminEng);
            }

            _deleteProduct.deleteProduct(sessionId, productId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete the category referenced to by categoryId. The child categories and products will
     * either be moved up a level or deleted.
     * <p>
     * The options can be set to AdminCategoryMgr.DELETE_CHILDREN or
     * AdminCategoryMgr.ATTACH_CHILDREN_TO_PARENT . In the first case, the category and all of its
     * children (String sessionId, categories and products) are deleted. In the second case, only
     * the category referenced by categoryId is deleted and all of its children are attached to its
     * parent. However, if the category is a top level category, then the products directly
     * associated with that category will be deleted since there is no parent category to attach
     * them to.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param categoryId
     *            The numeric id of the category
     * @param options
     *            Can be set to AdminCategoryMgr.DELETE_CHILDREN or
     *            AdminCategoryMgr.ATTACH_CHILDREN_TO_PARENT
     * @throws KKAdminException
     */
     public void deleteCategoryTree(String sessionId, int categoryId, int options) throws KKAdminException
     {
         try
         {
            if (_deleteCategoryTree == null)
            {
                _deleteCategoryTree = new DeleteCategoryTree(kkAdminEng);
            }

            _deleteCategoryTree.deleteCategoryTree(sessionId, categoryId, options);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a single category and its descriptions.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param categoryId
     *            The numeric id of the category
     * @throws KKAdminException
     */
     public void deleteSingleCategory(String sessionId, int categoryId) throws KKAdminException
     {
         try
         {
            if (_deleteSingleCategory == null)
            {
                _deleteSingleCategory = new DeleteSingleCategory(kkAdminEng);
            }

            _deleteSingleCategory.deleteSingleCategory(sessionId, categoryId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns either a single category object or a tree of category objects if getChildren is set
     * to true. The top level category has a populated description array whereas the children do
     * not. They use the languageId to determine which language to use.
     * 
     * @param categoryId
     *            The numeric id of the category
     * @param getChildren
     * @param languageId
     *            the language Id - or it could be
     *            com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to use the default language
     * @return Returns an AdminCategory object
     * @throws KKAdminException
     */
     public AdminCategory getCategory(int categoryId, boolean getChildren, int languageId) throws KKAdminException
     {
         try
         {
            if (_getCategory == null)
            {
                _getCategory = new GetCategory(kkAdminEng);
            }

            return _getCategory.getCategory(categoryId, getChildren, languageId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the complete category tree. If getNumProducts is set to true, then each category has
     * a number defining how many products it contains.
     * 
     * @param languageId
     *            the language Id - or it could be
     *            com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to use the default language
     * @param getNumProducts
     * @return Returns an array of AdminCategory objects
     * @throws KKAdminException
     */
     public AdminCategory[] getCategoryTree(int languageId, boolean getNumProducts) throws KKAdminException
     {
         try
         {
            if (_getCategoryTree == null)
            {
                _getCategoryTree = new GetCategoryTree(kkAdminEng);
            }

            return _getCategoryTree.getCategoryTree(languageId, getNumProducts);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Inserts a new category into the database. It must have at least one description object
     * associated with it.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param cat
     *            An AdminCategory object
     * @return The id of the new category
     * @throws KKAdminException
     */
     public int insertCategory(String sessionId, AdminCategory cat) throws KKAdminException
     {
         try
         {
            if (_insertCategory == null)
            {
                _insertCategory = new InsertCategory(kkAdminEng);
            }

            return _insertCategory.insertCategory(sessionId, cat);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * The category referenced by categoryId is moved to a new parent referenced by newParentId.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param categoryId
     *            The numeric id of the category
     * @param newParentId
     * @throws KKAdminException
     */
     public void moveCategory(String sessionId, int categoryId, int newParentId) throws KKAdminException
     {
         try
         {
            if (_moveCategory == null)
            {
                _moveCategory = new MoveCategory(kkAdminEng);
            }

            _moveCategory.moveCategory(sessionId, categoryId, newParentId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * The category is edited. The existing data is replaced with data from the category parameter.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param cat
     *            An AdminCategory object
     * @throws KKAdminException
     */
     public void editCategory(String sessionId, AdminCategory cat) throws KKAdminException
     {
         try
         {
            if (_editCategory == null)
            {
                _editCategory = new EditCategory(kkAdminEng);
            }

            _editCategory.editCategory(sessionId, cat);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete the manufacturer and manufacturer info records. If deleteProducts is set, then all of
     * the products associated with the manufacturer are also deleted.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param manufacturerId
     *            The numeric id of the manufacturer
     * @param deleteProducts
     *            Set to true to delete all of the products associated with the manufacturer
     * @throws KKAdminException
     */
     public void deleteManufacturer(String sessionId, int manufacturerId, boolean deleteProducts) throws KKAdminException
     {
         try
         {
            if (_deleteManufacturer == null)
            {
                _deleteManufacturer = new DeleteManufacturer(kkAdminEng);
            }

            _deleteManufacturer.deleteManufacturer(sessionId, manufacturerId, deleteProducts);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Edits the manufacturer, replacing existing data with data in the <code>manu</code> parameter.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param manu
     *            AdminManufacturer object
     * @throws KKAdminException
     */
     public void editManufacturer(String sessionId, AdminManufacturer manu) throws KKAdminException
     {
         try
         {
            if (_editManufacturer == null)
            {
                _editManufacturer = new EditManufacturer(kkAdminEng);
            }

            _editManufacturer.editManufacturer(sessionId, manu);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get all manufacturers ordered by name.
     * 
     * @return Return an array of all manufacturers
     * @throws KKAdminException
     */
     public AdminManufacturer[] getAllManufacturers() throws KKAdminException
     {
         try
         {
            if (_getAllManufacturers == null)
            {
                _getAllManufacturers = new GetAllManufacturers(kkAdminEng);
            }

            return _getAllManufacturers.getAllManufacturers();
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get a fully populated manufacturer
     * 
     * @param manufacturerId
     *            The numeric id of the manufacturer
     * @return Return a fully populated manufacturer
     * @throws KKAdminException
     */
     public AdminManufacturer getManufacturer(int manufacturerId) throws KKAdminException
     {
         try
         {
            if (_getManufacturer == null)
            {
                _getManufacturer = new GetManufacturer(kkAdminEng);
            }

            return _getManufacturer.getManufacturer(manufacturerId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a manufacturer
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param manu
     *            An AdminManufacturer object
     * @return Return the manufacturer id
     * @throws KKAdminException
     */
     public int insertManufacturer(String sessionId, AdminManufacturer manu) throws KKAdminException
     {
         try
         {
            if (_insertManufacturer == null)
            {
                _insertManufacturer = new InsertManufacturer(kkAdminEng);
            }

            return _insertManufacturer.insertManufacturer(sessionId, manu);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete the review and all entries in the reviews description table.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param reviewId
     *            NUmeric id of the review
     * @throws KKAdminException
     */
     public void deleteReview(String sessionId, int reviewId) throws KKAdminException
     {
         try
         {
            if (_deleteReview == null)
            {
                _deleteReview = new DeleteReview(kkAdminEng);
            }

            _deleteReview.deleteReview(sessionId, reviewId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Edits the review, replacing existing data with data in the review parameter.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param review
     *            AdminReview object
     * @throws KKAdminException
     */
     public void editReview(String sessionId, AdminReview review) throws KKAdminException
     {
         try
         {
            if (_editReview == null)
            {
                _editReview = new EditReview(kkAdminEng);
            }

            _editReview.editReview(sessionId, review);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns all reviews. The AdminDataDescriptor allows to add search constraints for the custom
     * fields 1 to 3 and to order the result set as follows:
     * <ul>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_ADDED</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_ADDED_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_ADDED_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_READ</li>
     * <li>AdminDataDescriptor.ORDER_BY_RATING</li>
     * <li>AdminDataDescriptor.ORDER_BY_RATING_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_RATING_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_REVIEWID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_REVIEWID_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_STATUS_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_STATUS_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_PRODUCT_ID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_PRODUCT_ID_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOMERS_ID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOMERS_ID_DESCENDING</li>
     * </ul>
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param dataDesc
     *            Used to control the data offset, limit the number of items returned and set the
     *            sort order
     * @return Return an AdminReviews object
     * @throws KKAdminException
     */
     public AdminReviews getAllReviews(String sessionId, AdminDataDescriptor dataDesc) throws KKAdminException
     {
         try
         {
            if (_getAllReviews == null)
            {
                _getAllReviews = new GetAllReviews(kkAdminEng);
            }

            return _getAllReviews.getAllReviews(sessionId, dataDesc);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the review referenced by the review Id
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param reviewId
     *            The numeric id of the AdminReview object
     * @return Return an AdminReview object
     * @throws KKAdminException
     */
     public AdminReview getReview(String sessionId, int reviewId) throws KKAdminException
     {
         try
         {
            if (_getReview == null)
            {
                _getReview = new GetReview(kkAdminEng);
            }

            return _getReview.getReview(sessionId, reviewId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the reviews for a product. The AdminDataDescriptor allows to add search constraints
     * for the custom fields 1 to 3 and to order the result set as follows:
     * <ul>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_ADDED</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_ADDED_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_ADDED_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_READ</li>
     * <li>AdminDataDescriptor.ORDER_BY_RATING</li>
     * <li>AdminDataDescriptor.ORDER_BY_RATING_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_RATING_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_REVIEWID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_REVIEWID_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_STATUS_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_STATUS_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_PRODUCT_ID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_PRODUCT_ID_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOMERS_ID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOMERS_ID_DESCENDING</li>
     * </ul>
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param dataDesc
     *            Used to control the data offset, limit the number of items returned and set the
     *            sort order
     * @param productId
     *            The numeric id of the product
     * @return Return an AdminReviews object
     * @throws KKAdminException
     */
     public AdminReviews getReviewsPerProduct(String sessionId, AdminDataDescriptor dataDesc, int productId) throws KKAdminException
     {
         try
         {
            if (_getReviewsPerProduct == null)
            {
                _getReviewsPerProduct = new GetReviewsPerProduct(kkAdminEng);
            }

            return _getReviewsPerProduct.getReviewsPerProduct(sessionId, dataDesc, productId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the reviews for the given search criteria. The AdminReviewSearch object allows you
     * search for reviews by:
     * <ul>
     * <li>id</li>
     * <li>productId</li>
     * <li>customerId</li>
     * <li>rating</li>
     * <li>status</li>
     * <ul>
     * <li>com.konakartadmin.bl.KonakartAdminConstants.REVIEW_VISIBLE = The review can be seen by
     * customers in the storefront application</li>
     * <li>com.konakartadmin.bl.KonakartAdminConstants.REVIEW_INVISIBLE = The review cannot be seen
     * by customers in the storefront application. It is waiting to be approved.</li>
     * <li>com.konakartadmin.bl.KonakartAdminConstants.REVIEW_INVISIBLE_REJECTED = The review cannot
     * be seen by customers in the storefront application. It has been rejected.</li>
     * </ul>
     * </li> </ul> The AdminDataDescriptor allows to add search constraints for the custom fields 1
     * to 3 and to order the result set as follows:
     * <ul>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_ADDED</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_ADDED_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_ADDED_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_READ</li>
     * <li>AdminDataDescriptor.ORDER_BY_RATING</li>
     * <li>AdminDataDescriptor.ORDER_BY_RATING_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_RATING_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_REVIEWID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_REVIEWID_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_STATUS_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_STATUS_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_PRODUCT_ID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_PRODUCT_ID_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOMERS_ID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOMERS_ID_DESCENDING</li>
     * </ul>
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param dataDesc
     *            Used to control the data offset, limit the number of items returned and set the
     *            sort order
     * @param revSearch
     *            The search criteria
     * @return Return an AdminReviews object
     * @throws KKAdminException
     */
     public AdminReviews getReviews(String sessionId, AdminDataDescriptor dataDesc, AdminReviewSearch revSearch) throws KKAdminException
     {
         try
         {
            if (_getReviews == null)
            {
                _getReviews = new GetReviews(kkAdminEng);
            }

            return _getReviews.getReviews(sessionId, dataDesc, revSearch);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * A new review is inserted
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param review
     *            The AdminReview object
     * @return int : Review Primary Key
     * @throws KKAdminException
     */
     public int insertReview(String sessionId, AdminReview review) throws KKAdminException
     {
         try
         {
            if (_insertReview == null)
            {
                _insertReview = new InsertReview(kkAdminEng);
            }

            return _insertReview.insertReview(sessionId, review);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Inserts a new special
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param special
     *            The AdminSpecial object
     * @return Return the primary key of the new special object
     * @throws KKAdminException
     */
     public int insertSpecial(String sessionId, AdminSpecial special) throws KKAdminException
     {
         try
         {
            if (_insertSpecial == null)
            {
                _insertSpecial = new InsertSpecial(kkAdminEng);
            }

            return _insertSpecial.insertSpecial(sessionId, special);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns a special referenced by the id parameter
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param specialId
     *            The numeric id of the AdminSpecial object
     * @return Return a special object
     * @throws KKAdminException
     */
     public AdminSpecial getSpecial(String sessionId, int specialId) throws KKAdminException
     {
         try
         {
            if (_getSpecial == null)
            {
                _getSpecial = new GetSpecial(kkAdminEng);
            }

            return _getSpecial.getSpecial(sessionId, specialId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Deletes the special referenced by the special id
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param specialId
     *            The numeric id of the special
     * @throws KKAdminException
     */
     public void deleteSpecial(String sessionId, int specialId) throws KKAdminException
     {
         try
         {
            if (_deleteSpecial == null)
            {
                _deleteSpecial = new DeleteSpecial(kkAdminEng);
            }

            _deleteSpecial.deleteSpecial(sessionId, specialId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Edits the special, replacing existing data with data in the special parameter.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param special
     *            AdminSpecial object
     * @throws KKAdminException
     */
     public void editSpecial(String sessionId, AdminSpecial special) throws KKAdminException
     {
         try
         {
            if (_editSpecial == null)
            {
                _editSpecial = new EditSpecial(kkAdminEng);
            }

            _editSpecial.editSpecial(sessionId, special);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an AdminProducts object containing an array of product objects which are all
     * specials.
     * <p>
     * The Specials may be sorted by :
     * <ul>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_PRICE_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_PRICE_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_QUANTITY_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_QUANTITY_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_STATUS_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_STATUS_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_ADDED</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_AVAILABLE_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_AVAILABLE_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_VIEWED</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_VIEWED_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_VIEWED_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_ORDERED</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_ORDERED_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_ORDERED_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_MANUFACTURER</li>
     * <li>AdminDataDescriptor.ORDER_BY_MANUFACTURER_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_MANUFACTURER_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM3_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM3_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM4_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM4_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM5_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM5_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM6_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM6_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM7_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM7_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM8_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM8_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM9_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM9_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM10_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM10_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1INT_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1INT_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2INT_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2INT_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1DEC_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1DEC_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2DEC_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2DEC_DESCENDING</li> *
     * </ul>
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param dataDesc
     *            Used to control the data offset, limit the number of items returned and set the
     *            sort order
     * @param languageId
     *            the language Id - or it could be
     *            com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to use the default language
     * @return Return an AdminProducts object containing an array of products
     * @throws KKAdminException
     */
     public AdminProducts getAllSpecials(String sessionId, AdminDataDescriptor dataDesc, int languageId) throws KKAdminException
     {
         try
         {
            if (_getAllSpecials == null)
            {
                _getAllSpecials = new GetAllSpecials(kkAdminEng);
            }

            return _getAllSpecials.getAllSpecials(sessionId, dataDesc, languageId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an AdminProducts object containing an array of specials for a category.
     * <p>
     * The Specials may be sorted by :
     * <ul>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_PRICE_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_PRICE_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_QUANTITY_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_QUANTITY_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_STATUS_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_STATUS_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_ADDED</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_AVAILABLE_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_AVAILABLE_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_VIEWED</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_VIEWED_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_VIEWED_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_ORDERED</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_ORDERED_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_TIMES_ORDERED_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_MANUFACTURER</li>
     * <li>AdminDataDescriptor.ORDER_BY_MANUFACTURER_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_MANUFACTURER_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM3_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM3_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM4_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM4_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM5_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM5_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM6_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM6_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM7_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM7_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM8_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM8_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM9_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM9_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM10_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM10_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1INT_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1INT_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2INT_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2INT_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1DEC_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM1DEC_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2DEC_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_CUSTOM2DEC_DESCENDING</li> *
     * </ul>
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param dataDesc
     *            Used to control the data offset, limit the number of items returned and set the
     *            sort order
     * @param categoryId
     *            The numeric id of the category
     * @param searchInSubCats
     *            Determines whether products are searched for in the sub-categories of the
     *            specified category
     * @param languageId
     *            the language Id - or it could be
     *            com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to use the default language
     * @return Returns an AdminProducts object
     * @throws KKAdminException
     */
     public AdminProducts getSpecialsPerCategory(String sessionId, AdminDataDescriptor dataDesc, int categoryId, boolean searchInSubCats, int languageId) throws KKAdminException
     {
         try
         {
            if (_getSpecialsPerCategory == null)
            {
                _getSpecialsPerCategory = new GetSpecialsPerCategory(kkAdminEng);
            }

            return _getSpecialsPerCategory.getSpecialsPerCategory(sessionId, dataDesc, categoryId, searchInSubCats, languageId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Return all product options in the database for any given language.
     * 
     * @param languageId
     *            specifies that the product options should be returned for this language. Can
     *            specify com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to specify the default
     *            language, or specify com.konakartadmin.bl.AdminLanguageMgr.ALL_LANGUAGES to
     *            specify all languages
     * @return An array of all product options, each containing an array of product values
     * @throws KKAdminException
     */
     public AdminProductOption[] getAllProductOptions(int languageId) throws KKAdminException
     {
         try
         {
            if (_getAllProductOptions == null)
            {
                _getAllProductOptions = new GetAllProductOptions(kkAdminEng);
            }

            return _getAllProductOptions.getAllProductOptions(languageId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This returns an AdminProductOptionSearchResult object. Each ProductOption object may have an
     * array of ProductOptionValues which are populated by this API call if the populateValues
     * attribute of the search object is set.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param search
     *            The search parameters. The languageId determines in which language the product
     *            options are returned. It can be set to AdminLanguageMgr.DEFAULT_LANG to specify
     *            the default language, or to AdminLanguageMgr.ALL_LANGUAGES to specify all
     *            languages.
     * @param offset
     *            the offset in the db
     * @param size
     *            the number of records from the specified offset
     * @return Returns an AdminProductOptionSearchResult object
     * @throws KKAdminException
     */
     public AdminProductOptionSearchResult getProductOptions(String sessionId, AdminProductOptionSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getProductOptions == null)
            {
                _getProductOptions = new GetProductOptions(kkAdminEng);
            }

            return _getProductOptions.getProductOptions(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Return an array of product option value objects for a product option object
     * 
     * @param productOptionId
     * @param languageId
     *            the language Id - or it could be
     *            com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to use the default language or
     *            specify com.konakartadmin.bl.AdminLanguageMgr.ALL_LANGUAGES to specify all
     *            languages
     * @return Return an array of productOptionValue objects
     * @throws KKAdminException
     */
     public AdminProductOptionValue[] getProductOptionValuesPerOption(int productOptionId, int languageId) throws KKAdminException
     {
         try
         {
            if (_getProductOptionValuesPerOption == null)
            {
                _getProductOptionValuesPerOption = new GetProductOptionValuesPerOption(kkAdminEng);
            }

            return _getProductOptionValuesPerOption.getProductOptionValuesPerOption(productOptionId, languageId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a product option record for all languages and all of its records in the options values
     * to options table and all of its values.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param productOptionId
     *            The numeric id of the productOption
     * @throws KKAdminException
     */
     public void deleteProductOptions(String sessionId, int productOptionId) throws KKAdminException
     {
         try
         {
            if (_deleteProductOptions == null)
            {
                _deleteProductOptions = new DeleteProductOptions(kkAdminEng);
            }

            _deleteProductOptions.deleteProductOptions(sessionId, productOptionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a product option value record for all languages and all of its records in the options
     * values to options table.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param productOptionValueId
     *            The numeric id of the productOptionValue
     * @throws KKAdminException
     */
     public void deleteProductOptionValues(String sessionId, int productOptionValueId) throws KKAdminException
     {
         try
         {
            if (_deleteProductOptionValues == null)
            {
                _deleteProductOptionValues = new DeleteProductOptionValues(kkAdminEng);
            }

            _deleteProductOptionValues.deleteProductOptionValues(sessionId, productOptionValueId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an array of AdminProductOption objects. One for each language.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param productOptionId
     *            The numeric id of the AdminProductOption
     * @return An array of all product options, for each language
     * @throws KKAdminException
     */
     public AdminProductOption[] getProductOptionsPerId(String sessionId, int productOptionId) throws KKAdminException
     {
         try
         {
            if (_getProductOptionsPerId == null)
            {
                _getProductOptionsPerId = new GetProductOptionsPerId(kkAdminEng);
            }

            return _getProductOptionsPerId.getProductOptionsPerId(sessionId, productOptionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an array of productOptions with the specified name and languageId.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param name
     *            Product Option Name
     * @param langId
     *            Language Id specifies that the product option values should be returned for this
     *            language. Can specify AdminLanguageMgr.DEFAULT_LANG to specify the default
     *            language.
     * @return An array of all product options for the specified language with the specified name
     * @throws KKAdminException
     */
     public AdminProductOption[] getProductOptionsPerName(String sessionId, String name, int langId) throws KKAdminException
     {
         try
         {
            if (_getProductOptionsPerName == null)
            {
                _getProductOptionsPerName = new GetProductOptionsPerName(kkAdminEng);
            }

            return _getProductOptionsPerName.getProductOptionsPerName(sessionId, name, langId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get an array of all the product option value objects for the specified language.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param languageId
     *            specifies that the product option values should be returned for this language. Can
     *            specify AdminLanguageMgr.DEFAULT_LANG to specify the default language, or specify
     *            AdminLanguageMgr.ALL_LANGUAGES to specify all languages
     * @return Return an array of productOptionValue objects
     * @throws KKAdminException
     */
     public AdminProductOptionValue[] getAllProductOptionValues(String sessionId, int languageId) throws KKAdminException
     {
         try
         {
            if (_getAllProductOptionValues == null)
            {
                _getAllProductOptionValues = new GetAllProductOptionValues(kkAdminEng);
            }

            return _getAllProductOptionValues.getAllProductOptionValues(sessionId, languageId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an array of productOptionValues. One for each language.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param productOptionValueId
     * @return Return an array of productOptionValues objects
     * @throws KKAdminException
     */
     public AdminProductOptionValue[] getProductOptionValuesPerId(String sessionId, int productOptionValueId) throws KKAdminException
     {
         try
         {
            if (_getProductOptionValuesPerId == null)
            {
                _getProductOptionValuesPerId = new GetProductOptionValuesPerId(kkAdminEng);
            }

            return _getProductOptionValuesPerId.getProductOptionValuesPerId(sessionId, productOptionValueId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get an array of product option value objects with the specified name and language.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param name
     *            product option value name
     * @param languageId
     *            language id (can use AdminLanguageMgr.DEFAULT_LANG to get the default language)
     * @return Return an array of productOptionValue objects
     * @throws KKAdminException
     */
     public AdminProductOptionValue[] getProductOptionValuesPerName(String sessionId, String name, int languageId) throws KKAdminException
     {
         try
         {
            if (_getProductOptionValuesPerName == null)
            {
                _getProductOptionValuesPerName = new GetProductOptionValuesPerName(kkAdminEng);
            }

            return _getProductOptionValuesPerName.getProductOptionValuesPerName(sessionId, name, languageId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Gets an array of AdminProdOptionValToProdOption objects that have the specified optionId and
     * OptionValueId.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param prodOptValToProdOpt
     *            the AdminProdOptionValToProdOption to look up. Only uses the optionId and
     *            OptionValueId in this object
     * @return Returns an array of AdminProdOptionValToProdOption objects
     * @throws KKAdminException
     */
     public AdminProdOptionValToProdOption[] getProductOptionValueToProductOptions(String sessionId, AdminProdOptionValToProdOption prodOptValToProdOpt) throws KKAdminException
     {
         try
         {
            if (_getProductOptionValueToProductOptions == null)
            {
                _getProductOptionValueToProductOptions = new GetProductOptionValueToProductOptions(kkAdminEng);
            }

            return _getProductOptionValueToProductOptions.getProductOptionValueToProductOptions(sessionId, prodOptValToProdOpt);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a product option value to product option record.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param prodOptValToProdOpt
     *            a AdminProdOptionValToProdOption object to insert. The optionId and optionValueId
     *            defined in the object must be valid otherwise an exception is thrown.
     * @return the key created for the inserted record
     * @throws KKAdminException
     */
     public int insertProductsOptionsValuesToProductsOptions(String sessionId, AdminProdOptionValToProdOption prodOptValToProdOpt) throws KKAdminException
     {
         try
         {
            if (_insertProductsOptionsValuesToProductsOptions == null)
            {
                _insertProductsOptionsValuesToProductsOptions = new InsertProductsOptionsValuesToProductsOptions(kkAdminEng);
            }

            return _insertProductsOptionsValuesToProductsOptions.insertProductsOptionsValuesToProductsOptions(sessionId, prodOptValToProdOpt);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a product option.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param productOption
     *            An AdminProductOption object
     * @throws KKAdminException
     */
     public void insertProductOption(String sessionId, AdminProductOption productOption) throws KKAdminException
     {
         try
         {
            if (_insertProductOption == null)
            {
                _insertProductOption = new InsertProductOption(kkAdminEng);
            }

            _insertProductOption.insertProductOption(sessionId, productOption);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Edits the product option, replacing existing data with data in the productOption parameter.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param productOption
     *            AdminProductOption object
     * @throws KKAdminException
     */
     public void editProductOption(String sessionId, AdminProductOption productOption) throws KKAdminException
     {
         try
         {
            if (_editProductOption == null)
            {
                _editProductOption = new EditProductOption(kkAdminEng);
            }

            _editProductOption.editProductOption(sessionId, productOption);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a product option value for a product option
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param productOptionValue
     *            An AdminProductOptionValue object
     * @param productOptionId
     *            The product option id for inserting a record into the
     *            Products_Options_Values_To_Products_Options table. If this is set to -1, no such
     *            join record is inserted.
     * @throws KKAdminException
     */
     public void insertProductOptionValue(String sessionId, AdminProductOptionValue productOptionValue, int productOptionId) throws KKAdminException
     {
         try
         {
            if (_insertProductOptionValue == null)
            {
                _insertProductOptionValue = new InsertProductOptionValue(kkAdminEng);
            }

            _insertProductOptionValue.insertProductOptionValue(sessionId, productOptionValue, productOptionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Edits the product option value, replacing existing data with data in the productOptionValue
     * parameter.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param productOptionValue
     *            AdminProductOptionValue object
     * @throws KKAdminException
     */
     public void editProductOptionValue(String sessionId, AdminProductOptionValue productOptionValue) throws KKAdminException
     {
         try
         {
            if (_editProductOptionValue == null)
            {
                _editProductOptionValue = new EditProductOptionValue(kkAdminEng);
            }

            _editProductOptionValue.editProductOptionValue(sessionId, productOptionValue);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get the next id to use when inserting a ProductOption record.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @return The next id
     * @throws KKAdminException
     */
     public int getNextProductOptionId(String sessionId) throws KKAdminException
     {
         try
         {
            if (_getNextProductOptionId == null)
            {
                _getNextProductOptionId = new GetNextProductOptionId(kkAdminEng);
            }

            return _getNextProductOptionId.getNextProductOptionId(sessionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get the next id to use when inserting a ProductOptionValue record.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @return The next id
     * @throws KKAdminException
     */
     public int getNextProductOptionValuesId(String sessionId) throws KKAdminException
     {
         try
         {
            if (_getNextProductOptionValuesId == null)
            {
                _getNextProductOptionValuesId = new GetNextProductOptionValuesId(kkAdminEng);
            }

            return _getNextProductOptionValuesId.getNextProductOptionValuesId(sessionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Gets all of the product attributes for the product.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param productId
     *            The numeric id of the product
     * @return Returns an array of AdminProductAttributes
     * @throws KKAdminException
     */
     public AdminProductAttribute[] getProductAttributesPerProduct(String sessionId, int productId) throws KKAdminException
     {
         try
         {
            if (_getProductAttributesPerProduct == null)
            {
                _getProductAttributesPerProduct = new GetProductAttributesPerProduct(kkAdminEng);
            }

            return _getProductAttributesPerProduct.getProductAttributesPerProduct(sessionId, productId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete the productAttribute.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param productAttributeId
     *            The numeric id of the product attribute
     * @throws KKAdminException
     */
     public void deleteProductAttribute(String sessionId, int productAttributeId) throws KKAdminException
     {
         try
         {
            if (_deleteProductAttribute == null)
            {
                _deleteProductAttribute = new DeleteProductAttribute(kkAdminEng);
            }

            _deleteProductAttribute.deleteProductAttribute(sessionId, productAttributeId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete the productAttributes Per product.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param productId
     *            The numeric id of the product
     * @throws KKAdminException
     */
     public void deleteProductAttributesPerProduct(String sessionId, int productId) throws KKAdminException
     {
         try
         {
            if (_deleteProductAttributesPerProduct == null)
            {
                _deleteProductAttributesPerProduct = new DeleteProductAttributesPerProduct(kkAdminEng);
            }

            _deleteProductAttributesPerProduct.deleteProductAttributesPerProduct(sessionId, productId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Edits the product attribute, replacing existing data with data in the prodAttr parameter.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param prodAttr
     *            AdminProductAttribute object
     * @throws KKAdminException
     */
     public void editProductAttribute(String sessionId, AdminProductAttribute prodAttr) throws KKAdminException
     {
         try
         {
            if (_editProductAttribute == null)
            {
                _editProductAttribute = new EditProductAttribute(kkAdminEng);
            }

            _editProductAttribute.editProductAttribute(sessionId, prodAttr);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Inserts the product attribute.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param prodAttr
     *            An AdminProductAttribute object
     * @return Returns the primary key of the new product attribute
     * @throws KKAdminException
     */
     public int insertProductAttribute(String sessionId, AdminProductAttribute prodAttr) throws KKAdminException
     {
         try
         {
            if (_insertProductAttribute == null)
            {
                _insertProductAttribute = new InsertProductAttribute(kkAdminEng);
            }

            return _insertProductAttribute.insertProductAttribute(sessionId, prodAttr);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * The array of product options will all be inserted with the same id which is calculated by the
     * system. Each option must have a different language id.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param productOptions
     *            An array of AdminProductOption objects
     * @return Id of inserted options
     * @throws KKAdminException
     */
     public int insertProductOptions(String sessionId, AdminProductOption[] productOptions) throws KKAdminException
     {
         try
         {
            if (_insertProductOptions == null)
            {
                _insertProductOptions = new InsertProductOptions(kkAdminEng);
            }

            return _insertProductOptions.insertProductOptions(sessionId, productOptions);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * The array of product option values will all be inserted with the same id which is calculated
     * by the system. Each option value must have a different language id.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param productOptionValues
     *            An array of AdminProductOptionValue objects
     * @param productOptionId
     *            The numeric id of the AdminProductOption object
     * @return Id of inserted option values
     * @throws KKAdminException
     */
     public int insertProductOptionValues(String sessionId, AdminProductOptionValue[] productOptionValues, int productOptionId) throws KKAdminException
     {
         try
         {
            if (_insertProductOptionValues == null)
            {
                _insertProductOptionValues = new InsertProductOptionValues(kkAdminEng);
            }

            return _insertProductOptionValues.insertProductOptionValues(sessionId, productOptionValues, productOptionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * The given sessionId is checked to see whether it exists and whether it is has timed out. If
     * it is valid, the expiry attribute is updated and the customer id is returned. An exception is
     * thrown if the session is invalid.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @return Customer Id if successful
     * @throws KKAdminException
     *             Thrown if the session is invalid
     */
     public int checkSession(String sessionId) throws KKAdminException
     {
         try
         {
            if (_checkSession == null)
            {
                _checkSession = new CheckSession(kkAdminEng);
            }

            return _checkSession.checkSession(sessionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Used to log into the Admin application and get a session Id.
     * 
     * @param user
     *            Admin username
     * @param password
     *            Admin password
     * @return SessionId if successful which is used on subsequent calls to the Admin interface,
     *         otherwise null
     * @throws KKAdminException
     */
     public String login(String user, String password) throws KKAdminException
     {
         try
         {
            if (_login == null)
            {
                _login = new Login(kkAdminEng);
            }

            return _login.login(user, password);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Used to logout the user with the specified sessionId.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @throws KKAdminException
     */
     public void logout(String sessionId) throws KKAdminException
     {
         try
         {
            if (_logout == null)
            {
                _logout = new Logout(kkAdminEng);
            }

            _logout.logout(sessionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This returns an AdminTaxRateSearchResult object.
     * 
     * @return Returns an AdminTaxRateSearchResult object
     * @throws KKAdminException
     */
     public AdminTaxRateSearchResult getAllTaxRates() throws KKAdminException
     {
         try
         {
            if (_getAllTaxRates == null)
            {
                _getAllTaxRates = new GetAllTaxRates(kkAdminEng);
            }

            return _getAllTaxRates.getAllTaxRates();
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This returns an AdminTaxRateSearchResult object.
     * 
     * @param search
     *            the definition of the search - can be null
     * @param offset
     *            the offset in the database
     * @param size
     *            the number of records from the specified offset
     * @return Returns an AdminTaxRateSearchResult object
     * @throws KKAdminException
     */
     public AdminTaxRateSearchResult getTaxRates(AdminTaxRateSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getTaxRates == null)
            {
                _getTaxRates = new GetTaxRates(kkAdminEng);
            }

            return _getTaxRates.getTaxRates(search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete an AdminTaxRate object referenced by it's id.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param id
     *            A TaxRate id
     * @return returns the id of the deleted TaxRate
     * @throws KKAdminException
     */
     public int deleteTaxRate(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_deleteTaxRate == null)
            {
                _deleteTaxRate = new DeleteTaxRate(kkAdminEng);
            }

            return _deleteTaxRate.deleteTaxRate(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an AdminTaxRate object
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param insertObj
     *            An AdminTaxRate object
     * @return returns the id of the inserted AdminTaxRate object
     * @throws KKAdminException
     */
     public int insertTaxRate(String sessionId, AdminTaxRate insertObj) throws KKAdminException
     {
         try
         {
            if (_insertTaxRate == null)
            {
                _insertTaxRate = new InsertTaxRate(kkAdminEng);
            }

            return _insertTaxRate.insertTaxRate(sessionId, insertObj);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update an AdminTaxRate object
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param updateObj
     *            An AdminTaxRate object
     * @return returns the id of the updated AdminTaxRate object
     * @throws KKAdminException
     */
     public int updateTaxRate(String sessionId, AdminTaxRate updateObj) throws KKAdminException
     {
         try
         {
            if (_updateTaxRate == null)
            {
                _updateTaxRate = new UpdateTaxRate(kkAdminEng);
            }

            return _updateTaxRate.updateTaxRate(sessionId, updateObj);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This returns an AdminZoneSearchResult object.
     * 
     * @param search
     *            the definition of the search - can be null
     * @param offset
     *            the offset in the database
     * @param size
     *            the number of records from the specified offset
     * @return Returns an AdminZoneSearchResult object
     * @throws KKAdminException
     */
     public AdminZoneSearchResult getZones(AdminZoneSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getZones == null)
            {
                _getZones = new GetZones(kkAdminEng);
            }

            return _getZones.getZones(search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete an AdminZone object referenced by it's id.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param id
     *            A Zone id
     * @return returns the id of the deleted Zone
     * @throws KKAdminException
     */
     public int deleteZone(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_deleteZone == null)
            {
                _deleteZone = new DeleteZone(kkAdminEng);
            }

            return _deleteZone.deleteZone(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an AdminZone object
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param insertObj
     *            An AdminZone object
     * @return returns the id of the inserted AdminZone object
     * @throws KKAdminException
     */
     public int insertZone(String sessionId, AdminZone insertObj) throws KKAdminException
     {
         try
         {
            if (_insertZone == null)
            {
                _insertZone = new InsertZone(kkAdminEng);
            }

            return _insertZone.insertZone(sessionId, insertObj);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update an AdminZone object
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param updateObj
     *            An AdminZone object
     * @return returns the id of the updated AdminZone object
     * @throws KKAdminException
     */
     public int updateZone(String sessionId, AdminZone updateObj) throws KKAdminException
     {
         try
         {
            if (_updateZone == null)
            {
                _updateZone = new UpdateZone(kkAdminEng);
            }

            return _updateZone.updateZone(sessionId, updateObj);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This returns an AdminTaxClassSearchResult object.
     * 
     * @param search
     *            the definition of the search - can be null
     * @return Returns an AdminTaxClassSearchResult object
     * @throws KKAdminException
     */
     public AdminTaxClassSearchResult getTaxClasses(AdminTaxClassSearch search) throws KKAdminException
     {
         try
         {
            if (_getTaxClasses == null)
            {
                _getTaxClasses = new GetTaxClasses(kkAdminEng);
            }

            return _getTaxClasses.getTaxClasses(search);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete an AdminTaxClass object referenced by it's id.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param id
     *            A TaxClass id
     * @return returns the id of the deleted TaxClass
     * @throws KKAdminException
     */
     public int deleteTaxClass(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_deleteTaxClass == null)
            {
                _deleteTaxClass = new DeleteTaxClass(kkAdminEng);
            }

            return _deleteTaxClass.deleteTaxClass(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an AdminTaxClass object
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param insertObj
     *            An AdminTaxClass object
     * @return returns the id of the inserted AdminTaxClass object
     * @throws KKAdminException
     */
     public int insertTaxClass(String sessionId, AdminTaxClass insertObj) throws KKAdminException
     {
         try
         {
            if (_insertTaxClass == null)
            {
                _insertTaxClass = new InsertTaxClass(kkAdminEng);
            }

            return _insertTaxClass.insertTaxClass(sessionId, insertObj);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update an AdminTaxClass object
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param updateObj
     *            An AdminTaxClass object
     * @return returns the id of the updated AdminTaxClass object
     * @throws KKAdminException
     */
     public int updateTaxClass(String sessionId, AdminTaxClass updateObj) throws KKAdminException
     {
         try
         {
            if (_updateTaxClass == null)
            {
                _updateTaxClass = new UpdateTaxClass(kkAdminEng);
            }

            return _updateTaxClass.updateTaxClass(sessionId, updateObj);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This returns an AdminAddressFormatSearchResult object.
     * 
     * @param search
     *            the definition of the search - can be null
     * @return Returns an AdminAddressFormatSearchResult object
     * @throws KKAdminException
     */
     public AdminAddressFormatSearchResult getAddressFormats(AdminAddressFormatSearch search) throws KKAdminException
     {
         try
         {
            if (_getAddressFormats == null)
            {
                _getAddressFormats = new GetAddressFormats(kkAdminEng);
            }

            return _getAddressFormats.getAddressFormats(search);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete an AdminAddressFormat object referenced by it's id.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param id
     *            A AddressFormat id
     * @return returns the id of the deleted AddressFormat
     * @throws KKAdminException
     */
     public int deleteAddressFormat(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_deleteAddressFormat == null)
            {
                _deleteAddressFormat = new DeleteAddressFormat(kkAdminEng);
            }

            return _deleteAddressFormat.deleteAddressFormat(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an AdminAddressFormat object
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param insertObj
     *            An AdminAddressFormat object
     * @return returns the id of the inserted AdminAddressFormat object
     * @throws KKAdminException
     */
     public int insertAddressFormat(String sessionId, AdminAddressFormat insertObj) throws KKAdminException
     {
         try
         {
            if (_insertAddressFormat == null)
            {
                _insertAddressFormat = new InsertAddressFormat(kkAdminEng);
            }

            return _insertAddressFormat.insertAddressFormat(sessionId, insertObj);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update an AdminAddressFormat object
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param updateObj
     *            An AdminAddressFormat object
     * @return returns the id of the updated AdminAddressFormat object
     * @throws KKAdminException
     */
     public int updateAddressFormat(String sessionId, AdminAddressFormat updateObj) throws KKAdminException
     {
         try
         {
            if (_updateAddressFormat == null)
            {
                _updateAddressFormat = new UpdateAddressFormat(kkAdminEng);
            }

            return _updateAddressFormat.updateAddressFormat(sessionId, updateObj);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Search for IpnHistory records with search criteria and order by criteria. An IpnHistory
     * record is created whenever a payment gateway makes an asynchronous callback to KonaKart with
     * information regarding the outcome of the payment attempt.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param dataDesc
     *            Used to control the data offset, limit the number of items returned and set the
     *            sort order
     * @param ipnSearch
     *            An object containing the search criteria
     * @return Returns an AdminIpnHistories
     * @throws KKAdminException
     */
     public AdminIpnHistories searchForIpnHistory(String sessionId, AdminDataDescriptor dataDesc, AdminIpnSearch ipnSearch) throws KKAdminException
     {
         try
         {
            if (_searchForIpnHistory == null)
            {
                _searchForIpnHistory = new SearchForIpnHistory(kkAdminEng);
            }

            return _searchForIpnHistory.searchForIpnHistory(sessionId, dataDesc, ipnSearch);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Save the AdminIpnHistory object in the database.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param ipnHistory
     *            the AdminIpnHistory record to insert into the database
     * @return Id of newly created record
     * @throws KKAdminException
     */
     public int insertIpnHistory(String sessionId, AdminIpnHistory ipnHistory) throws KKAdminException
     {
         try
         {
            if (_insertIpnHistory == null)
            {
                _insertIpnHistory = new InsertIpnHistory(kkAdminEng);
            }

            return _insertIpnHistory.insertIpnHistory(sessionId, ipnHistory);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Deletes all sessions that have expired. It is useful to make this call at regular intervals
     * in order to reduce the size of the database table that retains the session information.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @return Returns the number of remaining sessions
     * @throws KKAdminException
     */
     public int deleteExpiredSessions(String sessionId) throws KKAdminException
     {
         try
         {
            if (_deleteExpiredSessions == null)
            {
                _deleteExpiredSessions = new DeleteExpiredSessions(kkAdminEng);
            }

            return _deleteExpiredSessions.deleteExpiredSessions(sessionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * The connector parameter isn't currently used. An attempt is made to connect to the DB using
     * the DB connection parameters configured in the properties file. A partially filled
     * AdminDBConnector object is returned. If the connection is successful then the connected
     * parameter of the return object is set to true. Otherwise it is set to false.
     * 
     * @param connector
     * @return An AdminDBConnector object with details about the DB connection
     * @throws KKAdminException
     */
     public AdminDBConnector testDB(AdminDBConnector connector) throws KKAdminException
     {
         try
         {
            if (_testDB == null)
            {
                _testDB = new TestDB(kkAdminEng);
            }

            return _testDB.testDB(connector);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Sets a Configuration Value for the specified key
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param key
     *            key whose value will be set
     * @param value
     *            value to set
     * @return returns true if the value is set correctly, false if the key wasn't found
     * @throws KKAdminException
     */
     public boolean setConfigurationValue(String sessionId, String key, String value) throws KKAdminException
     {
         try
         {
            if (_setConfigurationValue == null)
            {
                _setConfigurationValue = new SetConfigurationValue(kkAdminEng);
            }

            return _setConfigurationValue.setConfigurationValue(sessionId, key, value);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Gets the Config files defined in konakart_config_files.xml
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @return an array of AdminFile objects that define the config files declared on the system
     * @throws KKAdminException
     */
     public AdminFile[] getConfigFiles(String sessionId) throws KKAdminException
     {
         try
         {
            if (_getConfigFiles == null)
            {
                _getConfigFiles = new GetConfigFiles(kkAdminEng);
            }

            return _getConfigFiles.getConfigFiles(sessionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Retrieves the reports as an array of AdminReport objects that define the set of reports
     * currently defined on the system.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @return an array of AdminReport objects that define the reports defined on the system
     * @throws KKAdminException
     */
     public AdminReport[] getReports(String sessionId) throws KKAdminException
     {
         try
         {
            if (_getReports == null)
            {
                _getReports = new GetReports(kkAdminEng);
            }

            return _getReports.getReports(sessionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Reloads the reports
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @throws KKAdminException
     */
     public void reloadReports(String sessionId) throws KKAdminException
     {
         try
         {
            if (_reloadReports == null)
            {
                _reloadReports = new ReloadReports(kkAdminEng);
            }

            _reloadReports.reloadReports(sessionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get the file contents. Note that it uses the line terminators appropriate for the platform
     * where the file resides.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param fileName
     *            the filename in the server's context
     * @return the file contents as a String
     * @throws KKAdminException
     *             if the file's not present or can't be read, or it's not a text file
     */
     public String getFileContents(String sessionId, String fileName) throws KKAdminException
     {
         try
         {
            if (_getFileContents == null)
            {
                _getFileContents = new GetFileContents(kkAdminEng);
            }

            return _getFileContents.getFileContents(sessionId, fileName);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get the file contents as a byte array.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param fileName
     *            the filename in the server's context
     * @return the file contents as a byte array
     * @throws KKAdminException
     *             if the file's not present or can't be read
     */
     public byte[] getFileContentsAsByteArray(String sessionId, String fileName) throws KKAdminException
     {
         try
         {
            if (_getFileContentsAsByteArray == null)
            {
                _getFileContentsAsByteArray = new GetFileContentsAsByteArray(kkAdminEng);
            }

            return _getFileContentsAsByteArray.getFileContentsAsByteArray(sessionId, fileName);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get the file contents from the specified byte offset.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param fileName
     *            the filename in the server's context
     * @param offset
     *            the offset from the start of the file in bytes
     * @return the file contents from the specified offset as a String
     * @throws KKAdminException
     *             if the file's not present or can't be read, or it's not a text file
     */
     public String tailFile(String sessionId, String fileName, int offset) throws KKAdminException
     {
         try
         {
            if (_tailFile == null)
            {
                _tailFile = new TailFile(kkAdminEng);
            }

            return _tailFile.tailFile(sessionId, fileName, offset);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Writes the specified file contents into the specified file. It creates the file if it doesn't
     * already exist.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param fileName
     *            the filename in the server's context
     * @param fileContents
     *            the file contents to write
     * @throws KKAdminException
     *             on any Security or IO problems that prevent us from saving the data to the file.
     */
     public void saveFileContents(String sessionId, String fileName, String fileContents) throws KKAdminException
     {
         try
         {
            if (_saveFileContents == null)
            {
                _saveFileContents = new SaveFileContents(kkAdminEng);
            }

            _saveFileContents.saveFileContents(sessionId, fileName, fileContents);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete the file.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param fileName
     *            the filename in the server's context
     * @throws KKAdminException
     *             if the file's not present or can't be deleted
     * @return true if the file was deleted, otherwise false.
     */
     public boolean deleteFile(String sessionId, String fileName) throws KKAdminException
     {
         try
         {
            if (_deleteFile == null)
            {
                _deleteFile = new DeleteFile(kkAdminEng);
            }

            return _deleteFile.deleteFile(sessionId, fileName);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Copy the source file to the destination file.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param srcFileName
     *            the filename in the server's context to copy from
     * @param dstFileName
     *            the filename in the server's context to copy to
     * @throws KKAdminException
     *             if the source file's not present or can't be copied
     * @return true if the file was copied successfully, otherwise an exception is thrown.
     */
     public boolean copyFile(String sessionId, String srcFileName, String dstFileName) throws KKAdminException
     {
         try
         {
            if (_copyFile == null)
            {
                _copyFile = new CopyFile(kkAdminEng);
            }

            return _copyFile.copyFile(sessionId, srcFileName, dstFileName);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Add the array of categories to the promotion identified by promotionId. The rule parameter
     * can take the following values:
     * <ul>
     * <li>AdminPromotionMgr.EXCLUDE : The categories in the array are excluded from the promotion</li>
     * <li>AdminPromotionMgr.INCLUDE : The categories in the array are included in the promotion</li>
     * </ul>
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param categories
     *            An array of Admin category objects
     * @param promotionId
     *            The numeric id of the promotion
     * @param rule
     *            An integer defining the rule for adding the categories
     * @throws KKAdminException
     */
     public void addCategoriesToPromotion(String sessionId, AdminCategory[] categories, int promotionId, int rule) throws KKAdminException
     {
         try
         {
            if (_addCategoriesToPromotion == null)
            {
                _addCategoriesToPromotion = new AddCategoriesToPromotion(kkAdminEng);
            }

            _addCategoriesToPromotion.addCategoriesToPromotion(sessionId, categories, promotionId, rule);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Add the array of coupons to the promotion identified by promotionId. We assume that the
     * coupon has already been inserted. The coupon must already exist since this method associates
     * the coupons to the promotion rather than inserting them.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param coupons
     *            An array of AdminCoupon objects
     * @param promotionId
     *            The numeric id of the promotion
     * @throws KKAdminException
     */
     public void addCouponsToPromotion(String sessionId, AdminCoupon[] coupons, int promotionId) throws KKAdminException
     {
         try
         {
            if (_addCouponsToPromotion == null)
            {
                _addCouponsToPromotion = new AddCouponsToPromotion(kkAdminEng);
            }

            _addCouponsToPromotion.addCouponsToPromotion(sessionId, coupons, promotionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Add the array of promotions to the coupon identified by couponId. We assume that the
     * promotion has already been inserted. The promotion must already exist since this method
     * associates the promotions to the coupon rather than inserting them.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param promotions
     *            An array of AdminPromotion objects
     * @param couponId
     *            The numeric id of the coupon
     * @throws KKAdminException
     */
     public void addPromotionsToCoupon(String sessionId, AdminPromotion[] promotions, int couponId) throws KKAdminException
     {
         try
         {
            if (_addPromotionsToCoupon == null)
            {
                _addPromotionsToCoupon = new AddPromotionsToCoupon(kkAdminEng);
            }

            _addPromotionsToCoupon.addPromotionsToCoupon(sessionId, promotions, couponId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Add the array of customers to the promotion identified by promotionId. The maxUse parameter
     * determines how many times the customers may use the promotion. The rule parameter can take
     * the following values:
     * <ul>
     * <li>AdminPromotionMgr.EXCLUDE : The customers in the array are excluded from the promotion</li>
     * <li>AdminPromotionMgr.INCLUDE : The customers in the array are included in the promotion</li>
     * </ul>
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param customers
     *            An array of AdminCustomer objects
     * @param promotionId
     *            The numeric id of the promotion
     * @param rule
     *            An integer defining the rule for adding the customers
     * @param maxUse
     *            -1 for unlimited use
     * @throws KKAdminException
     */
     public void addCustomersToPromotion(String sessionId, AdminCustomer[] customers, int promotionId, int rule, int maxUse) throws KKAdminException
     {
         try
         {
            if (_addCustomersToPromotion == null)
            {
                _addCustomersToPromotion = new AddCustomersToPromotion(kkAdminEng);
            }

            _addCustomersToPromotion.addCustomersToPromotion(sessionId, customers, promotionId, rule, maxUse);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Add the array of customer groups (identified by the group ids) to the promotion identified by
     * promotionId. The rule parameter can take the following values:
     * <ul>
     * <li>AdminPromotionMgr.EXCLUDE : The customer groups in the array are excluded from the
     * promotion</li>
     * <li>AdminPromotionMgr.INCLUDE : The customer groups in the array are included in the
     * promotion</li>
     * </ul>
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param groupIds
     *            An array of integers containing the group ids
     * @param promotionId
     *            The numeric id of the promotion
     * @param rule
     *            An integer defining the rule for adding the customers
     * @throws KKAdminException
     */
     public void addCustomerGroupsToPromotion(String sessionId, int[] groupIds, int promotionId, int rule) throws KKAdminException
     {
         try
         {
            if (_addCustomerGroupsToPromotion == null)
            {
                _addCustomerGroupsToPromotion = new AddCustomerGroupsToPromotion(kkAdminEng);
            }

            _addCustomerGroupsToPromotion.addCustomerGroupsToPromotion(sessionId, groupIds, promotionId, rule);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Add to the promotion identified by promotionId, the customers who have or haven't placed an
     * order since the lastOrderDate passed in as a parameter. The maxUse parameter determines how
     * many times the customers may use the promotion. The rule parameter can take the following
     * values:
     * <ul>
     * <li>AdminPromotionMgr.EXCLUDE : The customers in the array are excluded from the promotion</li>
     * <li>AdminPromotionMgr.INCLUDE : The customers in the array are included in the promotion</li>
     * </ul>
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param lastOrderDate
     *            The last time a customer placed an order
     * @param havePlacedOrder
     *            If true we add customers that have placed an order. Otherwise, those that haven't.
     * @param promotionId
     *            The numeric id of the promotion
     * @param rule
     *            An integer defining the rule for adding the customers
     * @param maxUse
     *            -1 for unlimited use
     * @throws KKAdminException
     */
     public void addCustomersToPromotionPerOrdersMade(String sessionId, Calendar lastOrderDate, boolean havePlacedOrder, int promotionId, int rule, int maxUse) throws KKAdminException
     {
         try
         {
            if (_addCustomersToPromotionPerOrdersMade == null)
            {
                _addCustomersToPromotionPerOrdersMade = new AddCustomersToPromotionPerOrdersMade(kkAdminEng);
            }

            _addCustomersToPromotionPerOrdersMade.addCustomersToPromotionPerOrdersMade(sessionId, lastOrderDate, havePlacedOrder, promotionId, rule, maxUse);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Add the array of manufacturers to the promotion identified by promotionId. The rule parameter
     * can take the following values:
     * <ul>
     * <li>AdminPromotionMgr.EXCLUDE : The manufacturers in the array are excluded from the
     * promotion</li>
     * <li>AdminPromotionMgr.INCLUDE : The manufacturers in the array are included in the promotion</li>
     * </ul>
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param manufacturers
     *            An array of AdminManufacturer objects
     * @param promotionId
     *            The numeric id of the promotion
     * @param rule
     *            An integer defining the rule for adding the manufacturers
     * @throws KKAdminException
     */
     public void addManufacturersToPromotion(String sessionId, AdminManufacturer[] manufacturers, int promotionId, int rule) throws KKAdminException
     {
         try
         {
            if (_addManufacturersToPromotion == null)
            {
                _addManufacturersToPromotion = new AddManufacturersToPromotion(kkAdminEng);
            }

            _addManufacturersToPromotion.addManufacturersToPromotion(sessionId, manufacturers, promotionId, rule);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Add the array of expressions to the promotion identified by promotionId.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param expressions
     *            An array of AdminExpression objects
     * @param promotionId
     *            The numeric id of the promotion
     * @throws KKAdminException
     */
     public void addExpressionsToPromotion(String sessionId, AdminExpression[] expressions, int promotionId) throws KKAdminException
     {
         try
         {
            if (_addExpressionsToPromotion == null)
            {
                _addExpressionsToPromotion = new AddExpressionsToPromotion(kkAdminEng);
            }

            _addExpressionsToPromotion.addExpressionsToPromotion(sessionId, expressions, promotionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Add the array of products to the promotion. Each product may have an array of options. When
     * this array exists, we only add those particular options to the promotion. Otherwise we set
     * the option and option value ids to -1. The rule parameter can take the following values:
     * <ul>
     * <li>AdminPromotionMgr.EXCLUDE : The products in the array are excluded from the promotion</li>
     * <li>AdminPromotionMgr.INCLUDE : The products in the array are included in the promotion</li>
     * </ul>
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param products
     *            An array of AdminProduct objects
     * @param promotionId
     *            The numeric id of the promotion
     * @param rule
     *            An integer defining the rule for adding the products
     * @throws KKAdminException
     */
     public void addProductsToPromotion(String sessionId, AdminProduct[] products, int promotionId, int rule) throws KKAdminException
     {
         try
         {
            if (_addProductsToPromotion == null)
            {
                _addProductsToPromotion = new AddProductsToPromotion(kkAdminEng);
            }

            _addProductsToPromotion.addProductsToPromotion(sessionId, products, promotionId, rule);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Add the array of gift certificate products to the promotion. Each product may have an array
     * of options. When this array exists, we only add those particular options to the promotion.
     * Otherwise we set the option and option value ids to -1.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param giftCertificates
     *            An array of AdminProduct gift certificate objects
     * @param promotionId
     *            The numeric id of the promotion
     * @throws KKAdminException
     */
     public void addGiftCertificatesToPromotion(String sessionId, AdminProduct[] giftCertificates, int promotionId) throws KKAdminException
     {
         try
         {
            if (_addGiftCertificatesToPromotion == null)
            {
                _addGiftCertificatesToPromotion = new AddGiftCertificatesToPromotion(kkAdminEng);
            }

            _addGiftCertificatesToPromotion.addGiftCertificatesToPromotion(sessionId, giftCertificates, promotionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete the promotion referenced by promotionId. Any coupons being used only by this promotion
     * are also deleted. All of the relationships that the promotion may have with customers,
     * manufacturers, categories, products and coupons are also deleted.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param promotionId
     *            The numeric id of the promotion
     * @throws KKAdminException
     */
     public void deletePromotion(String sessionId, int promotionId) throws KKAdminException
     {
         try
         {
            if (_deletePromotion == null)
            {
                _deletePromotion = new DeletePromotion(kkAdminEng);
            }

            _deletePromotion.deletePromotion(sessionId, promotionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete the coupon referenced by couponId. Any relationships that the coupon may have with
     * products are also deleted.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param couponId
     *            The numeric id of the coupon
     * @throws KKAdminException
     */
     public void deleteCoupon(String sessionId, int couponId) throws KKAdminException
     {
         try
         {
            if (_deleteCoupon == null)
            {
                _deleteCoupon = new DeleteCoupon(kkAdminEng);
            }

            _deleteCoupon.deleteCoupon(sessionId, couponId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Edits the coupon, replacing existing data with data in the coupon parameter.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param coupon
     *            An Admin coupon object
     * @throws KKAdminException
     */
     public void editCoupon(String sessionId, AdminCoupon coupon) throws KKAdminException
     {
         try
         {
            if (_editCoupon == null)
            {
                _editCoupon = new EditCoupon(kkAdminEng);
            }

            _editCoupon.editCoupon(sessionId, coupon);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Edits the promotion, replacing existing data with data in the promotion parameter.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param promotion
     *            AdminPromotion object
     * @throws KKAdminException
     */
     public void editPromotion(String sessionId, AdminPromotion promotion) throws KKAdminException
     {
         try
         {
            if (_editPromotion == null)
            {
                _editPromotion = new EditPromotion(kkAdminEng);
            }

            _editPromotion.editPromotion(sessionId, promotion);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an array of Admin Coupon objects associated with the promotion identified by the
     * promotionId parameter. The array is null if no promotions exist.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param promotionId
     *            The numeric id of the promotion
     * @return Returns an array of AdminCoupon objects
     * @throws KKAdminException
     */
     public AdminCoupon[] getCouponsPerPromotion(String sessionId, int promotionId) throws KKAdminException
     {
         try
         {
            if (_getCouponsPerPromotion == null)
            {
                _getCouponsPerPromotion = new GetCouponsPerPromotion(kkAdminEng);
            }

            return _getCouponsPerPromotion.getCouponsPerPromotion(sessionId, promotionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This returns an AdminCouponSearchResult object containing an array of AdminCoupons.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param search
     *            the search object that defines the search parameters and sort order
     * @param offset
     *            the offset in the database
     * @param size
     *            the number of records from the specified offset
     * @return AdminCoupon[]
     * @throws KKAdminException
     */
     public AdminCouponSearchResult getCoupons(String sessionId, AdminCouponSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getCoupons == null)
            {
                _getCoupons = new GetCoupons(kkAdminEng);
            }

            return _getCoupons.getCoupons(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get an array of Admin product objects for a promotion. The AdminProductSearch object must
     * have the promotionId set to a valid promotion.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param search
     *            the search object that defines the search parameters and sort order
     * @param offset
     *            the offset in the database
     * @param size
     *            the number of records from the specified offset
     * @return Returns an AdminProducts objects
     * @throws KKAdminException
     */
     public AdminProducts getProductsPerPromotion(String sessionId, AdminProductSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getProductsPerPromotion == null)
            {
                _getProductsPerPromotion = new GetProductsPerPromotion(kkAdminEng);
            }

            return _getProductsPerPromotion.getProductsPerPromotion(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get an array of Admin product gift certificate objects for a promotion. The
     * AdminProductSearch object must have the promotionId set to a valid promotion.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param search
     *            the search object that defines the search parameters and sort order
     * @param offset
     *            the offset in the database
     * @param size
     *            the number of records from the specified offset
     * @return Returns an AdminProducts objects
     * @throws KKAdminException
     */
     public AdminProducts getGiftCertificatesPerPromotion(String sessionId, AdminProductSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getGiftCertificatesPerPromotion == null)
            {
                _getGiftCertificatesPerPromotion = new GetGiftCertificatesPerPromotion(kkAdminEng);
            }

            return _getGiftCertificatesPerPromotion.getGiftCertificatesPerPromotion(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get a promotion object and an array of associated coupon objects when applicable.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param id
     *            The numeric id of the AdminPromotion object
     * @param includeCoupons
     *            If true we add a coupon array to the promotion if any coupons exist
     * @param includeStats
     *            If true we calculate how many manufacturers, products, categories, customers,
     *            expressions and coupons are included or excluded from the promotion
     * @return Returns an AdminPromotion object with an array of coupons if applicable
     * @throws KKAdminException
     */
     public AdminPromotion getPromotion(String sessionId, int id, boolean includeCoupons, boolean includeStats) throws KKAdminException
     {
         try
         {
            if (_getPromotion == null)
            {
                _getPromotion = new GetPromotion(kkAdminEng);
            }

            return _getPromotion.getPromotion(sessionId, id, includeCoupons, includeStats);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This returns an AdminPromotionSearchResult object containing an array of AdminPromotions.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param search
     *            the search object that defines the search parameters and sort order
     * @param offset
     *            the offset in the database
     * @param size
     *            the number of records from the specified offset
     * @return Returns an AdminPromotionSearchResult object
     * @throws KKAdminException
     */
     public AdminPromotionSearchResult getPromotions(String sessionId, AdminPromotionSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getPromotions == null)
            {
                _getPromotions = new GetPromotions(kkAdminEng);
            }

            return _getPromotions.getPromotions(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns a count of the number of AdminPromotions.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param search
     *            the search object that defines the search parameters and sort order
     * @return A count of the number of Promotions
     * @throws KKAdminException
     */
     public int getPromotionsCount(String sessionId, AdminPromotionSearch search) throws KKAdminException
     {
         try
         {
            if (_getPromotionsCount == null)
            {
                _getPromotionsCount = new GetPromotionsCount(kkAdminEng);
            }

            return _getPromotionsCount.getPromotionsCount(sessionId, search);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get an array of Admin promotion objects for a coupon. A coupon may apply to multiple
     * promotions.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param couponId
     *            The numeric id of the coupon
     * @return Returns an array of AdminPromotion objects
     * @throws KKAdminException
     */
     public AdminPromotion[] getPromotionsPerCoupon(String sessionId, int couponId) throws KKAdminException
     {
         try
         {
            if (_getPromotionsPerCoupon == null)
            {
                _getPromotionsPerCoupon = new GetPromotionsPerCoupon(kkAdminEng);
            }

            return _getPromotionsPerCoupon.getPromotionsPerCoupon(sessionId, couponId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Inserts a coupon and also a record in the promotion_to_coupon table to associate the coupon
     * to a promotion.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param coupon
     *            An AdminCoupon object
     * @param promotionId
     *            The numeric id of the promotion
     * @return Returns the id of the inserted coupon
     * @throws KKAdminException
     */
     public int insertCouponForPromotion(String sessionId, AdminCoupon coupon, int promotionId) throws KKAdminException
     {
         try
         {
            if (_insertCouponForPromotion == null)
            {
                _insertCouponForPromotion = new InsertCouponForPromotion(kkAdminEng);
            }

            return _insertCouponForPromotion.insertCouponForPromotion(sessionId, coupon, promotionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Inserts a coupon.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param coupon
     *            An AdminCoupon object
     * @return Returns the id of the inserted coupon
     * @throws KKAdminException
     */
     public int insertCoupon(String sessionId, AdminCoupon coupon) throws KKAdminException
     {
         try
         {
            if (_insertCoupon == null)
            {
                _insertCoupon = new InsertCoupon(kkAdminEng);
            }

            return _insertCoupon.insertCoupon(sessionId, coupon);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Inserts a promotion.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param prom
     *            The AdminPromotion object
     * @return Returns the id of the inserted promotion
     * @throws KKAdminException
     */
     public int insertPromotion(String sessionId, AdminPromotion prom) throws KKAdminException
     {
         try
         {
            if (_insertPromotion == null)
            {
                _insertPromotion = new InsertPromotion(kkAdminEng);
            }

            return _insertPromotion.insertPromotion(sessionId, prom);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Remove an array of categories from the promotion identified by the promotionId parameter. If
     * the array is null, then all categories are removed from the promotion.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param categories
     *            An array of AdminCategory objects
     * @param promotionId
     *            The numeric id of the promotion
     * @throws KKAdminException
     */
     public void removeCategoriesFromPromotion(String sessionId, AdminCategory[] categories, int promotionId) throws KKAdminException
     {
         try
         {
            if (_removeCategoriesFromPromotion == null)
            {
                _removeCategoriesFromPromotion = new RemoveCategoriesFromPromotion(kkAdminEng);
            }

            _removeCategoriesFromPromotion.removeCategoriesFromPromotion(sessionId, categories, promotionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Remove an array of coupons from the promotion identified by the promotionId parameter. If the
     * array is null, then all coupons are removed from the promotion.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param coupons
     *            An array of AdminCoupon objects
     * @param promotionId
     *            The numeric id of the promotion
     * @throws KKAdminException
     */
     public void removeCouponsFromPromotion(String sessionId, AdminCoupon[] coupons, int promotionId) throws KKAdminException
     {
         try
         {
            if (_removeCouponsFromPromotion == null)
            {
                _removeCouponsFromPromotion = new RemoveCouponsFromPromotion(kkAdminEng);
            }

            _removeCouponsFromPromotion.removeCouponsFromPromotion(sessionId, coupons, promotionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Remove an array of promotions from the coupon identified by the couponId parameter. If the
     * array is null, then all promotions are removed from the coupon.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param promotions
     *            An array of AdminPromotion objects
     * @param couponId
     *            The numeric id of the coupon
     * @throws KKAdminException
     */
     public void removePromotionsFromCoupon(String sessionId, AdminPromotion[] promotions, int couponId) throws KKAdminException
     {
         try
         {
            if (_removePromotionsFromCoupon == null)
            {
                _removePromotionsFromCoupon = new RemovePromotionsFromCoupon(kkAdminEng);
            }

            _removePromotionsFromCoupon.removePromotionsFromCoupon(sessionId, promotions, couponId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Remove an array of customers from the promotion identified by the promotionId parameter. If
     * the array is null, then all customers are removed from the promotion.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param customers
     *            An array of AdminCustomer objects
     * @param promotionId
     *            The numeric id of the promotion
     * @throws KKAdminException
     */
     public void removeCustomersFromPromotion(String sessionId, AdminCustomer[] customers, int promotionId) throws KKAdminException
     {
         try
         {
            if (_removeCustomersFromPromotion == null)
            {
                _removeCustomersFromPromotion = new RemoveCustomersFromPromotion(kkAdminEng);
            }

            _removeCustomersFromPromotion.removeCustomersFromPromotion(sessionId, customers, promotionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Remove an array of customer groups from the promotion identified by the promotionId
     * parameter. If the array is null, then all customer groups are removed from the promotion.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param groupIds
     *            An array of customer group ids
     * @param promotionId
     *            The numeric id of the promotion
     * @throws KKAdminException
     */
     public void removeCustomerGroupsFromPromotion(String sessionId, int[] groupIds, int promotionId) throws KKAdminException
     {
         try
         {
            if (_removeCustomerGroupsFromPromotion == null)
            {
                _removeCustomerGroupsFromPromotion = new RemoveCustomerGroupsFromPromotion(kkAdminEng);
            }

            _removeCustomerGroupsFromPromotion.removeCustomerGroupsFromPromotion(sessionId, groupIds, promotionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Remove an array of manufacturers from the promotion identified by the promotionId parameter.
     * If the array is null, then all manufacturers are removed from the promotion.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param manufacturers
     *            An array of AdminManufacturer objects
     * @param promotionId
     *            The numeric id of the promotion
     * @throws KKAdminException
     */
     public void removeManufacturersFromPromotion(String sessionId, AdminManufacturer[] manufacturers, int promotionId) throws KKAdminException
     {
         try
         {
            if (_removeManufacturersFromPromotion == null)
            {
                _removeManufacturersFromPromotion = new RemoveManufacturersFromPromotion(kkAdminEng);
            }

            _removeManufacturersFromPromotion.removeManufacturersFromPromotion(sessionId, manufacturers, promotionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Remove an array of expressions from the promotion identified by the promotionId parameter. If
     * the array is null, then all expressions are removed from the promotion.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param expressions
     *            An array of AdminExpression objects
     * @param promotionId
     *            The numeric id of the promotion
     * @throws KKAdminException
     */
     public void removeExpressionsFromPromotion(String sessionId, AdminExpression[] expressions, int promotionId) throws KKAdminException
     {
         try
         {
            if (_removeExpressionsFromPromotion == null)
            {
                _removeExpressionsFromPromotion = new RemoveExpressionsFromPromotion(kkAdminEng);
            }

            _removeExpressionsFromPromotion.removeExpressionsFromPromotion(sessionId, expressions, promotionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Remove an array of products from the promotion identified by the promotionId parameter. If
     * the array is null, then all products are removed from the promotion.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param products
     *            An array of AdminProduct objects
     * @param promotionId
     *            The numeric id of the promotion
     * @throws KKAdminException
     */
     public void removeProductsFromPromotion(String sessionId, AdminProduct[] products, int promotionId) throws KKAdminException
     {
         try
         {
            if (_removeProductsFromPromotion == null)
            {
                _removeProductsFromPromotion = new RemoveProductsFromPromotion(kkAdminEng);
            }

            _removeProductsFromPromotion.removeProductsFromPromotion(sessionId, products, promotionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Remove an array of gift certificate products from the promotion identified by the promotionId
     * parameter. If the array is null, then all gift certificate products are removed from the
     * promotion.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param giftCertificates
     *            An array of AdminProduct objects
     * @param promotionId
     *            The numeric id of the promotion
     * @throws KKAdminException
     */
     public void removeGiftCertificatesFromPromotion(String sessionId, AdminProduct[] giftCertificates, int promotionId) throws KKAdminException
     {
         try
         {
            if (_removeGiftCertificatesFromPromotion == null)
            {
                _removeGiftCertificatesFromPromotion = new RemoveGiftCertificatesFromPromotion(kkAdminEng);
            }

            _removeGiftCertificatesFromPromotion.removeGiftCertificatesFromPromotion(sessionId, giftCertificates, promotionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns all of the categories for the promotion identified by promotionId.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param promotionId
     *            The numeric id of the promotion
     * @param languageId
     *            the language Id - or it could be
     *            com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to use the default language
     * @return Array of Category Objects
     * @throws KKAdminException
     */
     public AdminCategory[] getCategoriesPerPromotion(String sessionId, int promotionId, int languageId) throws KKAdminException
     {
         try
         {
            if (_getCategoriesPerPromotion == null)
            {
                _getCategoriesPerPromotion = new GetCategoriesPerPromotion(kkAdminEng);
            }

            return _getCategoriesPerPromotion.getCategoriesPerPromotion(sessionId, promotionId, languageId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns all of the customer groups for the promotion identified by promotionId.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param promotionId
     *            The numeric id of the promotion
     * @param languageId
     *            the language Id - or it could be
     *            com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to use the default language
     * @return Array of Category Objects
     * @throws KKAdminException
     */
     public AdminCustomerGroup[] getCustomerGroupsPerPromotion(String sessionId, int promotionId, int languageId) throws KKAdminException
     {
         try
         {
            if (_getCustomerGroupsPerPromotion == null)
            {
                _getCustomerGroupsPerPromotion = new GetCustomerGroupsPerPromotion(kkAdminEng);
            }

            return _getCustomerGroupsPerPromotion.getCustomerGroupsPerPromotion(sessionId, promotionId, languageId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns all of the manufacturers for the promotion identified by promotionId.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param promotionId
     *            The numeric id of the promotion
     * @return An array of all manufacturers relevant to a promotion
     * @throws KKAdminException
     */
     public AdminManufacturer[] getManufacturersPerPromotion(String sessionId, int promotionId) throws KKAdminException
     {
         try
         {
            if (_getManufacturersPerPromotion == null)
            {
                _getManufacturersPerPromotion = new GetManufacturersPerPromotion(kkAdminEng);
            }

            return _getManufacturersPerPromotion.getManufacturersPerPromotion(sessionId, promotionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Find products related to the product defined by the productId parameter. The relationType
     * defines the relation.
     * <p>
     * Valid values for relationType are:
     * <ul>
     * <li>KonakartAdminConstants.UP_SELL_RELATION - Up Selling. Normally a superior version of the
     * same product.</li>
     * <li>KonakartAdminConstants.CROSS_SELL_RELATION - Cross Selling. Normally similar or related
     * products.</li>
     * <li>KonakartAdminConstants.ACCESSORY_RELATION - Accessories</li>
     * <li>KonakartAdminConstants.DEPENDENT_ITEM_RELATION - Dependent Item. Normally cannot be sold
     * independently such as a warranty.</li>
     * <li>KonakartAdminConstants.BUNDLED_PRODUCTS_RELATION - Bundled product. The bundled products
     * are broken down into their constituent parts.</li>
     * <li>KonakartAdminConstants.BUNDLED_PRODUCTS_NO_SPLIT_RELATION - Bundled product. The bundled
     * products aren't broken down into their constituent parts.</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_1 - Custom relation.</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_2 - Custom relation.</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_3 - Custom relation.</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_4 - Custom relation.</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_5 - Custom relation.</li>
     * </ul>
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param dataDesc
     *            Used to control the data offset, limit the number of items returned and set the
     *            sort order
     * @param productId
     *            The numeric id of the product
     * @param relationType
     * @param languageId
     *            the language Id - or it could be
     *            com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to use the default language
     * @return AdminProducts
     * @throws KKAdminException
     */
     public AdminProducts getRelatedProducts(String sessionId, AdminDataDescriptor dataDesc, int productId, int relationType, int languageId) throws KKAdminException
     {
         try
         {
            if (_getRelatedProducts == null)
            {
                _getRelatedProducts = new GetRelatedProducts(kkAdminEng);
            }

            return _getRelatedProducts.getRelatedProducts(sessionId, dataDesc, productId, relationType, languageId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Find products related to the product defined by the productId parameter. The relationType
     * defines the relation.
     * <p>
     * Valid values for relationType are:
     * <ul>
     * <li>KonakartAdminConstants.UP_SELL_RELATION - Up Selling. Normally a superior version of the
     * same product.</li>
     * <li>KonakartAdminConstants.CROSS_SELL_RELATION - Cross Selling. Normally similar or related
     * products.</li>
     * <li>KonakartAdminConstants.ACCESSORY_RELATION - Accessories</li>
     * <li>KonakartAdminConstants.DEPENDENT_ITEM_RELATION - Dependent Item. Normally cannot be sold
     * independently such as a warranty.</li>
     * <li>KonakartAdminConstants.BUNDLED_PRODUCTS_RELATION - Bundled product. The bundled products
     * are broken down into their constituent parts.</li>
     * <li>KonakartAdminConstants.BUNDLED_PRODUCTS_NO_SPLIT_RELATION - Bundled product. The bundled
     * products aren't broken down into their constituent parts.</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_1 - Custom relation.</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_2 - Custom relation.</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_3 - Custom relation.</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_4 - Custom relation.</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_5 - Custom relation.</li>
     * </ul>
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param dataDesc
     *            Used to control the data offset, limit the number of items returned and set the
     *            sort order
     * @param productId
     *            The numeric id of the product
     * @param relationType
     * @param languageId
     *            the language Id - or it could be
     *            com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to use the default language
     * @param mgrOptions
     *            Allows you to define whether the quantity and prices can have different values
     *            depending on the catalogId. May be set to null.
     * @return AdminProducts
     * @throws KKAdminException
     */
     public AdminProducts getRelatedProductsWithOptions(String sessionId, AdminDataDescriptor dataDesc, int productId, int relationType, int languageId, AdminProductMgrOptions mgrOptions) throws KKAdminException
     {
         try
         {
            if (_getRelatedProductsWithOptions == null)
            {
                _getRelatedProductsWithOptions = new GetRelatedProductsWithOptions(kkAdminEng);
            }

            return _getRelatedProductsWithOptions.getRelatedProductsWithOptions(sessionId, dataDesc, productId, relationType, languageId, mgrOptions);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Removes related products from the product defined by productId. If relationType == 0, then
     * all related products are removed.
     * <p>
     * Valid values for relationType are:
     * <ul>
     * <li>KonakartAdminConstants.UP_SELL_RELATION - Up Selling. Normally a superior version of the
     * same product.</li>
     * <li>KonakartAdminConstants.CROSS_SELL_RELATION - Cross Selling. Normally similar or related
     * products.</li>
     * <li>KonakartAdminConstants.ACCESSORY_RELATION - Accessories</li>
     * <li>KonakartAdminConstants.DEPENDENT_ITEM_RELATION - Dependent Item. Normally cannot be sold
     * independently such as a warranty.</li>
     * <li>KonakartAdminConstants.BUNDLED_PRODUCTS_RELATION - Bundled product</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_1 - Custom relation.</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_2 - Custom relation.</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_3 - Custom relation.</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_4 - Custom relation.</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_5 - Custom relation.</li>
     * </ul>
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param productId
     *            The numeric id of the product
     * @param relationType
     * @throws KKAdminException
     */
     public void removeRelatedProducts(String sessionId, int productId, int relationType) throws KKAdminException
     {
         try
         {
            if (_removeRelatedProducts == null)
            {
                _removeRelatedProducts = new RemoveRelatedProducts(kkAdminEng);
            }

            _removeRelatedProducts.removeRelatedProducts(sessionId, productId, relationType);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Add the array of products to the product defined by productId. The relation type is specified
     * by relationType and may take one of the following values:
     * <ul>
     * <li>KonakartAdminConstants.UP_SELL_RELATION - Up Selling. Normally a superior version of the
     * same product.</li>
     * <li>KonakartAdminConstants.CROSS_SELL_RELATION - Cross Selling. Normally similar or related
     * products.</li>
     * <li>KonakartAdminConstants.ACCESSORY_RELATION - Accessories</li>
     * <li>KonakartAdminConstants.DEPENDENT_ITEM_RELATION - Dependent Item. Normally cannot be sold
     * independently such as a warranty.</li>
     * <li>KonakartAdminConstants.BUNDLED_PRODUCTS_RELATION - Bundled product</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_1 - Custom relation.</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_2 - Custom relation.</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_3 - Custom relation.</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_4 - Custom relation.</li>
     * <li>KonakartAdminConstants.CUSTOM_RELATION_5 - Custom relation.</li>
     * </ul>
     * When the relation type is KonakartAdminConstants.BUNDLED_PRODUCTS_RELATION then the attribute
     * called <code>bundledProdQuantity</code> of the products in the AdminProduct array, defines
     * the number of times it is present in the bundle.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param products
     *            An array of AdminProduct objects
     * @param productId
     *            The numeric id of the product
     * @param relationType
     *            The type of relationship that the array of AdminProducts has with the product
     *            identified by productId
     * @throws KKAdminException
     */
     public void addRelatedProducts(String sessionId, AdminProduct[] products, int productId, int relationType) throws KKAdminException
     {
         try
         {
            if (_addRelatedProducts == null)
            {
                _addRelatedProducts = new AddRelatedProducts(kkAdminEng);
            }

            _addRelatedProducts.addRelatedProducts(sessionId, products, productId, relationType);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Retrieve an order for an orderId, using the default language
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param orderId
     *            The numeric id of the AdminOrder object
     * @return Returns an AdminOrder object
     * @throws KKAdminException
     */
     public AdminOrder getOrderForOrderId(String sessionId, int orderId) throws KKAdminException
     {
         try
         {
            if (_getOrderForOrderId == null)
            {
                _getOrderForOrderId = new GetOrderForOrderId(kkAdminEng);
            }

            return _getOrderForOrderId.getOrderForOrderId(sessionId, orderId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an order for an orderId and a languageId. If the languageId is set to -1 then the
     * default language is used.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param orderId
     *            The numeric id of the AdminOrder object
     * @param languageId
     *            the language Id - or it could be
     *            com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to use the default language
     * @return Returns an AdminOrder object
     * @throws KKAdminException
     */
     public AdminOrder getOrderForOrderIdAndLangId(String sessionId, int orderId, int languageId) throws KKAdminException
     {
         try
         {
            if (_getOrderForOrderIdAndLangId == null)
            {
                _getOrderForOrderIdAndLangId = new GetOrderForOrderIdAndLangId(kkAdminEng);
            }

            return _getOrderForOrderIdAndLangId.getOrderForOrderIdAndLangId(sessionId, orderId, languageId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Reads the resource at the given URL and returns it as a string.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param url
     *            The url
     * @return Returns the resource read at the url, in the form of a string
     * @throws KKAdminException
     */
     public String readFromUrl(String sessionId, String url) throws KKAdminException
     {
         try
         {
            if (_readFromUrl == null)
            {
                _readFromUrl = new ReadFromUrl(kkAdminEng);
            }

            return _readFromUrl.readFromUrl(sessionId, url);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Edits the orderReturn, replacing existing data with data in the orderRet parameter.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param orderRet
     *            AdminOrderReturn object
     * @throws KKAdminException
     */
     public void editOrderReturn(String sessionId, AdminOrderReturn orderRet) throws KKAdminException
     {
         try
         {
            if (_editOrderReturn == null)
            {
                _editOrderReturn = new EditOrderReturn(kkAdminEng);
            }

            _editOrderReturn.editOrderReturn(sessionId, orderRet);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an AdminOrderReturn object and its array of AdminOrderReturnProduct objects
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param orderRet
     *            An AdminOrderReturn object
     * @return The id of the newly created object
     * @throws KKAdminException
     */
     public int insertOrderReturn(String sessionId, AdminOrderReturn orderRet) throws KKAdminException
     {
         try
         {
            if (_insertOrderReturn == null)
            {
                _insertOrderReturn = new InsertOrderReturn(kkAdminEng);
            }

            return _insertOrderReturn.insertOrderReturn(sessionId, orderRet);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete the AdminOrderReturn object and any associated AdminOrderReturnProduct objects.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param orderRetId
     *            The id of the AdminOrderReturn object
     * @throws KKAdminException
     */
     public void deleteOrderReturn(String sessionId, int orderRetId) throws KKAdminException
     {
         try
         {
            if (_deleteOrderReturn == null)
            {
                _deleteOrderReturn = new DeleteOrderReturn(kkAdminEng);
            }

            _deleteOrderReturn.deleteOrderReturn(sessionId, orderRetId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Search for OrderReturn objects with search criteria and order by criteria.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param retSearch
     *            An object that defines the search parameters
     * @param offset
     *            the offset in the database
     * @param size
     *            the number of records from the specified offset
     * @return Returns an AdminOrderReturnSearchResult object
     * @throws KKAdminException
     */
     public AdminOrderReturnSearchResult getOrderReturns(String sessionId, AdminOrderReturnSearch retSearch, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getOrderReturns == null)
            {
                _getOrderReturns = new GetOrderReturns(kkAdminEng);
            }

            return _getOrderReturns.getOrderReturns(sessionId, retSearch, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Set the Web Service endpoint for the engine. This is only applicable when calling a KonaKart
     * engine via web services.
     * <p>
     * The effect will be to set the web service endpoint for the proxy to the KonaKart engine.
     * 
     * @param wsEndpoint
     *            A String representing the web service endpoint
     * @throws KKAdminException
     */
     public void setEndpoint(String wsEndpoint) throws KKAdminException
     {
         try
         {
            if (_setEndpoint == null)
            {
                _setEndpoint = new SetEndpoint(kkAdminEng);
            }

            _setEndpoint.setEndpoint(wsEndpoint);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Return a set of admin application messages for the specified language. This is used to
     * facilitate internationalization of the KonaKart Admin application - but it could also be used
     * to internationalize any application via the KonaKart Admin API.
     * <p>
     * For file-based messages (where the configuration parameter USE_DB_FOR_MESSAGES = false) the
     * messages are retrieved from a message properties file on the classpath that best-matches the
     * specified language parameter. The name of the file starts with 'AdminMessages' and may have a
     * language code or locale specification appended to it, and '.properties' added to the end. An
     * example of such a file would be AdminMessages_de.properties. It first tries to find a file
     * that matches the language_code exactly (this could be a full locale description such as
     * 'de_DE' or 'pt_BR') and if no such file is found it tries to find one that matches just the
     * first two characters (in this case 'de' and 'pt' respectively). When the specified language
     * code is 'en' a file without any language or locale specification is used instead.
     * <p>
     * For database-based messages the language code specified must be the locale specified in the
     * database. By default these will be the full locale names (eg. en_GB, de_DE, pt_BR etc). file
     * for the locale or language code.
     * 
     * @param languageCode
     *            See above... Either specify the full language locale or the 2-character language
     *            code. If null, the language code of the default language will be used.
     * @return An AdminMessageSet - an object containing all the messages for the chosen language
     * @throws KKAdminException
     */
     public AdminMessageSet getMsgs(String languageCode) throws KKAdminException
     {
         try
         {
            if (_getMsgs == null)
            {
                _getMsgs = new GetMsgs(kkAdminEng);
            }

            return _getMsgs.getMsgs(languageCode);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Gets an AdminCustomValidatorSet. If the property file value does not allow use of the cache
     * the custom validation properties file is re-read every time this is called (useful in
     * development). Otherwise the custom validation properties file is read just once the first
     * time this is called.
     * 
     * @return an AdminCustomValidatorSet object
     * @throws KKAdminException
     */
     public AdminCustomValidatorSet getCustomValidatorSet() throws KKAdminException
     {
         try
         {
            if (_getCustomValidatorSet == null)
            {
                _getCustomValidatorSet = new GetCustomValidatorSet(kkAdminEng);
            }

            return _getCustomValidatorSet.getCustomValidatorSet();
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Return the help message for the specified language and the specified key.
     * <p>
     * For file-based messages (where the configuration parameter USE_DB_FOR_MESSAGES = false) the
     * message is retrieved from a message properties file on the classpath that best-matches the
     * specified language parameter. The name of the file starts with 'AdminHelpMessages' and may
     * have a language code or locale specification appended to it, and '.properties' added to the
     * end. An example of such a file would be AdminHelpMessages_de.properties. It first tries to
     * find a file that matches the language_code exactly (this could be a full locale description
     * such as 'de_DE' or 'pt_BR') and if no such file is found it tries to find one that matches
     * just the first two characters (in this case 'de' and 'pt' respectively). When the specified
     * language code is 'en' a file without any language or locale specification is used instead.
     * <p>
     * For database-based messages the language code specified must be the locale specified in the
     * database. By default these will be the full locale names (eg. en_GB, de_DE, pt_BR etc). file
     * for the locale or language code.
     * <p>
     * For properties in the 'AdminHelpMessages' properties files that contain substitution
     * definitions, this call will translate these into their substituted values.
     * 
     * @param msgKey
     *            the key of the help message in the properties file. If null, a null help message
     *            is returned.
     * @param languageCode
     *            the language code (if null it uses the current default language)
     * @return the help message for the specified message key and in the specified language. If no
     *         message is found for the specified non-null key, a message is returned identifying
     *         the missing key to assist in debugging the translation process.
     * @throws KKAdminException
     */
     public String getHelpMsg(String msgKey, String languageCode) throws KKAdminException
     {
         try
         {
            if (_getHelpMsg == null)
            {
                _getHelpMsg = new GetHelpMsg(kkAdminEng);
            }

            return _getHelpMsg.getHelpMsg(msgKey, languageCode);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get the SKU for an orderProduct object. If it has no options we look directly for the SKU in
     * the product table. Otherwise we look in the productQuantities table. If we can't find it
     * there, then we look in the product table.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param orderProd
     *            An AdminOrderProduct object
     * @return Returns the SKU for the OrderProduct
     * @throws KKAdminException
     */
     public String getSku(String sessionId, AdminOrderProduct orderProd) throws KKAdminException
     {
         try
         {
            if (_getSku == null)
            {
                _getSku = new GetSku(kkAdminEng);
            }

            return _getSku.getSku(sessionId, orderProd);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get the SKUs for an array AdminOrderProduct objects. If a product has no options we look
     * directly for the SKU in the product table. Otherwise we look in the productQuantities table.
     * If we can't find it there, then we look in the product table.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param orderProds
     *            An array of AdminOrderProduct objects
     * @return Returns an array of SKUs for the OrderProduct array
     * @throws KKAdminException
     */
     public String[] getSkus(String sessionId, AdminOrderProduct[] orderProds) throws KKAdminException
     {
         try
         {
            if (_getSkus == null)
            {
                _getSkus = new GetSkus(kkAdminEng);
            }

            return _getSkus.getSkus(sessionId, orderProds);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Checks to see whether a customer already exists with this email address.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param emailAddr
     *            The email address of the customer
     * @return Returns true if a customer exists for the email address
     * @throws KKAdminException
     */
     public boolean doesCustomerExistForEmail(String sessionId, String emailAddr) throws KKAdminException
     {
         try
         {
            if (_doesCustomerExistForEmail == null)
            {
                _doesCustomerExistForEmail = new DoesCustomerExistForEmail(kkAdminEng);
            }

            return _doesCustomerExistForEmail.doesCustomerExistForEmail(sessionId, emailAddr);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Retrieve audit data from the database. Search constraints can be set in the AdminAuditSearch
     * object which is passed in as a parameter.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param retSearch
     *            An object that defines the search parameters
     * @param offset
     *            the offset in the database
     * @param size
     *            the number of records from the specified offset
     * @return Returns an AdminAuditSearchResult object
     * @throws KKAdminException
     */
     public AdminAuditSearchResult getAuditData(String sessionId, AdminAuditSearch retSearch, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getAuditData == null)
            {
                _getAuditData = new GetAuditData(kkAdminEng);
            }

            return _getAuditData.getAuditData(sessionId, retSearch, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Imports an audit object. Used for loading auditing records from another system. It by-passes
     * the normal auditing and inserts auditing records unchanged.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param audit
     * @return Returns the id of the new Audit Object
     * @throws KKAdminException
     */
     public int importAudit(String sessionId, AdminAudit audit) throws KKAdminException
     {
         try
         {
            if (_importAudit == null)
            {
                _importAudit = new ImportAudit(kkAdminEng);
            }

            return _importAudit.importAudit(sessionId, audit);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete audit data from the database. Search constraints can be set in the AdminAuditSearch
     * object which is passed in as a parameter in order to filter the data to delete.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param delSearch
     *            AdminAuditSearch object to filter the datato be deleted
     * @throws KKAdminException
     */
     public void deleteAuditData(String sessionId, AdminAuditSearch delSearch) throws KKAdminException
     {
         try
         {
            if (_deleteAuditData == null)
            {
                _deleteAuditData = new DeleteAuditData(kkAdminEng);
            }

            _deleteAuditData.deleteAuditData(sessionId, delSearch);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Retrieves an array of AdminRole objects for the user logged in with the session id. Each
     * AdminRole object will contain an array of AdminPanel objects and AdminApiCall objects, if
     * defined.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @return Returns an array of AdminRole objects
     * @throws KKAdminException
     */
     public AdminRole[] getRolesPerSessionId(String sessionId) throws KKAdminException
     {
         try
         {
            if (_getRolesPerSessionId == null)
            {
                _getRolesPerSessionId = new GetRolesPerSessionId(kkAdminEng);
            }

            return _getRolesPerSessionId.getRolesPerSessionId(sessionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Retrieves an array of AdminRole objects for the user identified by the userId parameter. Each
     * AdminRole object will contain an array of AdminPanel objects and AdminApiCall objects, if
     * defined.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param userId
     *            The numeric id of the user
     * @return Returns an array of AdminRole objects
     * @throws KKAdminException
     */
     public AdminRole[] getRolesPerUser(String sessionId, int userId) throws KKAdminException
     {
         try
         {
            if (_getRolesPerUser == null)
            {
                _getRolesPerUser = new GetRolesPerUser(kkAdminEng);
            }

            return _getRolesPerUser.getRolesPerUser(sessionId, userId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Adds the array of AdminRole objects to the user identified by the userId parameter. The roles
     * must already exist in the database.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param roles
     *            An array of AdminRole objects
     * @param userId
     *            The numeric id of the user
     * @throws KKAdminException
     */
     public void addRolesToUser(String sessionId, AdminRole[] roles, int userId) throws KKAdminException
     {
         try
         {
            if (_addRolesToUser == null)
            {
                _addRolesToUser = new AddRolesToUser(kkAdminEng);
            }

            _addRolesToUser.addRolesToUser(sessionId, roles, userId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Removes the array of AdminRole objects from the user identified by the userId parameter.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param roles
     *            An array of AdminRole objects
     * @param userId
     *            The numeric user id
     * @throws KKAdminException
     */
     public void removeRolesFromUser(String sessionId, AdminRole[] roles, int userId) throws KKAdminException
     {
         try
         {
            if (_removeRolesFromUser == null)
            {
                _removeRolesFromUser = new RemoveRolesFromUser(kkAdminEng);
            }

            _removeRolesFromUser.removeRolesFromUser(sessionId, roles, userId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Removes the array of AdminPanel objects from the role identified by the roleId parameter.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param panels
     *            An array of AdminPanel objects
     * @param roleId
     *            The id of the Role
     * @throws KKAdminException
     */
     public void removePanelsFromRole(String sessionId, AdminPanel[] panels, int roleId) throws KKAdminException
     {
         try
         {
            if (_removePanelsFromRole == null)
            {
                _removePanelsFromRole = new RemovePanelsFromRole(kkAdminEng);
            }

            _removePanelsFromRole.removePanelsFromRole(sessionId, panels, roleId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Removes the array of AdminApiCall objects from the role identified by the roleId parameter.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param apiCalls
     *            An array of AdminApiCall objects
     * @param roleId
     *            The id of the Role
     * @throws KKAdminException
     */
     public void removeApiCallsFromRole(String sessionId, AdminApiCall[] apiCalls, int roleId) throws KKAdminException
     {
         try
         {
            if (_removeApiCallsFromRole == null)
            {
                _removeApiCallsFromRole = new RemoveApiCallsFromRole(kkAdminEng);
            }

            _removeApiCallsFromRole.removeApiCallsFromRole(sessionId, apiCalls, roleId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Adds the array of AdminPanel objects to the role identified by the roleId parameter. The
     * panel identified by panelId for each panel, and the role identified by the roleId, must
     * already exist in the database. The panel name and description are ignored. If the association
     * already exists, then it is updated with the new AdminPanel values.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param panels
     *            An array of AdminPanel objects
     * @param roleId
     *            The numeric id of the Role
     * @throws KKAdminException
     */
     public void addPanelsToRole(String sessionId, AdminPanel[] panels, int roleId) throws KKAdminException
     {
         try
         {
            if (_addPanelsToRole == null)
            {
                _addPanelsToRole = new AddPanelsToRole(kkAdminEng);
            }

            _addPanelsToRole.addPanelsToRole(sessionId, panels, roleId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Adds the array of AdminApiCall objects to the role identified by the roleId parameter. The
     * apiCall identified by apiCallId for each apiCall, and the role identified by the roleId, must
     * already exist in the database. The apiCall name and description are ignored.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param apiCalls
     *            An array of AdminApiCall objects
     * @param roleId
     *            The id of the Role
     * @throws KKAdminException
     */
     public void addApiCallsToRole(String sessionId, AdminApiCall[] apiCalls, int roleId) throws KKAdminException
     {
         try
         {
            if (_addApiCallsToRole == null)
            {
                _addApiCallsToRole = new AddApiCallsToRole(kkAdminEng);
            }

            _addApiCallsToRole.addApiCallsToRole(sessionId, apiCalls, roleId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Retrieves an array of AdminPanel objects for the role identified by the roleId parameter.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param roleId
     *            The id of the Role
     * @return Returns an array of AdminPanel objects
     * @throws KKAdminException
     */
     public AdminPanel[] getPanelsPerRole(String sessionId, int roleId) throws KKAdminException
     {
         try
         {
            if (_getPanelsPerRole == null)
            {
                _getPanelsPerRole = new GetPanelsPerRole(kkAdminEng);
            }

            return _getPanelsPerRole.getPanelsPerRole(sessionId, roleId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Retrieves an array of AdminApiCall objects for the role identified by the roleId parameter.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param roleId
     *            The id of the Role
     * @return Returns an array of AdminApiCall objects
     * @throws KKAdminException
     */
     public AdminApiCall[] getApiCallsPerRole(String sessionId, int roleId) throws KKAdminException
     {
         try
         {
            if (_getApiCallsPerRole == null)
            {
                _getApiCallsPerRole = new GetApiCallsPerRole(kkAdminEng);
            }

            return _getApiCallsPerRole.getApiCallsPerRole(sessionId, roleId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an array of all panels in the database.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @return Returns an array of AdminPanel objects
     * @throws KKAdminException
     */
     public AdminPanel[] getAllPanels(String sessionId) throws KKAdminException
     {
         try
         {
            if (_getAllPanels == null)
            {
                _getAllPanels = new GetAllPanels(kkAdminEng);
            }

            return _getAllPanels.getAllPanels(sessionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an array of all apiCalls in the database.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @return Returns an array of AdminApiCall objects
     * @throws KKAdminException
     */
     public AdminApiCall[] getAllApiCalls(String sessionId) throws KKAdminException
     {
         try
         {
            if (_getAllApiCalls == null)
            {
                _getAllApiCalls = new GetAllApiCalls(kkAdminEng);
            }

            return _getAllApiCalls.getAllApiCalls(sessionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an array of all Roles in the database.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @return Returns an array of AdminRole objects
     * @throws KKAdminException
     */
     public AdminRole[] getAllRoles(String sessionId) throws KKAdminException
     {
         try
         {
            if (_getAllRoles == null)
            {
                _getAllRoles = new GetAllRoles(kkAdminEng);
            }

            return _getAllRoles.getAllRoles(sessionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Edit a Role. Only the role name and the role description can be modified. All other
     * attributes are ignored.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param role
     *            AdminRole object
     * @throws KKAdminException
     */
     public void editRole(String sessionId, AdminRole role) throws KKAdminException
     {
         try
         {
            if (_editRole == null)
            {
                _editRole = new EditRole(kkAdminEng);
            }

            _editRole.editRole(sessionId, role);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a new Role. The role name is mandatory.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param role
     *            The AdminRole object
     * @return Returns the id of the inserted AdminRole object
     * @throws KKAdminException
     */
     public int insertRole(String sessionId, AdminRole role) throws KKAdminException
     {
         try
         {
            if (_insertRole == null)
            {
                _insertRole = new InsertRole(kkAdminEng);
            }

            return _insertRole.insertRole(sessionId, role);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Deletes the role identified by the roleId parameter. All customers_to_role, role_to_panel and
     * role_to_api_call records are also deleted.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param roleId
     *            The id of the Role
     * @throws KKAdminException
     */
     public void deleteRole(String sessionId, int roleId) throws KKAdminException
     {
         try
         {
            if (_deleteRole == null)
            {
                _deleteRole = new DeleteRole(kkAdminEng);
            }

            _deleteRole.deleteRole(sessionId, roleId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Deletes the panel identified by the panelId parameter. All role_to_panel records are also
     * deleted.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param panelId
     *            The numeric id of the panel
     * @throws KKAdminException
     */
     public void deletePanel(String sessionId, int panelId) throws KKAdminException
     {
         try
         {
            if (_deletePanel == null)
            {
                _deletePanel = new DeletePanel(kkAdminEng);
            }

            _deletePanel.deletePanel(sessionId, panelId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Deletes the apiCall identified by the apiCallId parameter. All role_to_api_call records are
     * also deleted.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param apiCallId
     *            The numeric id of the ApiCall
     * @throws KKAdminException
     */
     public void deleteApiCall(String sessionId, int apiCallId) throws KKAdminException
     {
         try
         {
            if (_deleteApiCall == null)
            {
                _deleteApiCall = new DeleteApiCall(kkAdminEng);
            }

            _deleteApiCall.deleteApiCall(sessionId, apiCallId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Edit a Panel. Only the panel code and the panel description can be modified. All other
     * attributes are ignored.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param panel
     *            AdminPanel object
     * @throws KKAdminException
     */
     public void editPanel(String sessionId, AdminPanel panel) throws KKAdminException
     {
         try
         {
            if (_editPanel == null)
            {
                _editPanel = new EditPanel(kkAdminEng);
            }

            _editPanel.editPanel(sessionId, panel);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Edit an ApiCall. Only the apiCall name and the apiCall description can be modified. All other
     * attributes are ignored.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param apiCall
     *            An AdminApiCall object
     * @throws KKAdminException
     */
     public void editApiCall(String sessionId, AdminApiCall apiCall) throws KKAdminException
     {
         try
         {
            if (_editApiCall == null)
            {
                _editApiCall = new EditApiCall(kkAdminEng);
            }

            _editApiCall.editApiCall(sessionId, apiCall);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the AdminPanel referenced by the panelId.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param panelId
     *            The numeric id of the AdminPanel object
     * @return Returns an AdminPanel object
     * @throws KKAdminException
     */
     public AdminPanel getPanel(String sessionId, int panelId) throws KKAdminException
     {
         try
         {
            if (_getPanel == null)
            {
                _getPanel = new GetPanel(kkAdminEng);
            }

            return _getPanel.getPanel(sessionId, panelId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the AdminApiCall referenced by the apiCallId.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param apiCallId
     *            The numeric id of the AdminApiCall object
     * @return Returns an AdminApiCall object
     * @throws KKAdminException
     */
     public AdminApiCall getApiCall(String sessionId, int apiCallId) throws KKAdminException
     {
         try
         {
            if (_getApiCall == null)
            {
                _getApiCall = new GetApiCall(kkAdminEng);
            }

            return _getApiCall.getApiCall(sessionId, apiCallId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the AdminRole referenced by the roleId.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param roleId
     *            The id of the Role
     * @return Returns an AdminRole object
     * @throws KKAdminException
     */
     public AdminRole getRole(String sessionId, int roleId) throws KKAdminException
     {
         try
         {
            if (_getRole == null)
            {
                _getRole = new GetRole(kkAdminEng);
            }

            return _getRole.getRole(sessionId, roleId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a new Panel. The panel code is mandatory and the panel description is optional. All
     * other attributes are ignored.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param panel
     *            An AdminPanel object
     * @return Returns the id of the inserted AdminPanel object
     * @throws KKAdminException
     */
     public int insertPanel(String sessionId, AdminPanel panel) throws KKAdminException
     {
         try
         {
            if (_insertPanel == null)
            {
                _insertPanel = new InsertPanel(kkAdminEng);
            }

            return _insertPanel.insertPanel(sessionId, panel);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a new ApiCall. The apiCall name is mandatory and the apiCall description is optional.
     * All other attributes are ignored.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param apiCall
     *            An AdminApiCall object
     * @return Returns the id of the inserted AdminApiCall object
     * @throws KKAdminException
     */
     public int insertApiCall(String sessionId, AdminApiCall apiCall) throws KKAdminException
     {
         try
         {
            if (_insertApiCall == null)
            {
                _insertApiCall = new InsertApiCall(kkAdminEng);
            }

            return _insertApiCall.insertApiCall(sessionId, apiCall);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Create and insert a digital download record for the product identified by the
     * <code>productId</code> and the customer identified by the <code>sessionId</code>.
     * <p>
     * If the digital download already exists, then we overwrite it with the new one.
     * <p>
     * The attributes of the digital download product such as the maximum number of days that it is
     * valid and how many times it can be downloaded, are retrieved from configuration variables.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param customerId
     *            The numeric id of the customer
     * @param productId
     *            The numeric id of the product
     * @throws KKAdminException
     */
     public void insertDigitalDownload(String sessionId, int customerId, int productId) throws KKAdminException
     {
         try
         {
            if (_insertDigitalDownload == null)
            {
                _insertDigitalDownload = new InsertDigitalDownload(kkAdminEng);
            }

            _insertDigitalDownload.insertDigitalDownload(sessionId, customerId, productId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * An email is sent to the customers which are found based on the selection criteria set in the
     * AdminCustomerSearch object.
     * <p>
     * The email is generated by the template called templateName and the objects obj1-obj5 are
     * passed to the template. The current AdminCustomer object is also passed to the Velocity
     * template with the name "cust". The subject of the eMail is picked up from the first line of
     * the template. obj1-obj5 can be any object that you wish to extract data from to place into
     * the eMail. For example you could look up a number of special offers from the database and set
     * obj1 to an array of products containing these special offers.
     * <p>
     * The individual emails are sent using a thread pool with a maximum number of threads that is
     * defined by numEmailThreads.
     * <p>
     * Note that this method is not available via the SOAP Web Service interface because of problems
     * with the serialization of parameters of type object. Please use
     * sendTemplateEmailToCustomers1() instead.
     * <p>
     * A log called SendTemplateEmail.log is created, containing a list of the eMail addresses used.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param custSearch
     *            The AdminCustomerSearch object which determines the customers that are selected.
     * @param templateName
     *            The name of the template. The "country code" and ".vm" will be appended
     *            automatically. i.e. If the template name is newsletter and the country code is en,
     *            then we will look for a file called newsletter_en.vm.
     * @param obj1
     *            This object will be passed to the velocity template with the name "obj1".
     * @param obj2
     *            This object will be passed to the velocity template with the name "obj2".
     * @param obj3
     *            This object will be passed to the velocity template with the name "obj3".
     * @param obj4
     *            This object will be passed to the velocity template with the name "obj4".
     * @param obj5
     *            This object will be passed to the velocity template with the name "obj5".
     * @param numEmailThreads
     *            The maximum number of concurrent threads used by the thread pool to send the
     *            eMails. If set to 0 or to a negative value, it is ignored.
     * @throws KKAdminException
     */
     public void sendTemplateEmailToCustomers(String sessionId, AdminCustomerSearch custSearch, String templateName, Object obj1, Object obj2, Object obj3, Object obj4, Object obj5, int numEmailThreads) throws KKAdminException
     {
         try
         {
            if (_sendTemplateEmailToCustomers == null)
            {
                _sendTemplateEmailToCustomers = new SendTemplateEmailToCustomers(kkAdminEng);
            }

            _sendTemplateEmailToCustomers.sendTemplateEmailToCustomers(sessionId, custSearch, templateName, obj1, obj2, obj3, obj4, obj5, numEmailThreads);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This method has the same functionality as sendTemplateEmailToCustomers() except that it
     * includes an extra options object to enhance the available functionality. Currently the
     * options object allows you to add an array of AdminNameValue pair objects used to pass custom
     * information to the Velocity engine. The value can be retrieved from the template using the
     * name preceded by the $ sign. e.g. If a name value pair contains StoreId and 22, the value 22
     * will be displayed in the eMail where the template contains $StoreId.
     * <p>
     * A log called SendTemplateEmail.log is created, containing a list of the eMail addresses used.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param custSearch
     *            The AdminCustomerSearch object which determines the customers that are selected.
     * @param templateName
     *            The name of the template. The "country code" and ".vm" will be appended
     *            automatically. i.e. If the template name is newsletter and the country code is en,
     *            then we will look for a file called newsletter_en.vm.
     * @param obj1
     *            This object will be passed to the velocity template with the name "obj1".
     * @param obj2
     *            This object will be passed to the velocity template with the name "obj2".
     * @param obj3
     *            This object will be passed to the velocity template with the name "obj3".
     * @param obj4
     *            This object will be passed to the velocity template with the name "obj4".
     * @param obj5
     *            This object will be passed to the velocity template with the name "obj5".
     * @param numEmailThreads
     *            The maximum number of concurrent threads used by the thread pool to send the
     *            eMails. If set to 0 or to a negative value, it is ignored.
     * @param options
     *            An object used to configure options used when sending eMails from the AdminApp
     * @throws KKAdminException
     */
     public void sendTemplateEmailToCustomersWithOptions(String sessionId, AdminCustomerSearch custSearch, String templateName, Object obj1, Object obj2, Object obj3, Object obj4, Object obj5, int numEmailThreads, AdminEmailOptions options) throws KKAdminException
     {
         try
         {
            if (_sendTemplateEmailToCustomersWithOptions == null)
            {
                _sendTemplateEmailToCustomersWithOptions = new SendTemplateEmailToCustomersWithOptions(kkAdminEng);
            }

            _sendTemplateEmailToCustomersWithOptions.sendTemplateEmailToCustomersWithOptions(sessionId, custSearch, templateName, obj1, obj2, obj3, obj4, obj5, numEmailThreads, options);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * An email is sent to the customers which are found based on the selection criteria set in the
     * AdminCustomerSearch object. This method actually calls
     * <code>sendTemplateEmailToCustomers()</code> and is just a more specific implementation where
     * arrays of defined objects are passed to the Velocity template rather than java.lang.Object
     * which cannot be serialized for use in a Web Service interface.
     * <p>
     * The email is generated by the template called templateName and the message, arrays of
     * products, orders, manufacturers and categories are passed to the template. The current
     * AdminCustomer object is also passed to the Velocity template with the name "cust". The
     * subject of the eMail is picked up from the first line of the template. The message and arrays
     * passed to the template can be set to null if not required.
     * <p>
     * The individual emails are sent using a thread pool with a maximum number of threads that is
     * defined by numEmailThreads.
     * <p>
     * A log called SendTemplateEmail.log is created, containing a list of the eMail addresses used.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param custSearch
     *            The AdminCustomerSearch object which determines the customers that are selected.
     * @param templateName
     *            The name of the template. The "country code" and ".vm" will be appended
     *            automatically. i.e. If the template name is newsletter and the country code is en,
     *            then we will look for a file called newsletter_en.vm.
     * @param message
     *            This message will be passed to the velocity template with the name "obj1".
     * @param products
     *            This products will be passed to the velocity template with the name "obj2".
     * @param orders
     *            This orders will be passed to the velocity template with the name "obj3".
     * @param manufacturers
     *            This manufacturers will be passed to the velocity template with the name "obj4".
     * @param categories
     *            This categories will be passed to the velocity template with the name "obj5".
     * @param numEmailThreads
     *            The maximum number of concurrent threads used by the thread pool to send the
     *            eMails. If set to 0 or to a negative value, it is ignored.
     * @throws KKAdminException
     */
     public void sendTemplateEmailToCustomers1(String sessionId, AdminCustomerSearch custSearch, String templateName, String message, AdminProduct[] products, AdminOrder[] orders, AdminManufacturer[] manufacturers, AdminCategory[] categories, int numEmailThreads) throws KKAdminException
     {
         try
         {
            if (_sendTemplateEmailToCustomers1 == null)
            {
                _sendTemplateEmailToCustomers1 = new SendTemplateEmailToCustomers1(kkAdminEng);
            }

            _sendTemplateEmailToCustomers1.sendTemplateEmailToCustomers1(sessionId, custSearch, templateName, message, products, orders, manufacturers, categories, numEmailThreads);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This method has the same functionality as sendTemplateEmailToCustomers1() except that it
     * includes an extra options object to enhance the available functionality. Currently the
     * options object allows you to:
     * <ul>
     * <li>Add an array of AdminNameValue pair objects used to pass custom information to the
     * Velocity engine. The value can be retrieved from the template using the name preceded by the
     * $ sign. e.g. If a name value pair contains StoreId and 22, the value 22 will be displayed in
     * the eMail where the template contains $StoreId.</li>
     * <li>Specify a two letter country code to force the eMail template with that code to be used.</li>
     * <li>Allow the locale of the customer to be used in order to decide which eMail template to
     * use.</li>
     * </ul>
     * <p>
     * A log called SendTemplateEmail.log is created, containing a list of the eMail addresses used.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param custSearch
     *            The AdminCustomerSearch object which determines the customers that are selected.
     * @param templateName
     *            The name of the template. The "country code" and ".vm" will be appended
     *            automatically. i.e. If the template name is newsletter and the country code is en,
     *            then we will look for a file called newsletter_en.vm.
     * @param message
     *            This message will be passed to the velocity template with the name "obj1".
     * @param products
     *            This products will be passed to the velocity template with the name "obj2".
     * @param orders
     *            This orders will be passed to the velocity template with the name "obj3".
     * @param manufacturers
     *            This manufacturers will be passed to the velocity template with the name "obj4".
     * @param categories
     *            This categories will be passed to the velocity template with the name "obj5".
     * @param numEmailThreads
     *            The maximum number of concurrent threads used by the thread pool to send the
     *            eMails. If set to 0 or to a negative value, it is ignored.
     * @param options
     *            An object used to configure options used when sending eMails from the AdminApp
     * @throws KKAdminException
     */
     public void sendTemplateEmailToCustomers1WithOptions(String sessionId, AdminCustomerSearch custSearch, String templateName, String message, AdminProduct[] products, AdminOrder[] orders, AdminManufacturer[] manufacturers, AdminCategory[] categories, int numEmailThreads, AdminEmailOptions options) throws KKAdminException
     {
         try
         {
            if (_sendTemplateEmailToCustomers1WithOptions == null)
            {
                _sendTemplateEmailToCustomers1WithOptions = new SendTemplateEmailToCustomers1WithOptions(kkAdminEng);
            }

            _sendTemplateEmailToCustomers1WithOptions.sendTemplateEmailToCustomers1WithOptions(sessionId, custSearch, templateName, message, products, orders, manufacturers, categories, numEmailThreads, options);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a Product Notification record for the specified customer and product.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param apn
     *            An AdminProductNotification object
     * @throws KKAdminException
     */
     public void insertProductNotification(String sessionId, AdminProductNotification apn) throws KKAdminException
     {
         try
         {
            if (_insertProductNotification == null)
            {
                _insertProductNotification = new InsertProductNotification(kkAdminEng);
            }

            _insertProductNotification.insertProductNotification(sessionId, apn);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a Product Notification record for the specified customer and product if it's found.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param apn
     *            An AdminProductNotification object
     * @throws KKAdminException
     */
     public void deleteProductNotification(String sessionId, AdminProductNotification apn) throws KKAdminException
     {
         try
         {
            if (_deleteProductNotification == null)
            {
                _deleteProductNotification = new DeleteProductNotification(kkAdminEng);
            }

            _deleteProductNotification.deleteProductNotification(sessionId, apn);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Find and return a customer with an email address matching the emailAddress parameter.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param emailAddress
     *            The eMail address of the customer
     * @return Returns an AdminCustomer object or null if no customer exists
     * @throws KKAdminException
     */
     public AdminCustomer getCustomerForEmail(String sessionId, String emailAddress) throws KKAdminException
     {
         try
         {
            if (_getCustomerForEmail == null)
            {
                _getCustomerForEmail = new GetCustomerForEmail(kkAdminEng);
            }

            return _getCustomerForEmail.getCustomerForEmail(sessionId, emailAddress);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a Customer Group. If the id of the Customer Group object is set to a negative number
     * then it is calculated by the insert method. Otherwise an insert is attempted with the value
     * passed into the method so you must ensure that the id / language combination is unique.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param custGroup
     *            A Customer Group object
     * @return returns the id of the inserted Customer Group
     * @throws KKAdminException
     */
     public int insertCustomerGroup(String sessionId, AdminCustomerGroup custGroup) throws KKAdminException
     {
         try
         {
            if (_insertCustomerGroup == null)
            {
                _insertCustomerGroup = new InsertCustomerGroup(kkAdminEng);
            }

            return _insertCustomerGroup.insertCustomerGroup(sessionId, custGroup);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an array of AdminCustomerGroup objects. We calculate and use the same id for all of
     * the items in the array so you must ensure that each item has a unique language id, otherwise
     * the DB will throw an exception. The id's of the AdminCustomerGroups are ignored.
     * 
     * @param sessionId
     * @param custGroups
     *            An array of AdminCustomerGroup objects
     * @return returns the id of the inserted objects
     * @throws KKAdminException
     */
     public int insertCustomerGroups(String sessionId, AdminCustomerGroup[] custGroups) throws KKAdminException
     {
         try
         {
            if (_insertCustomerGroups == null)
            {
                _insertCustomerGroups = new InsertCustomerGroups(kkAdminEng);
            }

            return _insertCustomerGroups.insertCustomerGroups(sessionId, custGroups);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update a customer group. Note that the id and the languageId cannot be modified since they
     * are key values.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param custGroup
     *            A customer group object
     * @return Returns the id of the customer group
     * @throws KKAdminException
     */
     public int updateCustomerGroup(String sessionId, AdminCustomerGroup custGroup) throws KKAdminException
     {
         try
         {
            if (_updateCustomerGroup == null)
            {
                _updateCustomerGroup = new UpdateCustomerGroup(kkAdminEng);
            }

            return _updateCustomerGroup.updateCustomerGroup(sessionId, custGroup);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a Customer Group. The method may actually delete multiple database records if the
     * customer group has entries for different languages.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param custGroupId
     *            The id of a customer group object
     * @return returns the id of the deleted customer group
     * @throws KKAdminException
     */
     public int deleteCustomerGroup(String sessionId, int custGroupId) throws KKAdminException
     {
         try
         {
            if (_deleteCustomerGroup == null)
            {
                _deleteCustomerGroup = new DeleteCustomerGroup(kkAdminEng);
            }

            return _deleteCustomerGroup.deleteCustomerGroup(sessionId, custGroupId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Return AdminCustomerGroups matching search criteria.
     * 
     * @param search
     *            An AdminCustomerGroupSearch object containing the search criteria
     * @return Returns an AdminCustomerGroupSearchResult object
     * @throws KKAdminException
     */
     public AdminCustomerGroupSearchResult getCustomerGroups(AdminCustomerGroupSearch search) throws KKAdminException
     {
         try
         {
            if (_getCustomerGroups == null)
            {
                _getCustomerGroups = new GetCustomerGroups(kkAdminEng);
            }

            return _getCustomerGroups.getCustomerGroups(search);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Edit an existing order.
     * <p>
     * This method only allows you to edit certain attributes of an order. In order to change the
     * order status you must use <code>updateOrder()</code>.
     * <p>
     * The attributes that can be modified are:
     * <ul>
     * <li>Order and OrderProduct Custom fields</li>
     * <li>Payment Method</li>
     * <li>Date Finished</li>
     * <li>Order Number</li>
     * <li>Tracking Number</li>
     * <li>Order Invoice Filename</li>
     * </ul>
     * <p>
     * Attributes containing null values will be ignored. In order to clear a String attribute, you
     * must set it to an empty string.
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param order
     *            The AdminOrder object to be edited
     * @throws KKAdminException
     */
     public void editOrder(String sessionId, AdminOrder order) throws KKAdminException
     {
         try
         {
            if (_editOrder == null)
            {
                _editOrder = new EditOrder(kkAdminEng);
            }

            _editOrder.editOrder(sessionId, order);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Set Credit Card details on an existing order.
     * <p>
     * This method only allows you to update the credit card details on an order. In order to change
     * the order status you must use <code>updateOrderStatus()</code>.
     * <p>
     * The Credit Card details are only saved if the ability to save credit card details is enabled
     * in the configuration of the store.
     * <p>
     * The orderId must be specified as the id on the AdminCreditCard object.
     * <p>
     * The following Credit Card attributes can be saved (on the CreditCard object):
     * <ul>
     * <li>CC Type</li>
     * <li>CC Owner</li>
     * <li>CC Number</li>
     * <li>CC Expires</li>
     * <li>CC CVV</li>
     * </ul>
     * 
     * @param sessionId
     *            The session Id of the logged in user
     * @param creditCard
     *            An AdminCreditCard object containing all of the credit card details
     * @throws KKAdminException
     */
     public void setCreditCardDetailsOnOrder(String sessionId, AdminCreditCard creditCard) throws KKAdminException
     {
         try
         {
            if (_setCreditCardDetailsOnOrder == null)
            {
                _setCreditCardDetailsOnOrder = new SetCreditCardDetailsOnOrder(kkAdminEng);
            }

            _setCreditCardDetailsOnOrder.setCreditCardDetailsOnOrder(sessionId, creditCard);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns all of the top level categories which are those that have a parentId = 0. An
     * AdminDataDescriptor object may be supplied in order to add constraints and control the number
     * of categories returned.
     * 
     * @param languageId
     *            the language Id - or it could be
     *            com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to use the default language
     * @param dataDesc
     *            Used to control the data offset, limit the number of categories returned and to
     *            set constraints on the custom fields. May be set to null;
     * @return Array of Category Objects
     * @throws KKAdminException
     */
     public AdminCategory[] getTopLevelCategories(int languageId, AdminDataDescriptor dataDesc) throws KKAdminException
     {
         try
         {
            if (_getTopLevelCategories == null)
            {
                _getTopLevelCategories = new GetTopLevelCategories(kkAdminEng);
            }

            return _getTopLevelCategories.getTopLevelCategories(languageId, dataDesc);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * A custom interface that you have to provide an implementation for. The default implementation
     * will simply return a null.
     * <p>
     * There are two versions, one that requires a valid sessionId (customSecure) and one that does
     * not (custom).
     * <p>
     * You are free to use the two input String parameters in any way you choose, for example you
     * may wish to use one to indicate which of your custom functions to run, and the other might
     * contain XML to give you a great deal of flexibility - but it's up to you!
     * 
     * @param input1
     *            The first input String - can be anything you choose
     * @param input2
     *            The second input String - can be anything you choose
     * @return Returns a String
     * @throws KKAdminException
     */
     public String custom(String input1, String input2) throws KKAdminException
     {
         try
         {
            if (_custom == null)
            {
                _custom = new Custom(kkAdminEng);
            }

            return _custom.custom(input1, input2);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * A custom interface that you have to provide an implementation for. The default implementation
     * will throw an exception for an invalid sessionId or return a null.
     * <p>
     * There are two versions, one that requires a valid sessionId (customSecure) and one that does
     * not (custom).
     * <p>
     * You are free to use the two input String parameters in any way you choose, for example you
     * may wish to use one to indicate which of your custom functions to run, and the other might
     * contain XML to give you a great deal of flexibility - but it's up to you!
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param input1
     *            The first input String - can be anything you choose
     * @param input2
     *            The second input String - can be anything you choose
     * @return Returns a String
     * @throws KKAdminException
     */
     public String customSecure(String sessionId, String input1, String input2) throws KKAdminException
     {
         try
         {
            if (_customSecure == null)
            {
                _customSecure = new CustomSecure(kkAdminEng);
            }

            return _customSecure.customSecure(sessionId, input1, input2);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This method is used to calculate some attributes of a bundle product based on the products
     * that the bundle contains.
     * <p>
     * <ul>
     * <li>The price of a bundle product is calculated by summing the prices of the bundled products
     * and applying a discount. If any of the bundled products has the "encodeOptionValues"
     * attribute set, then the price is calculated, by also considering the product options. The
     * format of the encodeOptionValues is 1{2}3{4} where the first optionId / valueId pair have ids
     * of 1,2 and the 2nd optionId / valueId pair have ids of 3,4.</li>
     * <li>The weight of a bundle product is calculated by summing the weights of the bundled
     * products</li>
     * <li>The quantity of a bundle product is calculated by picking the lowest value from the
     * quantities of the bundled products. If the quantity of a product within the bundle is greater
     * than 1, then this is taken into consideration when calculating the quantity.</li>
     * </ul>
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param bundleId
     *            If set to a positive value, we search for all of the products in the bundle,
     *            starting from this id of the bundle product.
     * @param bundledProducts
     *            If bundleId is less than zero, we use the products in this array otherwise it is
     *            ignored. Each product should have the bundledProdQuantity attribute set to the
     *            number of times that it appears in the bundle. If a product in the bundle has a
     *            certain configuration (i.e. Size = small, color = red) then the
     *            encodedOptionValues attribute should contain the encoded option values. The format
     *            of the encodeOptionValues is 1{2}3{4} where the first optionId / valueId pair have
     *            ids of 1,2 and the 2nd optionId / valueId pair have ids of 3,4.
     * @param discount
     *            The discount to apply which can be an amount or a percentage
     * @return Returns an AdminProduct object which has calculated values for prices, weight and
     *         quantity.
     * @throws KKAdminException
     */
     public AdminProduct getBundleProductDetails(String sessionId, int bundleId, AdminProduct[] bundledProducts, AdminDiscount discount) throws KKAdminException
     {
         try
         {
            if (_getBundleProductDetails == null)
            {
                _getBundleProductDetails = new GetBundleProductDetails(kkAdminEng);
            }

            return _getBundleProductDetails.getBundleProductDetails(sessionId, bundleId, bundledProducts, discount);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Return the Tag objects defined by the search criteria. If the includeChildren attribute on
     * the AdminSearch is true we also populate the TagGroup children on the Tag objects.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param search
     *            the generic Admin search object that defines the tag objects to search for. If
     *            null we use the default AdminSearch object.
     * @param offset
     *            starting offset in database - so that you can page through results
     * @param size
     *            size of the group that will be returned - the maximum number of records returned
     * @return an AdminTagSearchResult object
     * @throws KKAdminException
     */
     public AdminTagSearchResult getTags(String sessionId, AdminSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getTags == null)
            {
                _getTags = new GetTags(kkAdminEng);
            }

            return _getTags.getTags(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Return the TagGroup objects defined by the search criteria. If the includeChildren attribute
     * on the AdminSearch is true we also populate the Tag children on the TagGroup objects.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param search
     *            the generic Admin search object that defines the tag group objects to search for.
     *            If null we use the default AdminSearch object
     * @param offset
     *            starting offset in database - so that you can page through results
     * @param size
     *            size of the group that will be returned - the maximum number of records returned
     * @return an AdminTagSearchResult object
     * @throws KKAdminException
     */
     public AdminTagGroupSearchResult getTagGroups(String sessionId, AdminSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getTagGroups == null)
            {
                _getTagGroups = new GetTagGroups(kkAdminEng);
            }

            return _getTagGroups.getTagGroups(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Return the TagGroupToTag objects defined by the search criteria.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param search
     *            the generic Admin search object that defines the tag objects to search for. If
     *            null we use the default AdminSearch object. If id is not -1 this is used to define
     *            the tag Group Id. If id2 is not -1 this is used to define the tag Id.
     * @param offset
     *            starting offset in database - so that you can page through results
     * @param size
     *            size of the group that will be returned - the maximum number of records returned
     * @return an array of AdminTagGroupToTag records
     * @throws KKAdminException
     */
     public AdminTagGroupToTag[] getTagGroupToTags(String sessionId, AdminSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getTagGroupToTags == null)
            {
                _getTagGroupToTags = new GetTagGroupToTags(kkAdminEng);
            }

            return _getTagGroupToTags.getTagGroupToTags(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a new Tag object
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param tag
     *            the new AdminTag object to insert - do not fill out the Id (set it to -1) as this
     *            will be created
     * @return the id of the AdminTag object created
     * @throws KKAdminException
     */
     public int insertTag(String sessionId, AdminTag tag) throws KKAdminException
     {
         try
         {
            if (_insertTag == null)
            {
                _insertTag = new InsertTag(kkAdminEng);
            }

            return _insertTag.insertTag(sessionId, tag);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an array of Tag objects - provide a Tag record for each supported language.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param tags
     *            the array of AdminTag objects to insert - do not fill out the Id on these (set
     *            them to -1) as this will be created. It is assumed that all of these tags will
     *            have the same ID, and there will be one for each language.
     * @return the id of the AdminTag object created
     * @throws KKAdminException
     */
     public int insertTags(String sessionId, AdminTag[] tags) throws KKAdminException
     {
         try
         {
            if (_insertTags == null)
            {
                _insertTags = new InsertTags(kkAdminEng);
            }

            return _insertTags.insertTags(sessionId, tags);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a new TagGroup object
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param tagGroup
     *            the new AdminTagGroup object to insert - do not fill out the Id (set it to -1) as
     *            this will be created
     * @return the id of the AdminTagGroup object created
     * @throws KKAdminException
     */
     public int insertTagGroup(String sessionId, AdminTagGroup tagGroup) throws KKAdminException
     {
         try
         {
            if (_insertTagGroup == null)
            {
                _insertTagGroup = new InsertTagGroup(kkAdminEng);
            }

            return _insertTagGroup.insertTagGroup(sessionId, tagGroup);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an array of TagGroup objects - provide a TagGroup object for each language
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param tagGroups
     *            the new AdminTagGroup object to insert - do not fill out the Id on these (set
     *            these to -1) as this will be created. It is assumed that all of these tagGroups
     *            will have the same ID, and there will be one for each language.
     * @return the id of the AdminTagGroup object created
     * @throws KKAdminException
     */
     public int insertTagGroups(String sessionId, AdminTagGroup[] tagGroups) throws KKAdminException
     {
         try
         {
            if (_insertTagGroups == null)
            {
                _insertTagGroups = new InsertTagGroups(kkAdminEng);
            }

            return _insertTagGroups.insertTagGroups(sessionId, tagGroups);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an AdminTagGroupToTag record
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param tagGroupToTag
     * @throws KKAdminException
     */
     public void insertTagGroupToTags(String sessionId, AdminTagGroupToTag tagGroupToTag) throws KKAdminException
     {
         try
         {
            if (_insertTagGroupToTags == null)
            {
                _insertTagGroupToTags = new InsertTagGroupToTags(kkAdminEng);
            }

            _insertTagGroupToTags.insertTagGroupToTags(sessionId, tagGroupToTag);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update an existing Tag object - only the Name and the SortOrder can be updated
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param tag
     *            the AdminTag object to update
     * @return the id of the AdminTagGroup object updated
     * @throws KKAdminException
     */
     public int updateTag(String sessionId, AdminTag tag) throws KKAdminException
     {
         try
         {
            if (_updateTag == null)
            {
                _updateTag = new UpdateTag(kkAdminEng);
            }

            return _updateTag.updateTag(sessionId, tag);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update an existing TagGroup object - You can update the name, description and the set of tags
     * associated to the tag group
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param tagGroup
     *            the AdminTagGroup object to update
     * @return the id of the AdminTagGroup object updated
     * @throws KKAdminException
     */
     public int updateTagGroup(String sessionId, AdminTagGroup tagGroup) throws KKAdminException
     {
         try
         {
            if (_updateTagGroup == null)
            {
                _updateTagGroup = new UpdateTagGroup(kkAdminEng);
            }

            return _updateTagGroup.updateTagGroup(sessionId, tagGroup);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a Tag object. This will remove this tag from all Tag Groups that it was in.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param id
     *            the id of the AdminTag to delete
     * @throws KKAdminException
     */
     public void deleteTag(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_deleteTag == null)
            {
                _deleteTag = new DeleteTag(kkAdminEng);
            }

            _deleteTag.deleteTag(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a TagGroup object
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param id
     *            the id of the AdminTagGroup to delete
     * @throws KKAdminException
     */
     public void deleteTagGroup(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_deleteTagGroup == null)
            {
                _deleteTagGroup = new DeleteTagGroup(kkAdminEng);
            }

            _deleteTagGroup.deleteTagGroup(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Return an array of AdminTagGroup objects for a category. Each AdminTagGroup is populated with
     * an array of AdminTags which are sorted first by sort order and then by name. An empty array
     * is returned if no TagGroup objects exist.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param categoryId
     *            The id of the category
     * @param languageId
     *            the language Id - or it could be
     *            com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to use the default language
     * @return Returns an array of AdminTagGroups
     * @throws KKAdminException
     */
     public AdminTagGroup[] getTagGroupsPerCategory(String sessionId, int categoryId, int languageId) throws KKAdminException
     {
         try
         {
            if (_getTagGroupsPerCategory == null)
            {
                _getTagGroupsPerCategory = new GetTagGroupsPerCategory(kkAdminEng);
            }

            return _getTagGroupsPerCategory.getTagGroupsPerCategory(sessionId, categoryId, languageId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Return an array of Category Ids linked to the specified tag group. An empty array is returned
     * if no linked Category objects exist.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param tagGroupId
     *            The id of the tag Group
     * @return Returns an array of Category ids
     * @throws KKAdminException
     */
     public int[] getCategoriesPerTagGroup(String sessionId, int tagGroupId) throws KKAdminException
     {
         try
         {
            if (_getCategoriesPerTagGroup == null)
            {
                _getCategoriesPerTagGroup = new GetCategoriesPerTagGroup(kkAdminEng);
            }

            return _getCategoriesPerTagGroup.getCategoriesPerTagGroup(sessionId, tagGroupId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Return an array of all of the AdminCategoryToTagGroup records. An empty array is returned if
     * no such records exist.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @return Returns an array of AdminCategoryToTagGroups
     * @throws KKAdminException
     */
     public AdminCategoryToTagGroup[] getCategoriesToTagGroups(String sessionId) throws KKAdminException
     {
         try
         {
            if (_getCategoriesToTagGroups == null)
            {
                _getCategoriesToTagGroups = new GetCategoriesToTagGroups(kkAdminEng);
            }

            return _getCategoriesToTagGroups.getCategoriesToTagGroups(sessionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Add the array of AdminTagGroups to the category identified by categoryId. We assume that the
     * category and the tag groups already exist in the database since this method inserts an
     * association between a tag group and a category rather than the actual objects.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param tagGroups
     *            Array of AdminTagGroup objects
     * @param categoryId
     *            The id of the category
     * @throws KKAdminException
     */
     public void addTagGroupsToCategory(String sessionId, AdminTagGroup[] tagGroups, int categoryId) throws KKAdminException
     {
         try
         {
            if (_addTagGroupsToCategory == null)
            {
                _addTagGroupsToCategory = new AddTagGroupsToCategory(kkAdminEng);
            }

            _addTagGroupsToCategory.addTagGroupsToCategory(sessionId, tagGroups, categoryId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Add the array of categories to the tagGroup specified. It is assumed that the categories and
     * the tag group already exist in the database since this method inserts associations between a
     * tag group and the specified categories rather than the actual objects.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param tagGroupId
     *            the tag group Id to link to the categories
     * @param categories
     *            an array of category Ids to link to the Tag Group
     * @throws KKAdminException
     */
     public void addCategoriesToTagGroups(String sessionId, int tagGroupId, int[] categories) throws KKAdminException
     {
         try
         {
            if (_addCategoriesToTagGroups == null)
            {
                _addCategoriesToTagGroups = new AddCategoriesToTagGroups(kkAdminEng);
            }

            _addCategoriesToTagGroups.addCategoriesToTagGroups(sessionId, tagGroupId, categories);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * If associations exist between the AdminTagGroups and the category identified by categoryId,
     * then they are removed. If tagGroups is set to null, all associations to the category are
     * removed.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param tagGroups
     *            Array of AdminTagGroup objects
     * @param categoryId
     *            The id of the category
     * @throws KKAdminException
     */
     public void removeTagGroupsFromCategory(String sessionId, AdminTagGroup[] tagGroups, int categoryId) throws KKAdminException
     {
         try
         {
            if (_removeTagGroupsFromCategory == null)
            {
                _removeTagGroupsFromCategory = new RemoveTagGroupsFromCategory(kkAdminEng);
            }

            _removeTagGroupsFromCategory.removeTagGroupsFromCategory(sessionId, tagGroups, categoryId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Fetches all of the tags associated with a product.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param productId
     *            The id of the product
     * @param languageId
     *            the language Id - or it could be
     *            com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to use the default language
     * @return Returns an array of AdminTag objects
     * @throws KKAdminException
     */
     public AdminTag[] getTagsPerProduct(String sessionId, int productId, int languageId) throws KKAdminException
     {
         try
         {
            if (_getTagsPerProduct == null)
            {
                _getTagsPerProduct = new GetTagsPerProduct(kkAdminEng);
            }

            return _getTagsPerProduct.getTagsPerProduct(sessionId, productId, languageId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Add the array of AdminTags to the product identified by productId. We assume that the product
     * and the tags already exist in the database since this method inserts an association between a
     * tag and a product rather than the actual objects.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param tags
     *            Array of AdminTag objects
     * @param productId
     *            The id of the product
     * @throws KKAdminException
     */
     public void addTagsToProduct(String sessionId, AdminTag[] tags, int productId) throws KKAdminException
     {
         try
         {
            if (_addTagsToProduct == null)
            {
                _addTagsToProduct = new AddTagsToProduct(kkAdminEng);
            }

            _addTagsToProduct.addTagsToProduct(sessionId, tags, productId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * If associations exist between the AdminTags and the product identified by productId, then
     * they are removed. If tags is set to null, all associations to the product are removed.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param tags
     *            Array of AdminTag objects
     * @param productId
     *            The id of the product
     * @throws KKAdminException
     */
     public void removeTagsFromProduct(String sessionId, AdminTag[] tags, int productId) throws KKAdminException
     {
         try
         {
            if (_removeTagsFromProduct == null)
            {
                _removeTagsFromProduct = new RemoveTagsFromProduct(kkAdminEng);
            }

            _removeTagsFromProduct.removeTagsFromProduct(sessionId, tags, productId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Wherever in the engine any configurations have been cached, they are refreshed when this
     * method is called.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @throws KKAdminException
     */
     public void updateCachedConfigurations(String sessionId) throws KKAdminException
     {
         try
         {
            if (_updateCachedConfigurations == null)
            {
                _updateCachedConfigurations = new UpdateCachedConfigurations(kkAdminEng);
            }

            _updateCachedConfigurations.updateCachedConfigurations(sessionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Publish Products to the Data Feed - This is no longer supported
     * 
     * @deprecated From version 7.3.0.0 this is no longer supported.
     * @param sessionId
     *            Session Id
     * @param adminPublishConfig
     *            Defines the data feed parameters
     * @throws KKAdminException
     */
    @Deprecated
     public void publishProducts(String sessionId, AdminPublishConfig adminPublishConfig) throws KKAdminException
     {
         try
         {
            if (_publishProducts == null)
            {
                _publishProducts = new PublishProducts(kkAdminEng);
            }

            _publishProducts.publishProducts(sessionId, adminPublishConfig);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Add all products in the KonaKart database to the search engine. If products with identical
     * product ids already exist, they will be updated with the new data.
     * 
     * @param async
     *            When set to true, control is immediately returned to the caller and the operation
     *            proceeds asynchronously.
     * @param sessionId
     *            Session Id
     * @throws KKAdminException
     */
     public void addAllProductsToSearchEngine(String sessionId, boolean async) throws KKAdminException
     {
         try
         {
            if (_addAllProductsToSearchEngine == null)
            {
                _addAllProductsToSearchEngine = new AddAllProductsToSearchEngine(kkAdminEng);
            }

            _addAllProductsToSearchEngine.addAllProductsToSearchEngine(sessionId, async);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Add the product referenced by productId to the search engine. If the product already exists,
     * it will be updated.
     * 
     * @param sessionId
     *            Session Id
     * @param productId
     *            The numeric id of the product
     * @throws KKAdminException
     */
     public void addProductToSearchEngine(String sessionId, int productId) throws KKAdminException
     {
         try
         {
            if (_addProductToSearchEngine == null)
            {
                _addProductToSearchEngine = new AddProductToSearchEngine(kkAdminEng);
            }

            _addProductToSearchEngine.addProductToSearchEngine(sessionId, productId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Remove all products from the search engine.
     * 
     * @param sessionId
     *            Session Id
     * @param async
     *            When set to true, control is immediately returned to the caller and the operation
     *            proceeds asynchronously on the search engine.
     * @throws KKAdminException
     */
     public void removeAllProductsFromSearchEngine(String sessionId, boolean async) throws KKAdminException
     {
         try
         {
            if (_removeAllProductsFromSearchEngine == null)
            {
                _removeAllProductsFromSearchEngine = new RemoveAllProductsFromSearchEngine(kkAdminEng);
            }

            _removeAllProductsFromSearchEngine.removeAllProductsFromSearchEngine(sessionId, async);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Remove the product referenced by productId from the search engine.
     * 
     * @param sessionId
     *            Session Id
     * @param productId
     *            The numeric id of the product
     * @throws KKAdminException
     */
     public void removeProductFromSearchEngine(String sessionId, int productId) throws KKAdminException
     {
         try
         {
            if (_removeProductFromSearchEngine == null)
            {
                _removeProductFromSearchEngine = new RemoveProductFromSearchEngine(kkAdminEng);
            }

            _removeProductFromSearchEngine.removeProductFromSearchEngine(sessionId, productId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * A method that allows you to modify the quantity of a product through the API without needing
     * to fetch the complete product and edit it.
     * <p>
     * The product may be identified by the product id or the SKU. When set to a valid value, the
     * SKU is used and the product id is ignored. When the SKU is set to null, the product id is
     * used to identify the product. Note that the SKU should always be used in cases where a single
     * product has many variations such as color and size.
     * <p>
     * The <code>quantity</code> parameter may be used to set the new quantity, to reduce the
     * quantity by its value or to increase the quantity by its value. In other words it can replace
     * the current quantity, be subtracted or added to the current quantity. The
     * <code>operation</code> parameter determines which operation is performed.
     * <p>
     * Valid values are:
     * <ul>
     * <li>KonakartAdminConstants.ADD_QUANTITY</li>
     * <li>KonakartAdminConstants.REPLACE_QUANTITY</li>
     * <li>KonakartAdminConstants.SUBTRACT_QUANTITY</li>
     * </ul>
     * 
     * @param sessionId
     *            Session Id
     * @param sku
     *            The SKU of the product. If set to null, the product id is used.
     * @param id
     *            The product id. Only used if the SKU is set to null.
     * @param quantity
     *            The new quantity
     * @param operation
     *            Determines whether to set, add or subtract the quantity. See above for valid
     *            values.
     * @throws KKAdminException
     */
     public void setProductQuantity(String sessionId, String sku, int id, int quantity, int operation) throws KKAdminException
     {
         try
         {
            if (_setProductQuantity == null)
            {
                _setProductQuantity = new SetProductQuantity(kkAdminEng);
            }

            _setProductQuantity.setProductQuantity(sessionId, sku, id, quantity, operation);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * A method that allows you to modify the quantity of a product through the API without needing
     * to fetch the complete product and edit it.
     * <p>
     * The product may be identified by the product id or the SKU. When set to a valid value, the
     * SKU is used and the product id is ignored. When the SKU is set to null, the product id is
     * used to identify the product. Note that the SKU should always be used in cases where a single
     * product has many variations such as color and size.
     * <p>
     * The <code>quantity</code> parameter may be used to set the new quantity, to reduce the
     * quantity by its value or to increase the quantity by its value. In other words it can replace
     * the current quantity, be subtracted or added to the current quantity. The
     * <code>operation</code> parameter determines which operation is performed.
     * <p>
     * Valid values are:
     * <ul>
     * <li>KonakartAdminConstants.ADD_QUANTITY</li>
     * <li>KonakartAdminConstants.REPLACE_QUANTITY</li>
     * <li>KonakartAdminConstants.SUBTRACT_QUANTITY</li>
     * </ul>
     * <p>
     * The mgrOptions object allows you to define whether the quantity can have different values
     * depending on the catalogId. It may be set to null.
     * 
     * @param sessionId
     *            Session Id
     * @param sku
     *            The SKU of the product. If set to null, the product id is used.
     * @param id
     *            The product id. Only used if the SKU is set to null.
     * @param quantity
     *            The new quantity
     * @param operation
     *            Determines whether to set, add or subtract the quantity. See above for valid
     *            values.
     * @param mgrOptions
     *            Allows you to define whether the quantity can have different values depending on
     *            the catalogId. May be set to null.
     * @throws KKAdminException
     */
     public void setProductQuantityWithOptions(String sessionId, String sku, int id, int quantity, int operation, AdminProductMgrOptions mgrOptions) throws KKAdminException
     {
         try
         {
            if (_setProductQuantityWithOptions == null)
            {
                _setProductQuantityWithOptions = new SetProductQuantityWithOptions(kkAdminEng);
            }

            _setProductQuantityWithOptions.setProductQuantityWithOptions(sessionId, sku, id, quantity, operation, mgrOptions);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * A method that allows you to directly retrieve the quantity of a product. In the case of a
     * simple product, an alternative way could be to find the product and read the quantity
     * attribute. However, when the product has variations such as color and size, identified by
     * different SKUs, the procedure for retrieving the quantity is more complicated and so this API
     * call comes to the rescue.
     * <p>
     * The product may be identified by the product id or the SKU. When set to a valid value, the
     * SKU is used and the product id is ignored. When the SKU is set to null, the product id is
     * used to identify the product. Note that the SKU should always be used in cases where a single
     * product has many variations such as color and size.
     * 
     * @param sessionId
     *            Session Id
     * @param sku
     *            The SKU of the product. If set to null, the product id is used.
     * @param id
     *            The product id. Only used if the SKU is set to null.
     * @return Returns the product quantity
     * @throws KKAdminException
     */
     public int getProductQuantity(String sessionId, String sku, int id) throws KKAdminException
     {
         try
         {
            if (_getProductQuantity == null)
            {
                _getProductQuantity = new GetProductQuantity(kkAdminEng);
            }

            return _getProductQuantity.getProductQuantity(sessionId, sku, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * A method that allows you to directly retrieve the quantity of a product. In the case of a
     * simple product, an alternative way could be to find the product and read the quantity
     * attribute. However, when the product has variations such as color and size, identified by
     * different SKUs, the procedure for retrieving the quantity is more complicated and so this API
     * call comes to the rescue.
     * <p>
     * The product may be identified by the product id or the SKU. When set to a valid value, the
     * SKU is used and the product id is ignored. When the SKU is set to null, the product id is
     * used to identify the product. Note that the SKU should always be used in cases where a single
     * product has many variations such as color and size.
     * <p>
     * The mgrOptions object allows you to define whether the quantity can have different values
     * depending on the catalogId. It may be set to null.
     * 
     * @param sessionId
     *            Session Id
     * @param sku
     *            The SKU of the product. If set to null, the product id is used.
     * @param id
     *            The product id. Only used if the SKU is set to null.
     * @param mgrOptions
     *            Allows you to define whether the quantity can have different values depending on
     *            the catalogId. May be set to null.
     * @return Returns the product quantity
     * @throws KKAdminException
     */
     public int getProductQuantityWithOptions(String sessionId, String sku, int id, AdminProductMgrOptions mgrOptions) throws KKAdminException
     {
         try
         {
            if (_getProductQuantityWithOptions == null)
            {
                _getProductQuantityWithOptions = new GetProductQuantityWithOptions(kkAdminEng);
            }

            return _getProductQuantityWithOptions.getProductQuantityWithOptions(sessionId, sku, id, mgrOptions);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * A method that allows you to modify the date when a product will be available, through the API
     * without needing to fetch the complete product and edit it.
     * <p>
     * The product may be identified by the product id or the SKU. When set to a valid value, the
     * SKU is used and the product id is ignored. When the SKU is set to null, the product id is
     * used to identify the product. Note that the SKU should always be used in cases where a single
     * product has many variations such as color and size.
     * 
     * @param sessionId
     *            Session Id
     * @param sku
     *            The SKU of the product. If set to null, the product id is used.
     * @param id
     *            The product id. Only used if the SKU is set to null.
     * @param dateAvailable
     *            The date when the product will be available
     * @throws KKAdminException
     */
     public void setProductAvailability(String sessionId, String sku, int id, Calendar dateAvailable) throws KKAdminException
     {
         try
         {
            if (_setProductAvailability == null)
            {
                _setProductAvailability = new SetProductAvailability(kkAdminEng);
            }

            _setProductAvailability.setProductAvailability(sessionId, sku, id, dateAvailable);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * A method that allows you to modify the date when a product will be available, through the API
     * without needing to fetch the complete product and edit it.
     * <p>
     * The product may be identified by the product id or the SKU. When set to a valid value, the
     * SKU is used and the product id is ignored. When the SKU is set to null, the product id is
     * used to identify the product. Note that the SKU should always be used in cases where a single
     * product has many variations such as color and size.
     * <p>
     * The mgrOptions object allows you to define whether the availability date can have different
     * values depending on the catalogId. It may be set to null.
     * 
     * @param sessionId
     *            Session Id
     * @param sku
     *            The SKU of the product. If set to null, the product id is used.
     * @param id
     *            The product id. Only used if the SKU is set to null.
     * @param dateAvailable
     *            The date when the product will be available
     * @param mgrOptions
     *            Allows you to define whether the availability date can have different values
     *            depending on the catalogId. May be set to null.
     * @throws KKAdminException
     */
     public void setProductAvailabilityWithOptions(String sessionId, String sku, int id, Calendar dateAvailable, AdminProductMgrOptions mgrOptions) throws KKAdminException
     {
         try
         {
            if (_setProductAvailabilityWithOptions == null)
            {
                _setProductAvailabilityWithOptions = new SetProductAvailabilityWithOptions(kkAdminEng);
            }

            _setProductAvailabilityWithOptions.setProductAvailabilityWithOptions(sessionId, sku, id, dateAvailable, mgrOptions);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * A method that directly returns the date when a product will be available. In the case of a
     * simple product, an alternative way could be to find the product and read the dateAvailable
     * attribute. However, when the product has variations such as color and size, identified by
     * different SKUs, the procedure for retrieving the date available is more complicated and so
     * this API call comes to the rescue.
     * <p>
     * The product may be identified by the product id or the SKU. When set to a valid value, the
     * SKU is used and the product id is ignored. When the SKU is set to null, the product id is
     * used to identify the product. Note that the SKU should always be used in cases where a single
     * product has many variations such as color and size.
     * 
     * @param sessionId
     *            Session Id
     * @param sku
     *            The SKU of the product. If set to null, the product id is used.
     * @param id
     *            The product id. Only used if the SKU is set to null.
     * @return Returns the the date when a product will be available
     * @throws KKAdminException
     */
     public Calendar getProductAvailability(String sessionId, String sku, int id) throws KKAdminException
     {
         try
         {
            if (_getProductAvailability == null)
            {
                _getProductAvailability = new GetProductAvailability(kkAdminEng);
            }

            return _getProductAvailability.getProductAvailability(sessionId, sku, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * A method that directly returns the date when a product will be available. In the case of a
     * simple product, an alternative way could be to find the product and read the dateAvailable
     * attribute. However, when the product has variations such as color and size, identified by
     * different SKUs, the procedure for retrieving the date available is more complicated and so
     * this API call comes to the rescue.
     * <p>
     * The product may be identified by the product id or the SKU. When set to a valid value, the
     * SKU is used and the product id is ignored. When the SKU is set to null, the product id is
     * used to identify the product. Note that the SKU should always be used in cases where a single
     * product has many variations such as color and size.
     * <p>
     * The mgrOptions object allows you to define whether the availability date can have different
     * values depending on the catalogId. It may be set to null.
     * 
     * @param sessionId
     *            Session Id
     * @param sku
     *            The SKU of the product. If set to null, the product id is used.
     * @param id
     *            The product id. Only used if the SKU is set to null.
     * @param mgrOptions
     *            Allows you to define whether the availability date can have different values
     *            depending on the catalogId. May be set to null.
     * @return Returns the the date when a product will be available
     * @throws KKAdminException
     */
     public Calendar getProductAvailabilityWithOptions(String sessionId, String sku, int id, AdminProductMgrOptions mgrOptions) throws KKAdminException
     {
         try
         {
            if (_getProductAvailabilityWithOptions == null)
            {
                _getProductAvailabilityWithOptions = new GetProductAvailabilityWithOptions(kkAdminEng);
            }

            return _getProductAvailabilityWithOptions.getProductAvailabilityWithOptions(sessionId, sku, id, mgrOptions);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * A sessionId is created when a customer logs in to the KonaKart Admin App using the login()
     * API call. This sessionId is persisted in the database in a table which has 5 custom fields.
     * This method allows you to store data in these custom fields which can later be retrieved by
     * using the sessionId as the key.
     * 
     * @param sessionId
     *            The sessionId
     * @param data
     *            The data to be saved
     * @param position
     *            This must be in the range of 1-5 to identify custom1 to custom5
     * @throws KKAdminException
     */
     public void addCustomDataToSession(String sessionId, String data, int position) throws KKAdminException
     {
         try
         {
            if (_addCustomDataToSession == null)
            {
                _addCustomDataToSession = new AddCustomDataToSession(kkAdminEng);
            }

            _addCustomDataToSession.addCustomDataToSession(sessionId, data, position);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * A sessionId is created when a customer logs in to KonaKart Admin App using the login() API
     * call. This sessionId is persisted in the database in a table which has 5 custom fields. This
     * method allows you to retrieve the data in these custom fields by passing the sessionId as the
     * key and a pointer to identify the custom field to be used.
     * 
     * @param sessionId
     *            The sessionId
     * @param position
     *            This must be in the range of 1-5 to identify custom1 to custom5
     * @return Returns the custom data
     * @throws KKAdminException
     */
     public String getCustomDataFromSession(String sessionId, int position) throws KKAdminException
     {
         try
         {
            if (_getCustomDataFromSession == null)
            {
                _getCustomDataFromSession = new GetCustomDataFromSession(kkAdminEng);
            }

            return _getCustomDataFromSession.getCustomDataFromSession(sessionId, position);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Executes a method with name methodName of a class with name className with the parameters of
     * type String in paramArray. If the method has parameters, then they must be of type String.
     * The order of the parameters in the array must match the order of the parameters in the
     * method. i.e. myMethod(String p1, String p2) needs to receive an array where p1 is in index 0
     * and p2 in index 1. The method must return a String which may be null.
     * <p>
     * The purpose of this API call is to run batch jobs which may be easily run from a scheduler
     * such as Quartz. The java class is instantiated through reflection. This means that it lends
     * itself nicely to custom batch jobs created by KonaKart administrators. Note that if the class
     * has a constructor with a single parameter of type KKAdminIf then this constructor will be
     * called and will be passed an instantiated Admin Eng object.
     * <p>
     * For example:
     * <p>
     * 
     * <pre>
     * public AdminOrderBatchMgr(KKAdminIf eng) throws Exception
     * {
     *     super.init(eng);
     * }
     * </pre>
     * 
     * @param sessionId
     *            The sessionId
     * @param className
     *            The fully qualified className
     * @param methodName
     *            The name of the method to be executed
     * @param paramArray
     *            The parameters passed to the method
     * @return Returns a String
     * @throws KKAdminException
     */
     public String execute(String sessionId, String className, String methodName, String[] paramArray) throws KKAdminException
     {
         try
         {
            if (_execute == null)
            {
                _execute = new Execute(kkAdminEng);
            }

            return _execute.execute(sessionId, className, methodName, paramArray);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Executes the batch job with the specified group and name.
     * <p>
     * The batch job must be defined as one the existing batch jobs in the system.
     * <p>
     * For Quartz jobs, the paramAray is not actually used but it is provided should these
     * parameters be required for overriding the implementation of this method in a custom engine.
     * 
     * @param sessionId
     *            The sessionId
     * @param group
     *            The group of the batch job to be run
     * @param name
     *            The name of the batch job to be executed
     * @param paramArray
     *            A generic set of Strings that can be used for custom purposes.
     * @return Returns true if the job was successfully started, otherwise false
     * @throws KKAdminException
     */
     public boolean runBatchJob(String sessionId, String group, String name, String[] paramArray) throws KKAdminException
     {
         try
         {
            if (_runBatchJob == null)
            {
                _runBatchJob = new RunBatchJob(kkAdminEng);
            }

            return _runBatchJob.runBatchJob(sessionId, group, name, paramArray);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an array of AdminProductToStore objects for the specified store
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param dataDesc
     *            Used to control the data offset, limit the number of items returned and set the
     *            sort order Used to control the data offset, limit the number of items returned and
     *            set the sort order. You can specify any two of the following to define the sort
     *            order: AdminDataDescriptor.ORDER_BY_STOREID_ASCENDING,
     *            AdminDataDescriptor.ORDER_BY_STOREID_DESCENDING,
     *            AdminDataDescriptor.ORDER_BY_ID_ASCENDING,
     *            AdminDataDescriptor.ORDER_BY_ID_DESCENDING
     * @param search
     *            Defines the records to be returned. Populate the id with the productId (or set to
     *            KonaKartAdminConstant.NOT_SET to get all products) and the name with the storeId
     *            (or leave null for all stores).
     * @return an array of AdminProductToStore objects for the specified store (or all records if
     *         the storeId is null). If no AdminProductToStore records exist for the specified store
     *         an empty array is returned.
     * @throws KKAdminException
     */
     public AdminProductToStore[] getProductsToStores(String sessionId, AdminDataDescriptor dataDesc, AdminSearch search) throws KKAdminException
     {
         try
         {
            if (_getProductsToStores == null)
            {
                _getProductsToStores = new GetProductsToStores(kkAdminEng);
            }

            return _getProductsToStores.getProductsToStores(sessionId, dataDesc, search);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Inserts an array of AdminProductToStore objects
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param productToStores
     *            an array of AdminProductToStore objects to insert into the database
     * @throws KKAdminException
     */
     public void insertProductsToStores(String sessionId, AdminProductToStore[] productToStores) throws KKAdminException
     {
         try
         {
            if (_insertProductsToStores == null)
            {
                _insertProductsToStores = new InsertProductsToStores(kkAdminEng);
            }

            _insertProductsToStores.insertProductsToStores(sessionId, productToStores);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Removes an array of AdminProductToStore objects
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param productToStores
     *            an array of AdminProductToStore objects to delete from the database
     * @throws KKAdminException
     */
     public void removeProductsToStores(String sessionId, AdminProductToStore[] productToStores) throws KKAdminException
     {
         try
         {
            if (_removeProductsToStores == null)
            {
                _removeProductsToStores = new RemoveProductsToStores(kkAdminEng);
            }

            _removeProductsToStores.removeProductsToStores(sessionId, productToStores);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an order. This method is intended to be used for importing orders that have previously
     * been validated and saved maybe in another KonaKart. It is used by the KonaKart XML import /
     * export functionality.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param order
     *            The order to be inserted
     * @return Returns the order Id
     * @throws KKAdminException
     */
     public int insertOrder(String sessionId, AdminOrder order) throws KKAdminException
     {
         try
         {
            if (_insertOrder == null)
            {
                _insertOrder = new InsertOrder(kkAdminEng);
            }

            return _insertOrder.insertOrder(sessionId, order);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Return the WishList objects defined by the search criteria. If the includeChildren attribute
     * on the AdminWishListSearch is true the WishListItem children on each WishList object are
     * returned.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param search
     *            the AdminWishListSearch object that defines the wish list objects to search for.
     *            If null we use the default AdminWishListSearch object.
     * @param offset
     *            starting offset in database - so that you can page through results
     * @param size
     *            size of the group that will be returned - the maximum number of records returned
     * @return an AdminWishLists object
     * @throws KKAdminException
     */
     public AdminWishLists getWishLists(String sessionId, AdminWishListSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getWishLists == null)
            {
                _getWishLists = new GetWishLists(kkAdminEng);
            }

            return _getWishLists.getWishLists(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a wish list and any attached wish list items. This method is intended to be used for
     * importing wish lists that have previously been validated and saved maybe in another KonaKart.
     * It is used by the KonaKart XML import / export functionality.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param wishList
     *            The wish list
     * @return Returns the wish list Id of the newly-inserted wish list
     * @throws KKAdminException
     */
     public int insertWishList(String sessionId, AdminWishList wishList) throws KKAdminException
     {
         try
         {
            if (_insertWishList == null)
            {
                _insertWishList = new InsertWishList(kkAdminEng);
            }

            return _insertWishList.insertWishList(sessionId, wishList);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a wish list and all of its wish list items.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param wishListId
     *            Id of the wish list item
     * @throws KKAdminException
     */
     public void deleteWishList(String sessionId, int wishListId) throws KKAdminException
     {
         try
         {
            if (_deleteWishList == null)
            {
                _deleteWishList = new DeleteWishList(kkAdminEng);
            }

            _deleteWishList.deleteWishList(sessionId, wishListId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an AdminWishListItem. This method is intended to be used for importing wishlists that
     * have previously been validated and saved maybe in another KonaKart. It is used by the
     * KonaKart XML import / export functionality.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param wishListItem
     *            The wish list item
     * @return Returns the wishListItem Id of the newly-inserted AdminWishListItem
     * @throws KKAdminException
     */
     public int insertWishListItem(String sessionId, AdminWishListItem wishListItem) throws KKAdminException
     {
         try
         {
            if (_insertWishListItem == null)
            {
                _insertWishListItem = new InsertWishListItem(kkAdminEng);
            }

            return _insertWishListItem.insertWishListItem(sessionId, wishListItem);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a wish list and all of its wish list items.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param wishListItemId
     *            Id of the wish list item
     * @throws KKAdminException
     */
     public void deleteWishListItem(String sessionId, int wishListItemId) throws KKAdminException
     {
         try
         {
            if (_deleteWishListItem == null)
            {
                _deleteWishListItem = new DeleteWishListItem(kkAdminEng);
            }

            _deleteWishListItem.deleteWishListItem(sessionId, wishListItemId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get Addresses defined by the search criteria
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param search
     *            the search criteria
     * @param offset
     *            the offset in the record set to start from
     * @param size
     *            the maximum number of records to return
     * @return an AdminAddressSearchResult object
     * @throws KKAdminException
     */
     public AdminAddressSearchResult getAddresses(String sessionId, AdminAddressSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getAddresses == null)
            {
                _getAddresses = new GetAddresses(kkAdminEng);
            }

            return _getAddresses.getAddresses(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get Addresses defined by the search criteria
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param addressId
     *            the id of the address to retrieve
     * @return the Address with the specified Id if it exists, otherwise null.
     * @throws KKAdminException
     */
     public AdminAddress getAddressById(String sessionId, int addressId) throws KKAdminException
     {
         try
         {
            if (_getAddressById == null)
            {
                _getAddressById = new GetAddressById(kkAdminEng);
            }

            return _getAddressById.getAddressById(sessionId, addressId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an AdminAddress.<br>
     * KonaKart supports addresses for customers, products, manufacturers and stores. The following
     * rules apply:
     * <ul>
     * <li>If customerId > 0 the address is assumed to be that of a customer</li>
     * <li>If manufacturerId > 0 the address is assumed to be that of a manufacturer</li>
     * <li>If addrStoreId != null the address is assumed to be that of a store</li>
     * <li>Otherwise we assume that the address may be used for a product. Many products may be
     * associated to the same address (e.g. dropshipper address) so the product addresses are linked
     * to products indirectly using a seperate DB table.</li>
     * </ul>
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param address
     *            an AdminAddress object
     * @return Returns the addresId of the newly-inserted AdminAddress
     * @throws KKAdminException
     */
     public int insertAddress(String sessionId, AdminAddress address) throws KKAdminException
     {
         try
         {
            if (_insertAddress == null)
            {
                _insertAddress = new InsertAddress(kkAdminEng);
            }

            return _insertAddress.insertAddress(sessionId, address);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Updates an AdminAddress.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param address
     *            the AdminAddress object to update
     * @throws KKAdminException
     */
     public void updateAddress(String sessionId, AdminAddress address) throws KKAdminException
     {
         try
         {
            if (_updateAddress == null)
            {
                _updateAddress = new UpdateAddress(kkAdminEng);
            }

            _updateAddress.updateAddress(sessionId, address);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Deletes an AdminAddress.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param addressId
     *            the id of the address to delete
     * @throws KKAdminException
     */
     public void deleteAddress(String sessionId, int addressId) throws KKAdminException
     {
         try
         {
            if (_deleteAddress == null)
            {
                _deleteAddress = new DeleteAddress(kkAdminEng);
            }

            _deleteAddress.deleteAddress(sessionId, addressId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Inserts an AdminCustomerTag object into the database.
     * <p>
     * The following customer tag attributes are compulsory:
     * <ul>
     * <li>name</li>
     * <li>description</li>
     * <li>type</li>
     * </ul>
     * <p>
     * The id of the new object is returned.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param tag
     *            The AdminCustomerTag object to be inserted
     * @return Returns the id of the CustomerTag object
     * @throws KKAdminException
     */
     public int insertCustomerTag(String sessionId, AdminCustomerTag tag) throws KKAdminException
     {
         try
         {
            if (_insertCustomerTag == null)
            {
                _insertCustomerTag = new InsertCustomerTag(kkAdminEng);
            }

            return _insertCustomerTag.insertCustomerTag(sessionId, tag);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an AdminCustomerTagSearchResult object.
     * <p>
     * Constraints may be added for:
     * <ul>
     * <li>id</li>
     * <li>name</li>
     * </ul>
     * <p>
     * The returned objects may be ordered by:
     * <ul>
     * <li>AdminDataDescriptor.ORDER_BY_ID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_DESCRIPTION_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_DESCRIPTION_DESCENDING</li>
     * </ul>
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param search
     *            The search object that defines the search parameters and sort order
     * @param offset
     *            The offset in the db
     * @param size
     *            The number of records from the specified offset
     * @return Returns an AdminCustomerTagSearchResult object
     * @throws KKAdminException
     */
     public AdminCustomerTagSearchResult getCustomerTags(String sessionId, AdminCustomerTagSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getCustomerTags == null)
            {
                _getCustomerTags = new GetCustomerTags(kkAdminEng);
            }

            return _getCustomerTags.getCustomerTags(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update an AdminCustomerTag object. If the value of an attribute is null, the current value is
     * not updated.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param tag
     *            The AdminCustomerTag object used for the update
     * @return Returns the id of the updated AdminCustomerTag object
     * @throws KKAdminException
     */
     public int updateCustomerTag(String sessionId, AdminCustomerTag tag) throws KKAdminException
     {
         try
         {
            if (_updateCustomerTag == null)
            {
                _updateCustomerTag = new UpdateCustomerTag(kkAdminEng);
            }

            return _updateCustomerTag.updateCustomerTag(sessionId, tag);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a Customer tag
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param id
     *            The id of the deleted customer tag
     * @return Returns the id of the deleted customer tag
     * @throws KKAdminException
     */
     public int deleteCustomerTag(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_deleteCustomerTag == null)
            {
                _deleteCustomerTag = new DeleteCustomerTag(kkAdminEng);
            }

            return _deleteCustomerTag.deleteCustomerTag(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the AdminCustomerTag object for the <code>id</code> parameter, or Null if the
     * customer tag doesn't exist in the DB.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param id
     *            The id of the AdminCustomerTag object
     * @return Returns an AdminCustomerTag object
     * @throws KKAdminException
     */
     public AdminCustomerTag getCustomerTag(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_getCustomerTag == null)
            {
                _getCustomerTag = new GetCustomerTag(kkAdminEng);
            }

            return _getCustomerTag.getCustomerTag(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Deletes the value of the customer tag referenced by <code>tagName</code> for the customer
     * referenced by <code>customerId</code>.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param customerId
     *            The id of the customer
     * @param tagName
     *            The name of the customer tag
     * @throws KKAdminException
     */
     public void deleteCustomerTagForCustomer(String sessionId, int customerId, String tagName) throws KKAdminException
     {
         try
         {
            if (_deleteCustomerTagForCustomer == null)
            {
                _deleteCustomerTagForCustomer = new DeleteCustomerTagForCustomer(kkAdminEng);
            }

            _deleteCustomerTagForCustomer.deleteCustomerTagForCustomer(sessionId, customerId, tagName);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the customer tag object for the <code>tagName</code> parameter, or Null if the
     * customer tag doesn't exist in the DB. The <code>value</code> attribute of the customer tag
     * contains the value for the customer referenced by <code>customerId</code>.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param customerId
     *            The id of the customer
     * @param tagName
     *            The name of the customer tag
     * @return Returns a customer tag object
     * @throws KKAdminException
     */
     public AdminCustomerTag getCustomerTagForCustomer(String sessionId, int customerId, String tagName) throws KKAdminException
     {
         try
         {
            if (_getCustomerTagForCustomer == null)
            {
                _getCustomerTagForCustomer = new GetCustomerTagForCustomer(kkAdminEng);
            }

            return _getCustomerTagForCustomer.getCustomerTagForCustomer(sessionId, customerId, tagName);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the customer tag object for the <code>tagName</code> parameter, or Null if the
     * customer tag doesn't exist in the DB.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param tagName
     *            The name of the customer tag
     * @return Returns a customer tag object
     * @throws KKAdminException
     */
     public AdminCustomerTag getCustomerTagForName(String sessionId, String tagName) throws KKAdminException
     {
         try
         {
            if (_getCustomerTagForName == null)
            {
                _getCustomerTagForName = new GetCustomerTagForName(kkAdminEng);
            }

            return _getCustomerTagForName.getCustomerTagForName(sessionId, tagName);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This method fetches all of the customer tags for the customer referenced by the
     * <code>customerId</code> parameter. The <code>value</code> attribute of the customer tags
     * contains the value for the customer referenced by <code>customerId</code>.
     * <p>
     * An empty array is returned if no tags exist.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param customerId
     *            The id of the customer
     * @return Returns an array of AdminCustomerTag objects
     * @throws KKAdminException
     */
     public AdminCustomerTag[] getCustomerTagsForCustomer(String sessionId, int customerId) throws KKAdminException
     {
         try
         {
            if (_getCustomerTagsForCustomer == null)
            {
                _getCustomerTagsForCustomer = new GetCustomerTagsForCustomer(kkAdminEng);
            }

            return _getCustomerTagsForCustomer.getCustomerTagsForCustomer(sessionId, customerId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Assigns a customer tag to the customer referenced by the <code>customerId</code>. If a tag
     * already exists with this name, then the value is replaced with the new value.
     * <p>
     * The compulsory tag fields are:
     * <ul>
     * <li>name</li>
     * <li>value</li>
     * </ul>
     * <p>
     * Note that a customer tag with name <code>tag.getName()</code> must exist in the database
     * since it is used to validate <code>tag.getValue()</code>.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param customerId
     *            The id of the customer
     * @param tag
     *            The customer tag object
     * @throws KKAdminException
     */
     public void insertCustomerTagForCustomer(String sessionId, int customerId, AdminCustomerTag tag) throws KKAdminException
     {
         try
         {
            if (_insertCustomerTagForCustomer == null)
            {
                _insertCustomerTagForCustomer = new InsertCustomerTagForCustomer(kkAdminEng);
            }

            _insertCustomerTagForCustomer.insertCustomerTagForCustomer(sessionId, customerId, tag);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Inserts an AdminExpression object. Only the <code>name</code> attribute of the
     * AdminExpression is required.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param exp
     *            The AdminExpression object to be inserted
     * @return Returns the id of the inserted object
     * @throws KKAdminException
     */
     public int insertExpression(String sessionId, AdminExpression exp) throws KKAdminException
     {
         try
         {
            if (_insertExpression == null)
            {
                _insertExpression = new InsertExpression(kkAdminEng);
            }

            return _insertExpression.insertExpression(sessionId, exp);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Updates the expression. An exception is thrown if the AdminExpression does not exist.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param exp
     *            The AdminExpression object to be updated
     * @return Returns the id of the updated AdminExpression object
     * @throws KKAdminException
     */
     public int updateExpression(String sessionId, AdminExpression exp) throws KKAdminException
     {
         try
         {
            if (_updateExpression == null)
            {
                _updateExpression = new UpdateExpression(kkAdminEng);
            }

            return _updateExpression.updateExpression(sessionId, exp);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Deletes the Expression object referenced by <code>id</code>.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param id
     *            The id of the AdminExpression object to be deleted
     * @return Returns the id of the AdminExpression object deleted
     * @throws KKAdminException
     */
     public int deleteExpression(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_deleteExpression == null)
            {
                _deleteExpression = new DeleteExpression(kkAdminEng);
            }

            return _deleteExpression.deleteExpression(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the AdminExpression object for the <code>id</code> parameter, or Null if the
     * AdminExpression doesn't exist in the DB.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param id
     *            The id of the AdminExpression object
     * @return Returns an AdminExpression object
     * @throws KKAdminException
     */
     public AdminExpression getExpression(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_getExpression == null)
            {
                _getExpression = new GetExpression(kkAdminEng);
            }

            return _getExpression.getExpression(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the AdminExpressionVariable object for the <code>id</code> parameter, or Null if the
     * AdminExpressionVariable doesn't exist in the DB.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param id
     *            The id of the AdminExpressionVariable object
     * @return Returns an AdminExpressionVariable object
     * @throws KKAdminException
     */
     public AdminExpressionVariable getExpressionVariable(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_getExpressionVariable == null)
            {
                _getExpressionVariable = new GetExpressionVariable(kkAdminEng);
            }

            return _getExpressionVariable.getExpressionVariable(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an array of AdminExpressionVariable objects for the AdminExpression identified by the
     * <code>id</code> parameter. An empty array is returned if no objects are found.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param expressionId
     *            The AdminExpression id for the AdminExpressionVariable objects
     * @return Returns an array of AdminExpression objects
     * @throws KKAdminException
     */
     public AdminExpressionVariable[] getExpressionVariablesForExpression(String sessionId, int expressionId) throws KKAdminException
     {
         try
         {
            if (_getExpressionVariablesForExpression == null)
            {
                _getExpressionVariablesForExpression = new GetExpressionVariablesForExpression(kkAdminEng);
            }

            return _getExpressionVariablesForExpression.getExpressionVariablesForExpression(sessionId, expressionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the AdminExpression object for the <code>expName</code> parameter, or Null if the
     * AdminExpression doesn't exist in the DB.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param expName
     *            The name of the AdminExpression object
     * @return Returns Returns an AdminExpression object
     * @throws KKAdminException
     */
     public AdminExpression getExpressionForName(String sessionId, String expName) throws KKAdminException
     {
         try
         {
            if (_getExpressionForName == null)
            {
                _getExpressionForName = new GetExpressionForName(kkAdminEng);
            }

            return _getExpressionForName.getExpressionForName(sessionId, expName);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This returns an AdminExpressionSearchResult object.
     * <p>
     * Constraints may be added for:
     * <ul>
     * <li>id</li>
     * <li>name</li>
     * </ul>
     * <p>
     * The returned objects may be ordered by:
     * <ul>
     * <li>AdminDataDescriptor.ORDER_BY_ID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_DESCENDING</li>
     * </ul>
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param search
     *            The search object that defines the search parameters and sort order
     * @param offset
     *            The offset in the db
     * @param size
     *            The number of records from the specified offset
     * @return Returns an AdminExpressionSearchResult object
     * @throws KKAdminException
     */
     public AdminExpressionSearchResult getExpressions(String sessionId, AdminExpressionSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getExpressions == null)
            {
                _getExpressions = new GetExpressions(kkAdminEng);
            }

            return _getExpressions.getExpressions(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Inserts an array of ExpressionVariable objects that should all belong to the same expression.
     * If the array only contains one Expression Variable then, the id of that variable is returned.
     * Otherwise the return value is set to 0.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param expVarArray
     *            The AdminExpressionVariable array of objects to be inserted
     * @return If the array only contains one Expression Variable then, the id of that variable is
     *         returned. Otherwise the return value is set to 0.
     * @throws KKAdminException
     */
     public int insertExpressionVariables(String sessionId, AdminExpressionVariable[] expVarArray) throws KKAdminException
     {
         try
         {
            if (_insertExpressionVariables == null)
            {
                _insertExpressionVariables = new InsertExpressionVariables(kkAdminEng);
            }

            return _insertExpressionVariables.insertExpressionVariables(sessionId, expVarArray);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Updates the ExpressionVariable object passed in as a parameter. An exception is thrown if it
     * does not exist.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param expVar
     *            The AdminExpressionVariable object to be updated
     * @return Returns the id of the updated AdminExpression object
     * @throws KKAdminException
     */
     public int updateExpressionVariable(String sessionId, AdminExpressionVariable expVar) throws KKAdminException
     {
         try
         {
            if (_updateExpressionVariable == null)
            {
                _updateExpressionVariable = new UpdateExpressionVariable(kkAdminEng);
            }

            return _updateExpressionVariable.updateExpressionVariable(sessionId, expVar);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Deletes the ExpressionVariable object referenced by <code>id</code>.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param id
     *            The id of the AdminExpressionVariable object to be deleted
     * @return Returns the id of the AdminExpression object deleted
     * @throws KKAdminException
     */
     public int deleteExpressionVariable(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_deleteExpressionVariable == null)
            {
                _deleteExpressionVariable = new DeleteExpressionVariable(kkAdminEng);
            }

            return _deleteExpressionVariable.deleteExpressionVariable(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Deletes all of the AdminExpressionVariable objects belonging to the AdminExpression
     * referenced by <code>expressionId</code>.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param expressionId
     *            The id of the AdminExpression object
     * @throws KKAdminException
     */
     public void deleteExpressionVariablesForExpression(String sessionId, int expressionId) throws KKAdminException
     {
         try
         {
            if (_deleteExpressionVariablesForExpression == null)
            {
                _deleteExpressionVariablesForExpression = new DeleteExpressionVariablesForExpression(kkAdminEng);
            }

            _deleteExpressionVariablesForExpression.deleteExpressionVariablesForExpression(sessionId, expressionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Fetch an array of Expression objects linked to the promotion referenced by
     * <code>promotionId</code>
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param promotionId
     *            The numeric id of the promotion
     * @return An array of all expressions relevant to a promotion
     * @throws KKAdminException
     */
     public AdminExpression[] getExpressionsPerPromotion(String sessionId, int promotionId) throws KKAdminException
     {
         try
         {
            if (_getExpressionsPerPromotion == null)
            {
                _getExpressionsPerPromotion = new GetExpressionsPerPromotion(kkAdminEng);
            }

            return _getExpressionsPerPromotion.getExpressionsPerPromotion(sessionId, promotionId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * An expression object is retrieved from the database and evaluated for the customer referenced
     * by the <code>customerId</code>. If the <code>expressionName</code> parameter is not set to
     * null, then the Expression is searched for by name. Otherwise it is searched for by the id
     * contained in the <code>expressionId</code> parameter.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param customerId
     *            The id of the customer
     * @param expressionId
     * @param expressionName
     * @return Returns true or false
     * @throws KKAdminException
     */
     public boolean evaluateExpression(String sessionId, int customerId, int expressionId, String expressionName) throws KKAdminException
     {
         try
         {
            if (_evaluateExpression == null)
            {
                _evaluateExpression = new EvaluateExpression(kkAdminEng);
            }

            return _evaluateExpression.evaluateExpression(sessionId, customerId, expressionId, expressionName);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Retrieve the Digital Download records matching the search criteria
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param search
     *            search definition for digital downloads
     * @param offset
     *            offset in results (for paging)
     * @param size
     *            maximum number of records to return from the offset (for paging)
     * @return an AdminDigitalDownloadSearchResult object
     * @throws KKAdminException
     */
     public AdminDigitalDownloadSearchResult searchDigitalDownloads(String sessionId, AdminDigitalDownloadSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_searchDigitalDownloads == null)
            {
                _searchDigitalDownloads = new SearchDigitalDownloads(kkAdminEng);
            }

            return _searchDigitalDownloads.searchDigitalDownloads(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Import a new digital download record. If the record already exists (a record exists with the
     * same <code>customerId</code> and <code>productId</code>) the record is updated.
     * <p>
     * Before inserting, the record is validated to ensure that the product referred to by the
     * <code>productId</code> is indeed a Digital Download or Gift Certificate product.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param digDownload
     *            the Digital Download object to import
     * @return returns the id of the newly inserted or updated record
     * @throws KKAdminException
     *             if the digital download record specified is invalid or there are database
     *             problems
     */
     public int importDigitalDownload(String sessionId, AdminDigitalDownload digDownload) throws KKAdminException
     {
         try
         {
            if (_importDigitalDownload == null)
            {
                _importDigitalDownload = new ImportDigitalDownload(kkAdminEng);
            }

            return _importDigitalDownload.importDigitalDownload(sessionId, digDownload);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * The Reward Point transactions can be filtered by the creation dates and sorted by:
     * <ul>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_ADDED_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_DATE_ADDED_DESCENDING</li>
     * </ul>
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param search
     *            Object containing search constraints and sort order details
     * @param offset
     *            offset in results (for paging)
     * @param size
     *            maximum number of records to return from the offset (for paging)
     * @return Returns an AdminRewardPointSearchResult object
     * @throws KKAdminException
     */
     public AdminRewardPointSearchResult getRewardPoints(String sessionId, AdminRewardPointSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getRewardPoints == null)
            {
                _getRewardPoints = new GetRewardPoints(kkAdminEng);
            }

            return _getRewardPoints.getRewardPoints(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Calculates the number of reward points available for the customer identified by the
     * <code>customerId</code> parameter.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param customerId
     *            The id of the customer
     * @return Returns the number of points available for spending
     * @throws KKAdminException
     */
     public int pointsAvailable(String sessionId, int customerId) throws KKAdminException
     {
         try
         {
            if (_pointsAvailable == null)
            {
                _pointsAvailable = new PointsAvailable(kkAdminEng);
            }

            return _pointsAvailable.pointsAvailable(sessionId, customerId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Deletes a number of reward points from the total for the customer identified by the
     * <code>customerId</code> parameter.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param customerId
     *            The id of the customer
     * @param points
     *            The number of points to be deleted
     * @param code
     *            An optional code to categorize the reason for redeeming the points
     * @param description
     *            An optional description describing how the points were redeemed
     * @return Returns the new number of points available for spending
     * @throws KKAdminException
     */
     public int deletePoints(String sessionId, int customerId, int points, String code, String description) throws KKAdminException
     {
         try
         {
            if (_deletePoints == null)
            {
                _deletePoints = new DeletePoints(kkAdminEng);
            }

            return _deletePoints.deletePoints(sessionId, customerId, points, code, description);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Adds a number of reward points to the total for the customer identified by the
     * <code>customerId</code> parameter.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param customerId
     *            The id of the customer
     * @param points
     *            The number of points to be added
     * @param code
     *            An optional code to categorize the reason for awarding the points
     * @param description
     *            An optional description describing why the points were awarded
     * @return Returns the new number of points available for spending
     * @throws KKAdminException
     */
     public int addPoints(String sessionId, int customerId, int points, String code, String description) throws KKAdminException
     {
         try
         {
            if (_addPoints == null)
            {
                _addPoints = new AddPoints(kkAdminEng);
            }

            return _addPoints.addPoints(sessionId, customerId, points, code, description);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an array of files found in the directory. If the extension is not null, then the
     * files are filtered by extension.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param directory
     *            The directory containing the files
     * @param extension
     *            The extension of the files to return in the array (strictly it matches on the
     *            string at the end of the filename - so ".pdf" and "pdf" would both work but could
     *            return different results). If null, all files are returned.
     * @return Returns an array of Admin File objects
     * @throws KKAdminException
     */
     public AdminFile[] getFiles(String sessionId, String directory, String extension) throws KKAdminException
     {
         try
         {
            if (_getFiles == null)
            {
                _getFiles = new GetFiles(kkAdminEng);
            }

            return _getFiles.getFiles(sessionId, directory, extension);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Reads the search rules from a properties file and returns them as an array. If the properties
     * file isn't found, then an empty array is returned.
     * 
     * @return Returns an array of Search Rule Objects
     * @throws KKAdminException
     */
     public AdminSearchRule[] getSearchRules() throws KKAdminException
     {
         try
         {
            if (_getSearchRules == null)
            {
                _getSearchRules = new GetSearchRules(kkAdminEng);
            }

            return _getSearchRules.getSearchRules();
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a Payment Schedule Object
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param id
     *            The id of the payment schedule object to delete
     * @return Returns the id of the deleted payment schedule object
     * @throws KKAdminException
     */
     public int deletePaymentSchedule(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_deletePaymentSchedule == null)
            {
                _deletePaymentSchedule = new DeletePaymentSchedule(kkAdminEng);
            }

            return _deletePaymentSchedule.deletePaymentSchedule(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the payment schedule object for the <code>id</code> parameter, or Null if the payment
     * schedule object doesn't exist in the DB.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param id
     *            The id of the payment schedule object
     * @return Returns a payment schedule object
     * @throws KKAdminException
     */
     public AdminPaymentSchedule getPaymentSchedule(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_getPaymentSchedule == null)
            {
                _getPaymentSchedule = new GetPaymentSchedule(kkAdminEng);
            }

            return _getPaymentSchedule.getPaymentSchedule(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This returns an AdminPaymentScheduleSearchResult object.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param search
     *            The object containing the search constraints
     * @param offset
     *            the offset in the db
     * @param size
     *            the number of records from the specified offset
     * @return Returns an AdminPaymentScheduleSearchResult object
     * @throws KKAdminException
     */
     public AdminPaymentScheduleSearchResult getPaymentSchedules(String sessionId, AdminPaymentScheduleSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getPaymentSchedules == null)
            {
                _getPaymentSchedules = new GetPaymentSchedules(kkAdminEng);
            }

            return _getPaymentSchedules.getPaymentSchedules(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * An AdminPaymentSchedule object is inserted into the database. The following payment schedule
     * attributes are compulsory:
     * <ul>
     * <li>name</li>
     * <li>timeUnit should be set to a valid time unit</li>
     * <li>timeLength should be greater than zero</li>
     * </ul>
     * The id of the new object is returned.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param ps
     * @return Returns the id of the PaymentSchedule object
     * @throws KKAdminException
     */
     public int insertPaymentSchedule(String sessionId, AdminPaymentSchedule ps) throws KKAdminException
     {
         try
         {
            if (_insertPaymentSchedule == null)
            {
                _insertPaymentSchedule = new InsertPaymentSchedule(kkAdminEng);
            }

            return _insertPaymentSchedule.insertPaymentSchedule(sessionId, ps);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update an AdminPaymentSchedule object. If the value of an attribute is null, the current
     * value is not updated.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param ps
     *            An AdminPaymentSchedule object
     * @return returns the id of the updated AdminPaymentSchedule object
     * @throws KKAdminException
     */
     public int updatePaymentSchedule(String sessionId, AdminPaymentSchedule ps) throws KKAdminException
     {
         try
         {
            if (_updatePaymentSchedule == null)
            {
                _updatePaymentSchedule = new UpdatePaymentSchedule(kkAdminEng);
            }

            return _updatePaymentSchedule.updatePaymentSchedule(sessionId, ps);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a Subscription Object
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param id
     *            The id of the subscription object to delete
     * @return Returns the id of the deleted subscription object
     * @throws KKAdminException
     */
     public int deleteSubscription(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_deleteSubscription == null)
            {
                _deleteSubscription = new DeleteSubscription(kkAdminEng);
            }

            return _deleteSubscription.deleteSubscription(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the subscription object for the <code>id</code> parameter, or Null if the
     * subscription object doesn't exist in the DB.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param id
     *            The id of the subscription object
     * @return Returns a subscription object
     * @throws KKAdminException
     */
     public AdminSubscription getSubscription(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_getSubscription == null)
            {
                _getSubscription = new GetSubscription(kkAdminEng);
            }

            return _getSubscription.getSubscription(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This returns an AdminSubscriptionSearchResult object.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param search
     *            The object containing the search constraints
     * @param offset
     *            the offset in the db
     * @param size
     *            the number of records from the specified offset
     * @return Returns an AdminSubscriptionSearchResult object
     * @throws KKAdminException
     */
     public AdminSubscriptionSearchResult getSubscriptions(String sessionId, AdminSubscriptionSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getSubscriptions == null)
            {
                _getSubscriptions = new GetSubscriptions(kkAdminEng);
            }

            return _getSubscriptions.getSubscriptions(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * An AdminSubscription object is inserted into the database. The following subscription
     * attributes are compulsory:
     * <ul>
     * <li>A valid customerId</li>
     * <li>A valid orderId</li>
     * <li>A valid productId</li>
     * <li>A valid paymentScheduleId</li>
     * <li>Amount</li>
     * </ul>
     * The id of the new object is returned.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param subscription
     * @return Returns the id of the Subscription object
     * @throws KKAdminException
     */
     public int insertSubscription(String sessionId, AdminSubscription subscription) throws KKAdminException
     {
         try
         {
            if (_insertSubscription == null)
            {
                _insertSubscription = new InsertSubscription(kkAdminEng);
            }

            return _insertSubscription.insertSubscription(sessionId, subscription);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update an AdminSubscription object. If the value of an attribute is null, the current value
     * is not updated.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param subscription
     *            An AdminSubscription object
     * @return Returns the id of the updated AdminSubscription object
     * @throws KKAdminException
     */
     public int updateSubscription(String sessionId, AdminSubscription subscription) throws KKAdminException
     {
         try
         {
            if (_updateSubscription == null)
            {
                _updateSubscription = new UpdateSubscription(kkAdminEng);
            }

            return _updateSubscription.updateSubscription(sessionId, subscription);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Checks the integrity of data in the specified area in the KonaKart database
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param dataIntegrityOptions
     *            Defines the options to use for the data integrity check
     * @return true if data integrity problems were found, otherwise false
     * @throws KKAdminException
     */
     public boolean checkDataIntegrity(String sessionId, AdminDataIntegrityOptions dataIntegrityOptions) throws KKAdminException
     {
         try
         {
            if (_checkDataIntegrity == null)
            {
                _checkDataIntegrity = new CheckDataIntegrity(kkAdminEng);
            }

            return _checkDataIntegrity.checkDataIntegrity(sessionId, dataIntegrityOptions);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Exports the Order
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param options
     *            Defines the options to use for the export of the Order
     * @return an ExportOrderResponse object
     * @throws KKAdminException
     */
     public ExportOrderResponse exportOrder(String sessionId, ExportOrderOptions options) throws KKAdminException
     {
         try
         {
            if (_exportOrder == null)
            {
                _exportOrder = new ExportOrder(kkAdminEng);
            }

            return _exportOrder.exportOrder(sessionId, options);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Retrieve all the messages from the database that match the specified search criteria
     * 
     * @param search
     *            the AdminKkMsgSearch object that defines the search criteria
     * @param groupSize
     *            a maximum of this many messages will be returned by each call (the group size)
     * @param offset
     *            the offset in the record set that match the criteria from which records are
     *            returned
     * @return An AdminKkMsgSearchResult object containing the messages that match the specified
     *         search criteria.
     * @throws KKAdminException
     */
     public AdminKkMsgSearchResult searchMsg(AdminKkMsgSearch search, int groupSize, int offset) throws KKAdminException
     {
         try
         {
            if (_searchMsg == null)
            {
                _searchMsg = new SearchMsg(kkAdminEng);
            }

            return _searchMsg.searchMsg(search, groupSize, offset);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get a Message Value from the database
     * 
     * @param key
     *            the message key
     * @param type
     *            the message type (Use KKConstants.MSG_TYP_APPLICATION for application messages,
     *            KKConstants.MSG_TYP_ADMIN_APP for Admin App messages,
     *            KKConstants.MSG_TYP_Admin_HELP for Admin App Help messages)
     * @param locale
     *            the message locale (eg. "en_GB"). If this is null the default locale for the store
     *            is used.
     * @return The message for the key, type and locale. If the message isn't found the String
     *         "[key:type:locale]" is returned.
     * @throws KKAdminException
     */
     public String getMsgValue(String key, int type, String locale) throws KKAdminException
     {
         try
         {
            if (_getMsgValue == null)
            {
                _getMsgValue = new GetMsgValue(kkAdminEng);
            }

            return _getMsgValue.getMsgValue(key, type, locale);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a Message from the database
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param key
     *            the message key
     * @param type
     *            the message type (Use KKConstants.MSG_TYP_APPLICATION for application messages,
     *            KKConstants.MSG_TYP_ADMIN_APP for Admin App messages,
     *            KKConstants.MSG_TYP_Admin_HELP for Admin App Help messages)
     * @param locale
     *            the message locale (eg. "en_GB"). If this is null the default locale for the store
     *            is used.
     * @throws KKAdminException
     */
     public void deleteMsg(String sessionId, String key, int type, String locale) throws KKAdminException
     {
         try
         {
            if (_deleteMsg == null)
            {
                _deleteMsg = new DeleteMsg(kkAdminEng);
            }

            _deleteMsg.deleteMsg(sessionId, key, type, locale);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a Message into the database
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param key
     *            the message key
     * @param type
     *            the message type (Use KKConstants.MSG_TYP_APPLICATION for application messages,
     *            KKConstants.MSG_TYP_ADMIN_APP for Admin App messages,
     *            KKConstants.MSG_TYP_Admin_HELP for Admin App Help messages)
     * @param locale
     *            the message locale (eg. "en_GB"). If this is null the default locale for the store
     *            is used.
     * @param value
     *            the value of the message to be inserted
     * @throws KKAdminException
     */
     public void insertMsg(String sessionId, String key, int type, String locale, String value) throws KKAdminException
     {
         try
         {
            if (_insertMsg == null)
            {
                _insertMsg = new InsertMsg(kkAdminEng);
            }

            _insertMsg.insertMsg(sessionId, key, type, locale, value);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update a Message in the database. Only the message value can be updated here because the
     * other parameters are all keys.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param key
     *            the message key
     * @param type
     *            the message type (Use KKConstants.MSG_TYP_APPLICATION for application messages,
     *            KKConstants.MSG_TYP_ADMIN_APP for Admin App messages,
     *            KKConstants.MSG_TYP_Admin_HELP for Admin App Help messages)
     * @param locale
     *            the message locale (eg. "en_GB"). If this is null the default locale for the store
     *            is used.
     * @param value
     *            the new value for the message
     * @throws KKAdminException
     */
     public void updateMsg(String sessionId, String key, int type, String locale, String value) throws KKAdminException
     {
         try
         {
            if (_updateMsg == null)
            {
                _updateMsg = new UpdateMsg(kkAdminEng);
            }

            _updateMsg.updateMsg(sessionId, key, type, locale, value);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Import Messages into the database
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param type
     *            the message type (Use KKConstants.MSG_TYP_APPLICATION for application messages,
     *            KKConstants.MSG_TYP_ADMIN_APP for Admin App messages,
     *            KKConstants.MSG_TYP_Admin_HELP for Admin App Help messages)
     * @param locale
     *            the message locale (eg. "en_GB"). If this is null the default locale for the store
     *            is used.
     * @param msgString
     *            A String containing the messages to import in the format of a java properties file
     * @param replace
     *            if true all the current messages for the specified type and locale are removed
     *            before importing the new messages. If false the new messages are appended and if a
     *            message key already exists it is replaced by the new message value being imported.
     * @throws KKAdminException
     */
     public void importMsgs(String sessionId, int type, String locale, String msgString, boolean replace) throws KKAdminException
     {
         try
         {
            if (_importMsgs == null)
            {
                _importMsgs = new ImportMsgs(kkAdminEng);
            }

            _importMsgs.importMsgs(sessionId, type, locale, msgString, replace);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Export Messages from the database
     * 
     * @param type
     *            the message type (Use KKConstants.MSG_TYP_APPLICATION for application messages,
     *            KKConstants.MSG_TYP_ADMIN_APP for Admin App messages,
     *            KKConstants.MSG_TYP_Admin_HELP for Admin App Help messages)
     * @param locale
     *            the message locale (eg. "en_GB"). If this is null the default locale for the store
     *            is used.
     * @return msgString A String containing the messages in the format of a java properties file
     * @throws KKAdminException
     */
     public String exportMsgs(int type, String locale) throws KKAdminException
     {
         try
         {
            if (_exportMsgs == null)
            {
                _exportMsgs = new ExportMsgs(kkAdminEng);
            }

            return _exportMsgs.exportMsgs(type, locale);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Associate an array of addresses to a product. One or more of the addresses can be set as the
     * primary address. The isPrimary information is saved in the link between the address and the
     * product and so an address maybe a primary address for one product and not primary for another
     * product. If this method is called when the address is already associtated with the product,
     * then the primary address attribute is edited, so this method must be used to set / reset the
     * isPrimary attribute of a product address.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param addresses
     *            The array of address to be added
     * @param productId
     *            The numeric id of the product
     * @throws KKAdminException
     */
     public void addAddressesToProduct(String sessionId, AdminAddress[] addresses, int productId) throws KKAdminException
     {
         try
         {
            if (_addAddressesToProduct == null)
            {
                _addAddressesToProduct = new AddAddressesToProduct(kkAdminEng);
            }

            _addAddressesToProduct.addAddressesToProduct(sessionId, addresses, productId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Remove the relationship between the address and the product.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param addressId
     *            The numeric id of the address
     * @param productId
     *            The numeric id of the product
     * @throws KKAdminException
     */
     public void removeAddressFromProduct(String sessionId, int addressId, int productId) throws KKAdminException
     {
         try
         {
            if (_removeAddressFromProduct == null)
            {
                _removeAddressFromProduct = new RemoveAddressFromProduct(kkAdminEng);
            }

            _removeAddressFromProduct.removeAddressFromProduct(sessionId, addressId, productId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the number of products using the address identified by addressId.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param addressId
     *            The numeric id of the address
     * @return Return the number of products using the address
     * @throws KKAdminException
     */
     public int getProductCountPerAddress(String sessionId, int addressId) throws KKAdminException
     {
         try
         {
            if (_getProductCountPerAddress == null)
            {
                _getProductCountPerAddress = new GetProductCountPerAddress(kkAdminEng);
            }

            return _getProductCountPerAddress.getProductCountPerAddress(sessionId, addressId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns an AdminManufacturerSearchResult object.
     * <p>
     * Constraints may be added for:
     * <ul>
     * <li>id</li>
     * <li>name</li>
     * <li>custom1</li>
     * <li>custom2</li>
     * <li>custom3</li>
     * <li>custom4</li>
     * <li>custom5</li>
     * </ul>
     * <p>
     * The returned objects may be ordered by:
     * <ul>
     * <li>AdminDataDescriptor.ORDER_BY_ID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_DESCENDING</li>
     * </ul>
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param search
     *            The search object that defines the search parameters and sort order
     * @param offset
     *            The offset in the db
     * @param size
     *            The number of records from the specified offset
     * @return Returns an AdminManufacturerSearchResult object
     * @throws KKAdminException
     */
     public AdminManufacturerSearchResult getManufacturers(String sessionId, AdminManufacturerSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getManufacturers == null)
            {
                _getManufacturers = new GetManufacturers(kkAdminEng);
            }

            return _getManufacturers.getManufacturers(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * An AdminProdAttrDesc object is inserted into the database. The following attributes are
     * compulsory:
     * <ul>
     * <li>name</li>
     * </ul>
     * The id of the new object is returned.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param attrDesc
     *            The AdminProdAttrDesc to insert
     * @return Returns the id of the ProdAttrDesc object
     * @throws KKAdminException
     */
     public int insertProdAttrDesc(String sessionId, AdminProdAttrDesc attrDesc) throws KKAdminException
     {
         try
         {
            if (_insertProdAttrDesc == null)
            {
                _insertProdAttrDesc = new InsertProdAttrDesc(kkAdminEng);
            }

            return _insertProdAttrDesc.insertProdAttrDesc(sessionId, attrDesc);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update an AdminProdAttrDesc object. If the value of an attribute is null, the current value
     * is not updated.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param attrDesc
     *            The AdminProdAttrDesc to update
     * @return Returns the id of the updated AdminProdAttrDesc object
     * @throws KKAdminException
     */
     public int updateProdAttrDesc(String sessionId, AdminProdAttrDesc attrDesc) throws KKAdminException
     {
         try
         {
            if (_updateProdAttrDesc == null)
            {
                _updateProdAttrDesc = new UpdateProdAttrDesc(kkAdminEng);
            }

            return _updateProdAttrDesc.updateProdAttrDesc(sessionId, attrDesc);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete an AdminProdAttrDesc
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param id
     *            The id of the AdminProdAttrDesc object to be deleted
     * @return Returns the id of the deleted AdminProdAttrDesc object
     * @throws KKAdminException
     */
     public int deleteProdAttrDesc(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_deleteProdAttrDesc == null)
            {
                _deleteProdAttrDesc = new DeleteProdAttrDesc(kkAdminEng);
            }

            return _deleteProdAttrDesc.deleteProdAttrDesc(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the AdminProdAttrDesc object for the <code>id</code> parameter, or Null if the
     * AdminProdAttrDesc doesn't exist in the DB.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param id
     *            The id of the AdminProdAttrDesc to be fetched
     * @return Returns a AdminProdAttrDesc object
     * @throws KKAdminException
     */
     public AdminProdAttrDesc getProdAttrDesc(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_getProdAttrDesc == null)
            {
                _getProdAttrDesc = new GetProdAttrDesc(kkAdminEng);
            }

            return _getProdAttrDesc.getProdAttrDesc(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This method fetches all of the AdminProdAttrDesc objects for the template referenced by the
     * <code>templateId</code> parameter.
     * <p>
     * An empty array is returned if no AdminProdAttrDesc objects exist.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param templateId
     *            The id of the template
     * @return Returns an array of AdminProdAttrDesc objects
     * @throws KKAdminException
     */
     public AdminProdAttrDesc[] getProdAttrDescsForTemplate(String sessionId, int templateId) throws KKAdminException
     {
         try
         {
            if (_getProdAttrDescsForTemplate == null)
            {
                _getProdAttrDescsForTemplate = new GetProdAttrDescsForTemplate(kkAdminEng);
            }

            return _getProdAttrDescsForTemplate.getProdAttrDescsForTemplate(sessionId, templateId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This method fetches all of the AdminProdAttrDesc objects for the array of templates
     * referenced by the <code>templates</code> parameter. The sort order of the AdminProdAttrDesc
     * objects matches the sort order of the templates within the templates array parameter.
     * <p>
     * An empty array is returned if no AdminProdAttrDesc objects exist.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param templates
     *            An array of AdminProdAttrTemplate objects. An empty array is returned if no
     *            AdminProdAttrDesc objects exist.
     * @return Returns an array of AdminProdAttrDesc objects
     * @throws KKAdminException
     */
     public AdminProdAttrDesc[] getProdAttrDescsForTemplates(String sessionId, AdminProdAttrTemplate[] templates) throws KKAdminException
     {
         try
         {
            if (_getProdAttrDescsForTemplates == null)
            {
                _getProdAttrDescsForTemplates = new GetProdAttrDescsForTemplates(kkAdminEng);
            }

            return _getProdAttrDescsForTemplates.getProdAttrDescsForTemplates(sessionId, templates);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This returns an AdminProdAttrDescSearchResult object that contains an array of
     * AdminProdAttrDesc objects. The AdminProdAttrDesc objects may be sorted by :
     * <ul>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID_DESCENDING</li>
     * </ul>
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param search
     *            An AdminProdAttrDescSearch containing search criteria
     * @param offset
     *            The offset in the db
     * @param size
     *            The number of records from the specified offset
     * @return Returns an AdminProdAttrDescSearchResult object
     * @throws KKAdminException
     */
     public AdminProdAttrDescSearchResult getProdAttrDescs(String sessionId, AdminProdAttrDescSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getProdAttrDescs == null)
            {
                _getProdAttrDescs = new GetProdAttrDescs(kkAdminEng);
            }

            return _getProdAttrDescs.getProdAttrDescs(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * An AdminProdAttrTemplate object is inserted into the database. The following attributes are
     * compulsory:
     * <ul>
     * <li>name</li>
     * </ul>
     * The id of the new object is returned.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param template
     *            The AdminProdAttrTemplate object to be inserted
     * @return Returns the id of the ProdAttrTemplate object
     * @throws KKAdminException
     */
     public int insertProdAttrTemplate(String sessionId, AdminProdAttrTemplate template) throws KKAdminException
     {
         try
         {
            if (_insertProdAttrTemplate == null)
            {
                _insertProdAttrTemplate = new InsertProdAttrTemplate(kkAdminEng);
            }

            return _insertProdAttrTemplate.insertProdAttrTemplate(sessionId, template);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update an AdminProdAttrTemplate object. If the value of an attribute is null, the current
     * value is not updated.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param template
     *            An AdminProdAttrTemplate object
     * @return returns the id of the updated AdminProdAttrTemplate object
     * @throws KKAdminException
     */
     public int updateProdAttrTemplate(String sessionId, AdminProdAttrTemplate template) throws KKAdminException
     {
         try
         {
            if (_updateProdAttrTemplate == null)
            {
                _updateProdAttrTemplate = new UpdateProdAttrTemplate(kkAdminEng);
            }

            return _updateProdAttrTemplate.updateProdAttrTemplate(sessionId, template);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete an AdminProdAttrTemplate object.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param id
     *            The id of the AdminProdAttrTemplate object to be deleted
     * @return Returns the id of the deleted AdminProdAttrTemplate object
     * @throws KKAdminException
     */
     public int deleteProdAttrTemplate(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_deleteProdAttrTemplate == null)
            {
                _deleteProdAttrTemplate = new DeleteProdAttrTemplate(kkAdminEng);
            }

            return _deleteProdAttrTemplate.deleteProdAttrTemplate(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the AdminProdAttrTemplate object for the <code>id</code> parameter, or Null if the
     * AdminProdAttrTemplate doesn't exist in the DB. If the Template contains an array of
     * ProdAttrDesc objects, these are also fetched from the DB.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param id
     *            The id of the AdminProdAttrTemplate object to be fetched
     * @return Returns a AdminProdAttrTemplate object
     * @throws KKAdminException
     */
     public AdminProdAttrTemplate getProdAttrTemplate(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_getProdAttrTemplate == null)
            {
                _getProdAttrTemplate = new GetProdAttrTemplate(kkAdminEng);
            }

            return _getProdAttrTemplate.getProdAttrTemplate(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This returns an AdminProdAttrTemplateSearchResult object containing an array of
     * AdminProdAttrTemplate objects. The Templates may be sorted by :
     * <ul>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID_DESCENDING</li>
     * </ul>
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param search
     *            An AdminProdAttrTemplateSearch containing search criteria
     * @param offset
     *            The offset in the db
     * @param size
     *            The number of records from the specified offset
     * @return Returns an AdminProdAttrTemplateSearchResult object
     * @throws KKAdminException
     */
     public AdminProdAttrTemplateSearchResult getProdAttrTemplates(String sessionId, AdminProdAttrTemplateSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getProdAttrTemplates == null)
            {
                _getProdAttrTemplates = new GetProdAttrTemplates(kkAdminEng);
            }

            return _getProdAttrTemplates.getProdAttrTemplates(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Add the array of AdminProdAttrDesc objects to the template. We assume that the
     * AdminProdAttrDesc objects have already been inserted.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param attrDescs
     *            Array of AdminProdAttrDesc objects
     * @param templateId
     *            Id of the AdminProdAttrTemplate
     * @throws KKAdminException
     */
     public void addProdAttrDescsToTemplate(String sessionId, AdminProdAttrDesc[] attrDescs, int templateId) throws KKAdminException
     {
         try
         {
            if (_addProdAttrDescsToTemplate == null)
            {
                _addProdAttrDescsToTemplate = new AddProdAttrDescsToTemplate(kkAdminEng);
            }

            _addProdAttrDescsToTemplate.addProdAttrDescsToTemplate(sessionId, attrDescs, templateId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Remove an array of ProdAttrDesc objects from the template. When <code>attrDescs</code> is set
     * to null, all ProdAttrDesc objects are removed from the template.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param attrDescs
     *            Array of AdminProdAttrDesc objects
     * @param templateId
     *            Id of the AdminProdAttrTemplate
     * @throws KKAdminException
     */
     public void removeProdAttrDescsFromTemplate(String sessionId, AdminProdAttrDesc[] attrDescs, int templateId) throws KKAdminException
     {
         try
         {
            if (_removeProdAttrDescsFromTemplate == null)
            {
                _removeProdAttrDescsFromTemplate = new RemoveProdAttrDescsFromTemplate(kkAdminEng);
            }

            _removeProdAttrDescsFromTemplate.removeProdAttrDescsFromTemplate(sessionId, attrDescs, templateId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the number of templates using the product attribute descriptor.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param attrDescId
     *            The id of the AdminProdAttrDesc object
     * @return Return the number of templates using the product attribute descriptor
     * @throws KKAdminException
     */
     public int getTemplateCountPerProdAttrDesc(String sessionId, int attrDescId) throws KKAdminException
     {
         try
         {
            if (_getTemplateCountPerProdAttrDesc == null)
            {
                _getTemplateCountPerProdAttrDesc = new GetTemplateCountPerProdAttrDesc(kkAdminEng);
            }

            return _getTemplateCountPerProdAttrDesc.getTemplateCountPerProdAttrDesc(sessionId, attrDescId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the number of products using the product attribute descriptor.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param attrDescId
     *            The id of the AdminProdAttrDesc object
     * @return Return the number of products using the product attribute descriptor
     * @throws KKAdminException
     */
     public int getProductCountPerProdAttrDesc(String sessionId, int attrDescId) throws KKAdminException
     {
         try
         {
            if (_getProductCountPerProdAttrDesc == null)
            {
                _getProductCountPerProdAttrDesc = new GetProductCountPerProdAttrDesc(kkAdminEng);
            }

            return _getProductCountPerProdAttrDesc.getProductCountPerProdAttrDesc(sessionId, attrDescId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * When custom attributes are converted to an XML string and saved within the product object,
     * some metadata fields of the custom attribute are saved along with the value of the attribute
     * itself. These metadata fields (i.e. Message catalog key, the template for displaying the
     * attribute and the custom fields) are stored in the XML for performance reasons.
     * <p>
     * When a Product Attribute Descriptor is modified, all of the products using the descriptor are
     * not updated automatically. In order to update them, this API call must be called, passing in
     * the id of the Product Attribute Descriptor that has been modified.
     * <p>
     * Depending on the number of products, the API call may take some time to complete.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param attrDescId
     *            The id of the AdminProdAttrDesc object
     * @return Returns the number of products updated
     * @throws KKAdminException
     */
     public int updateProductsUsingProdAttrDesc(String sessionId, int attrDescId) throws KKAdminException
     {
         try
         {
            if (_updateProductsUsingProdAttrDesc == null)
            {
                _updateProductsUsingProdAttrDesc = new UpdateProductsUsingProdAttrDesc(kkAdminEng);
            }

            return _updateProductsUsingProdAttrDesc.updateProductsUsingProdAttrDesc(sessionId, attrDescId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * When custom attributes are converted to an XML string and saved within the product object,
     * some metadata fields of the custom attribute are saved along with the value of the attribute
     * itself. These metadata fields (i.e. Message catalog key, the template for displaying the
     * attribute and the custom fields) are stored in the XML for performance reasons.
     * <p>
     * When a Product Attribute Template is modified, all of the products using the template are not
     * updated automatically. In order to update them, this API call must be called, passing in the
     * id(s) of the templates that have been modified.
     * <p>
     * Depending on the number of products, the API call may take some time to complete.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param templateIds
     *            An array of template ids
     * @return Returns the number of products updated
     * @throws KKAdminException
     */
     public int updateProductsUsingTemplates(String sessionId, int[] templateIds) throws KKAdminException
     {
         try
         {
            if (_updateProductsUsingTemplates == null)
            {
                _updateProductsUsingTemplates = new UpdateProductsUsingTemplates(kkAdminEng);
            }

            return _updateProductsUsingTemplates.updateProductsUsingTemplates(sessionId, templateIds);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the number of products using the custom product attribute template.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param templateId
     *            The id of the AdminProdAttrTemplate object
     * @return Return the number of products using the custom product attribute template
     * @throws KKAdminException
     */
     public int getProductCountPerTemplate(String sessionId, int templateId) throws KKAdminException
     {
         try
         {
            if (_getProductCountPerTemplate == null)
            {
                _getProductCountPerTemplate = new GetProductCountPerTemplate(kkAdminEng);
            }

            return _getProductCountPerTemplate.getProductCountPerTemplate(sessionId, templateId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This method is used to call a payment module from the Admin App. The payment module which
     * must implement the <code>com.konakartadmin.modules.AdminPaymentIf</code> interface, is
     * instantiated and the <code>execute</code> method is called.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param moduleClassName
     *            The full class name such as
     *            <code>com.konakartadmin.modules.payment.authorizenet.AdminPayment</code>
     * @param options
     *            An object containing all of the parameters required for the transaction
     * @return Returns an array of name value pairs
     * @throws KKAdminException
     */
     public NameValue[] callPaymentModule(String sessionId, String moduleClassName, PaymentOptions options) throws KKAdminException
     {
         try
         {
            if (_callPaymentModule == null)
            {
                _callPaymentModule = new CallPaymentModule(kkAdminEng);
            }

            return _callPaymentModule.callPaymentModule(sessionId, moduleClassName, options);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Search for bookings.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param search
     *            AdminBookingSearch object that defines the search
     * @param offset
     *            offset
     * @param size
     *            maximum number of records to return from the offset position
     * @param options
     *            AdminBookableProduct options
     * @return Returns a AdminBookingSearchResult object
     * @throws KKAdminException
     */
     public AdminBookingSearchResult getBookings(String sessionId, AdminBookingSearch search, int offset, int size, AdminBookableProductOptions options) throws KKAdminException
     {
         try
         {
            if (_getBookings == null)
            {
                _getBookings = new GetBookings(kkAdminEng);
            }

            return _getBookings.getBookings(sessionId, search, offset, size, options);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete the booking with the specified bookingId.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param bookingId
     *            bookingId of the booking to delete
     * @param options
     *            AdminBookableProduct options
     * @throws KKAdminException
     */
     public void deleteBooking(String sessionId, int bookingId, AdminBookableProductOptions options) throws KKAdminException
     {
         try
         {
            if (_deleteBooking == null)
            {
                _deleteBooking = new DeleteBooking(kkAdminEng);
            }

            _deleteBooking.deleteBooking(sessionId, bookingId, options);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a new booking.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param booking
     *            The booking to insert
     * @param options
     *            AdminBookableProduct options
     * @return the bookingId of the newly-inserted booking
     * @throws KKAdminException
     */
     public int insertBooking(String sessionId, AdminBooking booking, AdminBookableProductOptions options) throws KKAdminException
     {
         try
         {
            if (_insertBooking == null)
            {
                _insertBooking = new InsertBooking(kkAdminEng);
            }

            return _insertBooking.insertBooking(sessionId, booking, options);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update the booking
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param booking
     *            The booking to update
     * @param options
     *            AdminBookableProduct options
     * @throws KKAdminException
     */
     public void updateBooking(String sessionId, AdminBooking booking, AdminBookableProductOptions options) throws KKAdminException
     {
         try
         {
            if (_updateBooking == null)
            {
                _updateBooking = new UpdateBooking(kkAdminEng);
            }

            _updateBooking.updateBooking(sessionId, booking, options);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a Catalog definition from the database
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param catalogId
     *            The numeric id of the catalog
     * @throws KKAdminException
     */
     public void deleteCatalog(String sessionId, int catalogId) throws KKAdminException
     {
         try
         {
            if (_deleteCatalog == null)
            {
                _deleteCatalog = new DeleteCatalog(kkAdminEng);
            }

            _deleteCatalog.deleteCatalog(sessionId, catalogId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get an array of catalogs matching the search criteria from the database. The catalogs may be
     * ordered by:
     * <ul>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_NAME_DESCENDING</li>
     * </ul>
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param search
     *            AdminCatalogSearch object that defines the search
     * @param offset
     *            offset
     * @param size
     *            maximum number of records to return from the offset position
     * @return Returns an AdminCatalogSearchResult object
     * @throws KKAdminException
     */
     public AdminCatalogSearchResult getCatalogs(String sessionId, AdminCatalogSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getCatalogs == null)
            {
                _getCatalogs = new GetCatalogs(kkAdminEng);
            }

            return _getCatalogs.getCatalogs(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a new catalog
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param catalog
     *            The AdminCatalog object to be inserted
     * @return Returns the numeric id of the inserted catalog
     * @throws KKAdminException
     */
     public int insertCatalog(String sessionId, AdminCatalog catalog) throws KKAdminException
     {
         try
         {
            if (_insertCatalog == null)
            {
                _insertCatalog = new InsertCatalog(kkAdminEng);
            }

            return _insertCatalog.insertCatalog(sessionId, catalog);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update an existing catalog
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param catalog
     *            The AdminCatalog object to be updated
     * @throws KKAdminException
     */
     public void updateCatalog(String sessionId, AdminCatalog catalog) throws KKAdminException
     {
         try
         {
            if (_updateCatalog == null)
            {
                _updateCatalog = new UpdateCatalog(kkAdminEng);
            }

            _updateCatalog.updateCatalog(sessionId, catalog);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Fetch a catalog from the database referenced by the catalog id
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param catalogId
     *            The numeric id of the catalog
     * @return Returns an AdminCatalog object
     * @throws KKAdminException
     */
     public AdminCatalog getCatalogById(String sessionId, int catalogId) throws KKAdminException
     {
         try
         {
            if (_getCatalogById == null)
            {
                _getCatalogById = new GetCatalogById(kkAdminEng);
            }

            return _getCatalogById.getCatalogById(sessionId, catalogId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an array of AdminMiscItemType objects
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param miTypes
     *            An array of AdminMiscItemType objects to insert. Typically you would insert one
     *            AdminMiscItemType record for each language to maintain data integrity.
     * @return the id created for the newly-inserted AdminMiscItemType objects
     * @throws KKAdminException
     */
     public int insertMiscItemType(String sessionId, AdminMiscItemType[] miTypes) throws KKAdminException
     {
         try
         {
            if (_insertMiscItemType == null)
            {
                _insertMiscItemType = new InsertMiscItemType(kkAdminEng);
            }

            return _insertMiscItemType.insertMiscItemType(sessionId, miTypes);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update an array of AdminMiscItemType objects. Only the name and the description can be
     * updated.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param miTypes
     *            An array of AdminMiscItemType objects to update.
     * @throws KKAdminException
     */
     public void updateMiscItemType(String sessionId, AdminMiscItemType[] miTypes) throws KKAdminException
     {
         try
         {
            if (_updateMiscItemType == null)
            {
                _updateMiscItemType = new UpdateMiscItemType(kkAdminEng);
            }

            _updateMiscItemType.updateMiscItemType(sessionId, miTypes);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete an AdminMiscItemType. All records with the specified miscellaneous item type id will
     * be deleted - that is the miscellaneous item type for every language defined.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param miTypeId
     *            the id of the miscellaneous item type object to delete
     * @param deleteChildren
     *            if true all children (miscellaneous items with this miscellaneous item type) will
     *            also be deleted.
     * @throws KKAdminException
     */
     public void deleteMiscItemType(String sessionId, int miTypeId, boolean deleteChildren) throws KKAdminException
     {
         try
         {
            if (_deleteMiscItemType == null)
            {
                _deleteMiscItemType = new DeleteMiscItemType(kkAdminEng);
            }

            _deleteMiscItemType.deleteMiscItemType(sessionId, miTypeId, deleteChildren);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Return the AdminMiscItemType objects defined by the search criteria.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param search
     *            the generic Admin search object that defines the objects to search for. If null we
     *            use the default AdminSearch object. If you specify the LanguageId in the search
     *            object, only the MiscItemType for that specified language will be returned. If you
     *            specify AdminLanguage.ALL_LANGUAGES for the languageId the search will be made on
     *            the default language, and if MiscItemTypes are found, MiscItemTypes with these
     *            MiscItemTypeIds for all of the languages are returned.
     * @param offset
     *            starting offset in database - so that you can page through results
     * @param size
     *            size of the group that will be returned - the maximum number of records returned
     * @return an array of AdminMiscItemType objects or null if no records match the search
     *         criteria.
     * @throws KKAdminException
     */
     public AdminMiscItemType[] getMiscItemTypes(String sessionId, AdminSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getMiscItemTypes == null)
            {
                _getMiscItemTypes = new GetMiscItemTypes(kkAdminEng);
            }

            return _getMiscItemTypes.getMiscItemTypes(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an array of AdminMiscItem objects
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param mItems
     *            An array of AdminMiscItem objects to insert.
     * @return the id created for the last newly-inserted AdminMiscItem object
     * @throws KKAdminException
     */
     public int insertMiscItems(String sessionId, AdminMiscItem[] mItems) throws KKAdminException
     {
         try
         {
            if (_insertMiscItems == null)
            {
                _insertMiscItems = new InsertMiscItems(kkAdminEng);
            }

            return _insertMiscItems.insertMiscItems(sessionId, mItems);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update an array of AdminMiscItem objects. Only the item_value and the custom fields can be
     * updated.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param mItems
     *            An array of AdminMiscItem objects to update.
     * @throws KKAdminException
     */
     public void updateMiscItems(String sessionId, AdminMiscItem[] mItems) throws KKAdminException
     {
         try
         {
            if (_updateMiscItems == null)
            {
                _updateMiscItems = new UpdateMiscItems(kkAdminEng);
            }

            _updateMiscItems.updateMiscItems(sessionId, mItems);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete an AdminMiscItem. All records with the specified miscellaneous item type id will be
     * deleted - that is the miscellaneous item type for every language defined.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param miTypeId
     *            the id of the miscellaneous item object to delete
     * @throws KKAdminException
     */
     public void deleteMiscItem(String sessionId, int miTypeId) throws KKAdminException
     {
         try
         {
            if (_deleteMiscItem == null)
            {
                _deleteMiscItem = new DeleteMiscItem(kkAdminEng);
            }

            _deleteMiscItem.deleteMiscItem(sessionId, miTypeId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Return the AdminMiscItem objects defined by the search criteria.
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param search
     *            the generic Admin search object that defines the objects to search for. If null we
     *            use the default AdminSearch object.
     *            <p>
     *            AdminSearch criteria usage:
     *            <ul>
     *            <li>ids = Can contain an array of kkObjIds</li>
     *            <li>id = kkMiscItemId</li>
     *            <li>id2 = kkMiscItemTypeId</li>
     *            <li>id3 = kkObjId - The id of the product or category associated with the misc
     *            item</li>
     *            <li>id4 = kkObjTypeId - Valid values are KKConstants.OBJECT_TYPE_PRODUCT and
     *            KKConstants.OBJECT_TYPE_CATEGORY</li>
     *            <li>name = item Value</li>
     *            </ul>
     *            <p>
     *            AdminSearch order by options:
     *            <ul>
     *            <li>AdminSearch.ORDER_BY_ID_DESCENDING order by Misc Item Id descending</li>
     *            <li>AdminSearch.ORDER_BY_ID_ASCENDING order by Misc Item Id ascending</li>
     *            <li>AdminSearch.ORDER_BY_ID2_DESCENDING order by Misc Item Type Id descending</li>
     *            <li>AdminSearch.ORDER_BY_ID2_ASCENDING order by Misc Item Type Id ascending</li>
     *            <li>AdminSearch.ORDER_BY_ID3_DESCENDING order by Object Id descending</li>
     *            <li>AdminSearch.ORDER_BY_ID3_ASCENDING order by Object Id ascending</li>
     *            <li>AdminSearch.ORDER_BY_ID4_DESCENDING order by Object Type Id descending</li>
     *            <li>AdminSearch.ORDER_BY_ID4_ASCENDING order by Object Type Id ascending</li>
     *            <li>AdminSearch.ORDER_BY_NAME_DESCENDING order by Item Value descending</li>
     *            <li>AdminSearch.ORDER_BY_NAME_ASCENDING order by Item Value ascending</li>
     *            <li>AdminSearch.ORDER_BY_DATE_DESCENDING order by Date Added descending</li>
     *            <li>AdminSearch.ORDER_BY_DATE_ASCENDING order by Date Added ascending</li>
     *            </ul>
     * @param offset
     *            starting offset in database - so that you can page through results
     * @param size
     *            size of the group that will be returned - the maximum number of records returned
     * @return an AdminMiscItemSearchResult object that contains an array of AdminMiscItem objects
     *         if records are found that match the search criteria.
     * @throws KKAdminException
     */
     public AdminMiscItemSearchResult getMiscItems(String sessionId, AdminSearch search, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getMiscItems == null)
            {
                _getMiscItems = new GetMiscItems(kkAdminEng);
            }

            return _getMiscItems.getMiscItems(sessionId, search, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Copies a product from the store referenced by storeIdFrom to the store referenced by
     * storeIdTo . This API call can only be used when in multi-store shared product and shared
     * category mode.<br>
     * The options parameter defines the type of copy. Valid operations are:
     * <ul>
     * <li>com.konakartadmin.app.AdminCopyProductOptions.MODE_COPY_CREATING_NEW_PRODUCT - Insert a
     * new product in the destination store by copying the source product. The source product
     * remains in the database. If the destination product already exists then it is edited with new
     * data from the source product.</li>
     * <li>com.konakartadmin.app.AdminCopyProductOptions.MODE_COPY_USING_PRODUCT_TO_STORES - A link
     * is inserted to associate the source product to the destination store. The link with the
     * source store is not removed.</li>
     * <li>com.konakartadmin.app.AdminCopyProductOptions.MODE_MOVE_USING_PRODUCT_TO_STORES - A link
     * is inserted to associate the source product to the destination store. The link with the
     * source store is removed.</li>
     * </ul>
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param productId
     *            The numeric id of the product to copy
     * @param storeIdFrom
     *            The id of the source store
     * @param storeIdTo
     *            The id of the destination store
     * @param options
     *            Options to configure the copy operation
     * @return Returns the copied product id in mode MODE_COPY_CREATING_NEW_PRODUCT. Otherwise
     *         returns 0
     * @throws KKAdminException
     */
     public int copyProductToStore(String sessionId, int productId, String storeIdFrom, String storeIdTo, AdminCopyProductOptions options) throws KKAdminException
     {
         try
         {
            if (_copyProductToStore == null)
            {
                _copyProductToStore = new CopyProductToStore(kkAdminEng);
            }

            return _copyProductToStore.copyProductToStore(sessionId, productId, storeIdFrom, storeIdTo, options);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This API call is used to get a list of products that are out of sync between two stores. It
     * can only be used when in multi-store shared product / shared category mode and is useful when
     * stores are used as staging environments to display pre-production product information.<br>
     * The options parameter defines the the type of search which may be:
     * <ul>
     * <li>AdminSynchProductsOptions.GET_NEW_PRODUCTS - Products are returned that only exist in the
     * source store and have never been copied to the destination store.</li>
     * <li>AdminSynchProductsOptions.GET_OUT_OF_SYNC_PRODUCTS - Products are returned that exist in
     * both stores but are out of sync because the products have been modified in one of the stores
     * but not in the other.</li>
     * </ul>
     * It also allows you to define two search constraints to filter the returned products:
     * <ul>
     * <li>Product SKU</li>
     * <li>Product Id</li>
     * </ul>
     * The dataDesc parameter is used to control the data offset, limit the number of items returned
     * and set the sort order. The only sort orders used are:
     * <ul>
     * <li>AdminDataDescriptor.ORDER_BY_ID_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_ID_DESCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_SKU_ASCENDING</li>
     * <li>AdminDataDescriptor.ORDER_BY_SKU_DESCENDING</li>
     * </ul>
     * 
     * @param sessionId
     *            session Id of logged in Admin user
     * @param storeIdFrom
     *            The id of the source store
     * @param storeIdTo
     *            The id of the destination store
     * @param dataDesc
     *            Used to control the data offset, limit the number of items returned and set the
     *            sort order. May be null.
     * @param languageId
     *            the language Id - or it could be
     *            com.konakartadmin.bl.AdminLanguageMgr.DEFAULT_LANG to use the default language
     * @param options
     *            Defines the type of search and constraints.
     * @param mgrOptions
     *            It defines whether to use prices and quantity for the catalog defined by the
     *            catalogId. May be null.
     * @return Returns an AdminProducts object containing the products
     * @throws KKAdminException
     */
     public AdminProducts getProductsToSynchronize(String sessionId, String storeIdFrom, String storeIdTo, AdminDataDescriptor dataDesc, int languageId, AdminSynchProductsOptions options, AdminProductMgrOptions mgrOptions) throws KKAdminException
     {
         try
         {
            if (_getProductsToSynchronize == null)
            {
                _getProductsToSynchronize = new GetProductsToSynchronize(kkAdminEng);
            }

            return _getProductsToSynchronize.getProductsToSynchronize(sessionId, storeIdFrom, storeIdTo, dataDesc, languageId, options, mgrOptions);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Returns the AdminConfigData items with the specified key or all AdminConfigData items if the
     * key is null
     * 
     * @param sessionId
     *            Session Id of the user.
     * @param key
     *            Only return the AdminConfigData items with this key (if null all AdminConfigData
     *            items are returned)
     * @return Returns an array of AdminConfigData items with the specified key or all
     *         AdminConfigData items if the key is null ordered by date added
     * @throws KKAdminException
     */
     public AdminConfigData[] getConfigData(String sessionId, String key) throws KKAdminException
     {
         try
         {
            if (_getConfigData == null)
            {
                _getConfigData = new GetConfigData(kkAdminEng);
            }

            return _getConfigData.getConfigData(sessionId, key);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update the AdminConfigData items.
     * 
     * @param sessionId
     *            Session Id of the user.
     * @param configs
     *            The AdminConfigData items to update
     * @throws KKAdminException
     */
     public void updateConfigData(String sessionId, AdminConfigData[] configs) throws KKAdminException
     {
         try
         {
            if (_updateConfigData == null)
            {
                _updateConfigData = new UpdateConfigData(kkAdminEng);
            }

            _updateConfigData.updateConfigData(sessionId, configs);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert the AdminConfigData items.
     * 
     * @param sessionId
     *            Session Id of the user.
     * @param configs
     *            The AdminConfigData items to insert
     * @return Return an array containing the Ids of the inserted AdminConfigData objects
     * @throws KKAdminException
     */
     public int[] insertConfigData(String sessionId, AdminConfigData[] configs) throws KKAdminException
     {
         try
         {
            if (_insertConfigData == null)
            {
                _insertConfigData = new InsertConfigData(kkAdminEng);
            }

            return _insertConfigData.insertConfigData(sessionId, configs);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Remove the AdminConfigData item from the Database.
     * 
     * @param sessionId
     *            Session Id of the user.
     * @param id
     *            The id of the AdminConfigData items to remove
     * @throws KKAdminException
     */
     public void removeConfigData(String sessionId, int id) throws KKAdminException
     {
         try
         {
            if (_removeConfigData == null)
            {
                _removeConfigData = new RemoveConfigData(kkAdminEng);
            }

            _removeConfigData.removeConfigData(sessionId, id);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Return the version number of KonaKart Admin that is contained within the konakart.jar
     * 
     * @return the KonaKart Admin version number as a String in the form N.N.N.N
     * @throws KKAdminException
     */
     public String getKonaKartAdminVersion() throws KKAdminException
     {
         try
         {
            if (_getKonaKartAdminVersion == null)
            {
                _getKonaKartAdminVersion = new GetKonaKartAdminVersion(kkAdminEng);
            }

            return _getKonaKartAdminVersion.getKonaKartAdminVersion();
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Scale the specified image to the specified name and dimensions.
     * 
     * @param sessionId
     *            Session Id of the user.
     * @param scaleOptions
     *            The scaling options
     * @return true if the file was scaled and created successfully
     * @throws KKAdminException
     */
     public boolean scaleImage(String sessionId, AdminScaleOptions scaleOptions) throws KKAdminException
     {
         try
         {
            if (_scaleImage == null)
            {
                _scaleImage = new ScaleImage(kkAdminEng);
            }

            return _scaleImage.scaleImage(sessionId, scaleOptions);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Add the image to the object defined in the AdminImageOptions object.
     * <p>
     * When adding product images it uses the same conventions as used in the Admin Application and
     * gets these definitions from the konakartadmin_gwt.properties file. Once an image is added to
     * a product using this API the image will appear for the product in the Admin Application just
     * as if it had been added via an image upload in the Admin application.
     * <p>
     * See {@link AdminImageOptions} for details on the options for adding images.
     * 
     * @param sessionId
     *            Session Id of the user.
     * @param options
     *            The options that define which object the image should be added to
     * @throws KKAdminException
     *             if the image was not added successfully
     */
     public void addImage(String sessionId, AdminImageOptions options) throws KKAdminException
     {
         try
         {
            if (_addImage == null)
            {
                _addImage = new AddImage(kkAdminEng);
            }

            _addImage.addImage(sessionId, options);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Remove the image (or images) from the object defined in the AdminImageOptions object.
     * <p>
     * See {@link AdminImageOptions} for details on the options for removing images.
     * 
     * @param sessionId
     *            Session Id of the user.
     * @param options
     *            The options that define which images should be removed
     * @throws KKAdminException
     *             for any unexpected problems
     */
     public void removeImage(String sessionId, AdminImageOptions options) throws KKAdminException
     {
         try
         {
            if (_removeImage == null)
            {
                _removeImage = new RemoveImage(kkAdminEng);
            }

            _removeImage.removeImage(sessionId, options);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Retrieve information on the Batch Jobs running in the system.
     * 
     * @param sessionId
     *            Session Id of the user.
     * @param jobStatusRequest
     *            Defines the jobs to retrieve information about
     * @return AdminJobStatusResponse an object defining the status of the jobs requested. The
     *         AdminJobStatusResponse object returned contains an array of AdminJob objects. This
     *         array is always returned instantiated but may contain no elements.
     * @throws KKAdminException
     */
     public AdminJobStatusResponse getJobStatus(String sessionId, AdminJobStatusRequest jobStatusRequest) throws KKAdminException
     {
         try
         {
            if (_getJobStatus == null)
            {
                _getJobStatus = new GetJobStatus(kkAdminEng);
            }

            return _getJobStatus.getJobStatus(sessionId, jobStatusRequest);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an AdminOrderRefund object.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param orderRefund
     *            An AdminOrderRefund object
     * @return The id of the newly created object
     * @throws KKAdminException
     */
     public int insertOrderRefund(String sessionId, AdminOrderRefund orderRefund) throws KKAdminException
     {
         try
         {
            if (_insertOrderRefund == null)
            {
                _insertOrderRefund = new InsertOrderRefund(kkAdminEng);
            }

            return _insertOrderRefund.insertOrderRefund(sessionId, orderRefund);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Edits the AdminOrderRefund object, replacing existing data with data in the orderRefund
     * parameter.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param orderRefund
     *            AdminOrderRefund object
     * @throws KKAdminException
     */
     public void editOrderRefund(String sessionId, AdminOrderRefund orderRefund) throws KKAdminException
     {
         try
         {
            if (_editOrderRefund == null)
            {
                _editOrderRefund = new EditOrderRefund(kkAdminEng);
            }

            _editOrderRefund.editOrderRefund(sessionId, orderRefund);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete the AdminOrderRefund object.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param orderRefundId
     *            The id of the AdminOrderRefund object
     * @throws KKAdminException
     */
     public void deleteOrderRefund(String sessionId, int orderRefundId) throws KKAdminException
     {
         try
         {
            if (_deleteOrderRefund == null)
            {
                _deleteOrderRefund = new DeleteOrderRefund(kkAdminEng);
            }

            _deleteOrderRefund.deleteOrderRefund(sessionId, orderRefundId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Search for OrderRefund objects with search criteria and order by criteria.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param retSearch
     *            An object that defines the search parameters
     * @param offset
     *            the offset in the database
     * @param size
     *            the number of records from the specified offset
     * @return Returns an AdminOrderRefundSearchResult object
     * @throws KKAdminException
     */
     public AdminOrderRefundSearchResult getOrderRefunds(String sessionId, AdminOrderRefundSearch retSearch, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getOrderRefunds == null)
            {
                _getOrderRefunds = new GetOrderRefunds(kkAdminEng);
            }

            return _getOrderRefunds.getOrderRefunds(sessionId, retSearch, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an event
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param event
     *            a KKEvent object
     * @return the id of the inserted event
     * @throws KKAdminException
     */
     public int insertKKEvent(String sessionId, KKEvent event) throws KKAdminException
     {
         try
         {
            if (_insertKKEvent == null)
            {
                _insertKKEvent = new InsertKKEvent(kkAdminEng);
            }

            return _insertKKEvent.insertKKEvent(sessionId, event);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete all the events matching the event search criteria
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param search
     *            KKEventSearch search object that defines the records to delete
     * @param desc
     * @return an array of KKEvent objects
     * @throws KKAdminException
     */
     public KKEvent[] getKKEvents(String sessionId, KKEventSearch search, DataDescriptor desc) throws KKAdminException
     {
         try
         {
            if (_getKKEvents == null)
            {
                _getKKEvents = new GetKKEvents(kkAdminEng);
            }

            return _getKKEvents.getKKEvents(sessionId, search, desc);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete all the events matching the event search criteria
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param search
     *            KKEventSearch search object that defines the records to delete
     * @throws KKAdminException
     */
     public void deleteKKEvents(String sessionId, KKEventSearch search) throws KKAdminException
     {
         try
         {
            if (_deleteKKEvents == null)
            {
                _deleteKKEvents = new DeleteKKEvents(kkAdminEng);
            }

            _deleteKKEvents.deleteKKEvents(sessionId, search);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This returns an AdminShipperSearchResult object matching the search constraints.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param search
     * @return eturns an AdminShipperSearchResult object
     * @throws KKAdminException
     */
     public AdminShipperSearchResult getShippers(String sessionId, AdminShipperSearch search) throws KKAdminException
     {
         try
         {
            if (_getShippers == null)
            {
                _getShippers = new GetShippers(kkAdminEng);
            }

            return _getShippers.getShippers(sessionId, search);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Get a shipper by id
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param shipperId
     * @return Returns an AdminShipper object
     * @throws KKAdminException
     */
     public AdminShipper getShipper(String sessionId, int shipperId) throws KKAdminException
     {
         try
         {
            if (_getShipper == null)
            {
                _getShipper = new GetShipper(kkAdminEng);
            }

            return _getShipper.getShipper(sessionId, shipperId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete a Shipper
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param shipperId
     *            The id of the AdminShipper object to be deleted
     * @return Returns the id of the deleted shipper
     * @throws KKAdminException
     */
     public int deleteShipper(String sessionId, int shipperId) throws KKAdminException
     {
         try
         {
            if (_deleteShipper == null)
            {
                _deleteShipper = new DeleteShipper(kkAdminEng);
            }

            return _deleteShipper.deleteShipper(sessionId, shipperId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert a Shipper
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param shipper
     *            The AdminShipper object being inserted
     * @return Returns the id of the inserted shipper object
     * @throws KKAdminException
     */
     public int insertShipper(String sessionId, AdminShipper shipper) throws KKAdminException
     {
         try
         {
            if (_insertShipper == null)
            {
                _insertShipper = new InsertShipper(kkAdminEng);
            }

            return _insertShipper.insertShipper(sessionId, shipper);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update a Shipper
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param shipper
     *            The AdminShipper object being updated
     * @return Returns the id of the updated shipper
     * @throws KKAdminException
     */
     public int updateShipper(String sessionId, AdminShipper shipper) throws KKAdminException
     {
         try
         {
            if (_updateShipper == null)
            {
                _updateShipper = new UpdateShipper(kkAdminEng);
            }

            return _updateShipper.updateShipper(sessionId, shipper);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert an AdminOrderShipment object and its array of AdminOrderShipmentProduct objects.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param orderShipment
     *            The OrderShipment object being inserted
     * @return Returns the id of the inserted order shipment object
     * @throws KKAdminException
     */
     public int insertOrderShipment(String sessionId, AdminOrderShipment orderShipment) throws KKAdminException
     {
         try
         {
            if (_insertOrderShipment == null)
            {
                _insertOrderShipment = new InsertOrderShipment(kkAdminEng);
            }

            return _insertOrderShipment.insertOrderShipment(sessionId, orderShipment);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Edits the orderShipment, replacing existing data with data in the orderShipment parameter.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param orderShipment
     *            The OrderShipment object being edited
     * @throws KKAdminException
     */
     public void editOrderShipment(String sessionId, AdminOrderShipment orderShipment) throws KKAdminException
     {
         try
         {
            if (_editOrderShipment == null)
            {
                _editOrderShipment = new EditOrderShipment(kkAdminEng);
            }

            _editOrderShipment.editOrderShipment(sessionId, orderShipment);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete the AdminOrderShipment object and any associated AdminOrderShipmentProduct objects.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param orderShipmentId
     *            The id of the OrderShipment object to be deleted
     * @throws KKAdminException
     */
     public void deleteOrderShipment(String sessionId, int orderShipmentId) throws KKAdminException
     {
         try
         {
            if (_deleteOrderShipment == null)
            {
                _deleteOrderShipment = new DeleteOrderShipment(kkAdminEng);
            }

            _deleteOrderShipment.deleteOrderShipment(sessionId, orderShipmentId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Search for OrderShipment objects with search criteria and order by criteria.
     * 
     * @param sessionId
     *            The session id of the logged in user
     * @param shipSearch
     * @param offset
     *            the offset in the database
     * @param size
     *            the number of records from the specified offset
     * @return Returns an AdminOrderShipmentSearchResult object
     * @throws KKAdminException
     */
     public AdminOrderShipmentSearchResult getOrderShipments(String sessionId, AdminOrderShipmentSearch shipSearch, int offset, int size) throws KKAdminException
     {
         try
         {
            if (_getOrderShipments == null)
            {
                _getOrderShipments = new GetOrderShipments(kkAdminEng);
            }

            return _getOrderShipments.getOrderShipments(sessionId, shipSearch, offset, size);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Insert the AdminMiscPrice objects in the specified array
     * 
     * @param sessionId
     *            Session Id of the user.
     * @param miscPrices
     *            the prices to insert
     * @return the id created for the last newly-inserted AdminMiscPrice object
     * @throws KKAdminException
     */
     public int insertMiscPrices(String sessionId, AdminMiscPrice[] miscPrices) throws KKAdminException
     {
         try
         {
            if (_insertMiscPrices == null)
            {
                _insertMiscPrices = new InsertMiscPrices(kkAdminEng);
            }

            return _insertMiscPrices.insertMiscPrices(sessionId, miscPrices);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Delete the AdminMiscPrice objects that match the specified AdminMiscPriceSearch object
     * 
     * @param sessionId
     *            Session Id of the user.
     * @param miscPriceSearch
     *            defines the AdminMiscPrice records to delete
     * @throws KKAdminException
     */
     public void deleteMiscPrices(String sessionId, AdminMiscPriceSearch miscPriceSearch) throws KKAdminException
     {
         try
         {
            if (_deleteMiscPrices == null)
            {
                _deleteMiscPrices = new DeleteMiscPrices(kkAdminEng);
            }

            _deleteMiscPrices.deleteMiscPrices(sessionId, miscPriceSearch);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Retrieves the AdminMiscPrice objects that match the specified AdminMiscPriceSearch object
     * 
     * @param sessionId
     *            Session Id of the user.
     * @param miscPriceSearch
     *            defines the AdminMiscPrice records to retrieve from the database
     * @return an array of AdminMiscPrice objects that match the search criteria
     * @throws KKAdminException
     */
     public AdminMiscPrice[] getMiscPrices(String sessionId, AdminMiscPriceSearch miscPriceSearch) throws KKAdminException
     {
         try
         {
            if (_getMiscPrices == null)
            {
                _getMiscPrices = new GetMiscPrices(kkAdminEng);
            }

            return _getMiscPrices.getMiscPrices(sessionId, miscPriceSearch);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Update the AdminMiscPrice objects in the specified array
     * 
     * @param sessionId
     *            Session Id of the user.
     * @param miscPrices
     *            the prices to update
     * @throws KKAdminException
     */
     public void updateMiscPrices(String sessionId, AdminMiscPrice[] miscPrices) throws KKAdminException
     {
         try
         {
            if (_updateMiscPrices == null)
            {
                _updateMiscPrices = new UpdateMiscPrices(kkAdminEng);
            }

            _updateMiscPrices.updateMiscPrices(sessionId, miscPrices);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * This method may be customized in the OrderIntegrationMgr to implement an algorithm that
     * creates an RMA code for the order. The Administration Application will use the returned value
     * (if not null) to automatically populate the RMA code entry field when inserting a new Return
     * object.
     * 
     * @param sessionId
     *            Session Id of the user.
     * @param orderId
     *            Id of the order
     * @return Returns an RMA Code
     * @throws KKAdminException
     */
     public String getRMACode(String sessionId, int orderId) throws KKAdminException
     {
         try
         {
            if (_getRMACode == null)
            {
                _getRMACode = new GetRMACode(kkAdminEng);
            }

            return _getRMACode.getRMACode(sessionId, orderId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

    /**
     * Removes product prices and quantities from the catalog referenced by catalogId for the
     * product referenced by productId.
     * 
     * @param sessionId
     *            Session Id of the user.
     * @param productId
     *            The numeric id of the product to be removed
     * @param catalogId
     *            Id of the catalog from which the product prices and quantities will be removed
     * @throws KKAdminException
     */
     public void removeProductFromCatalog(String sessionId, int productId, String catalogId) throws KKAdminException
     {
         try
         {
            if (_removeProductFromCatalog == null)
            {
                _removeProductFromCatalog = new RemoveProductFromCatalog(kkAdminEng);
            }

            _removeProductFromCatalog.removeProductFromCatalog(sessionId, productId, catalogId);
         } catch (Throwable e)
         {
            throw manageThrowable(e);
         }
     }

}
